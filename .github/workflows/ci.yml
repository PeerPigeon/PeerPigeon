name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NPM_CACHE_KEY: 'npm-cache'

jobs:
  # Security and vulnerability scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Run Security Scan with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for sensitive data
        run: |
          # Check for potential secrets in code
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude-dir=dist --exclude="package-lock.json" .; then
            echo "‚ö†Ô∏è  Warning: Potential sensitive data found in code"
            echo "Please review the above files to ensure no secrets are committed"
          fi

  # Build and test matrix
  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: [security-scan, code-quality]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20', '22']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Test persistent storage
        run: npm run test:persistent

      - name: Test browser integration (headless)
        run: npm run test:browser:headless

  # Browser compatibility testing
  browser-test:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start WebSocket server in background
        run: |
          npm run server &
          sleep 5

      - name: Run browser integration tests
        run: npm run test:browser:headless

      - name: Stop WebSocket server
        run: pkill -f "websocket-server/server.js" || true

  # Package integrity and publishing preparation
  package-integrity:
    name: Package Integrity
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run prepublishOnly script
        run: npm run prepublishOnly

      - name: Test package installation
        run: |
          # Pack the package
          npm pack
          
          # Create test directory
          mkdir -p test-install
          cd test-install
          
          # Initialize new project
          npm init -y
          
          # Install our packed package
          npm install ../peerpigeon-*.tgz
          
          # Test ES Module import
          echo '{"type":"module"}' > package.json
          echo "import PeerPigeonMesh from 'peerpigeon'; console.log('PeerPigeon import successful:', typeof PeerPigeonMesh);" > test-esm.js
          node test-esm.js

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: peerpigeon-*.tgz
          retention-days: 7

  # Deployment and release (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-matrix, browser-test, package-integrity]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run prepublishOnly script
        run: npm run prepublishOnly

      - name: Verify package is ready for publishing
        run: |
          # Pack the package to verify it's ready
          npm pack --dry-run
          echo "‚úÖ Package is ready for manual publishing"
          echo "üì¶ To publish manually, run: npm publish"

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-matrix, browser-test, package-integrity]
    if: always()
    
    steps:
      - name: Check results and notify
        run: |
          if [[ "${{ needs.security-scan.result }}" == "success" && "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo "üéâ All checks passed! Ready for review/merge."
          else
            echo "‚ùå Some checks failed. Please review the results above."
            exit 1
          fi
