{
  "version": 3,
  "sources": ["../node_modules/unsea/dist/unsea.mjs", "../node_modules/@koush/wrtc/lib/browser.js", "../node_modules/ws/browser.js", "../src/browser-entry.js", "../src/EventEmitter.js", "../src/EnvironmentDetector.js", "../src/DebugLogger.js", "../src/SignalingClient.js", "../src/PeerDiscovery.js", "../src/PeerConnection.js", "../src/ConnectionManager.js", "../src/SignalingHandler.js", "../src/EvictionManager.js", "../src/MeshOptimizer.js", "../src/CleanupManager.js", "../src/StorageManager.js", "../src/GossipManager.js", "../src/MediaManager.js", "../src/WebDHT.js", "../src/CryptoManager.js", "../src/LexicalStorageInterface.js", "../src/DistributedStorageManager.js", "../src/PeerPigeonMesh.js"],
  "sourcesContent": ["const crypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\nfunction anumber(n) {\n  if (!Number.isSafeInteger(n) || n < 0)\n    throw new Error(\"positive integer expected, got \" + n);\n}\nfunction abytes(b, ...lengths) {\n  if (!isBytes(b))\n    throw new Error(\"Uint8Array expected\");\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\n}\nfunction ahash(h) {\n  if (typeof h !== \"function\" || typeof h.create !== \"function\")\n    throw new Error(\"Hash should be wrapped by utils.createHasher\");\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n  if (instance.destroyed)\n    throw new Error(\"Hash instance has been destroyed\");\n  if (checkFinished && instance.finished)\n    throw new Error(\"Hash#digest() has already been called\");\n}\nfunction aoutput(out, instance) {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(\"digestInto() expects output buffer of length at least \" + min);\n  }\n}\nfunction clean(...arrays) {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\nfunction createView(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nfunction rotr(word, shift) {\n  return word << 32 - shift | word >>> shift;\n}\nconst hasHexBuiltin = /* @__PURE__ */ (() => (\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === \"function\" && typeof Uint8Array.fromHex === \"function\"\n))();\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, \"0\"));\nfunction bytesToHex(bytes) {\n  abytes(bytes);\n  if (hasHexBuiltin)\n    return bytes.toHex();\n  let hex = \"\";\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n  if (ch >= asciis._0 && ch <= asciis._9)\n    return ch - asciis._0;\n  if (ch >= asciis.A && ch <= asciis.F)\n    return ch - (asciis.A - 10);\n  if (ch >= asciis.a && ch <= asciis.f)\n    return ch - (asciis.a - 10);\n  return;\n}\nfunction hexToBytes(hex) {\n  if (typeof hex !== \"string\")\n    throw new Error(\"hex string expected, got \" + typeof hex);\n  if (hasHexBuiltin)\n    return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2)\n    throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === void 0 || n2 === void 0) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\nfunction utf8ToBytes(str) {\n  if (typeof str !== \"string\")\n    throw new Error(\"string expected\");\n  return new Uint8Array(new TextEncoder().encode(str));\n}\nfunction toBytes(data) {\n  if (typeof data === \"string\")\n    data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\nfunction concatBytes(...arrays) {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\nclass Hash {\n}\nfunction createHasher(hashCons) {\n  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\nfunction randomBytes(bytesLength = 32) {\n  if (crypto && typeof crypto.getRandomValues === \"function\") {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  if (crypto && typeof crypto.randomBytes === \"function\") {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error(\"crypto.getRandomValues must be defined\");\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n$3 = /* @__PURE__ */ BigInt(0);\nconst _1n$3 = /* @__PURE__ */ BigInt(1);\nfunction abool(title, value) {\n  if (typeof value !== \"boolean\")\n    throw new Error(title + \" boolean expected, got \" + value);\n}\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? \"0\" + hex : hex;\n}\nfunction hexToNumber(hex) {\n  if (typeof hex !== \"string\")\n    throw new Error(\"hex string expected, got \" + typeof hex);\n  return hex === \"\" ? _0n$3 : BigInt(\"0x\" + hex);\n}\nfunction bytesToNumberBE(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n  return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction numberToBytesLE(n, len) {\n  return numberToBytesBE(n, len).reverse();\n}\nfunction ensureBytes(title, hex, expectedLength) {\n  let res;\n  if (typeof hex === \"string\") {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + \" must be hex string or Uint8Array, cause: \" + e);\n    }\n  } else if (isBytes(hex)) {\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + \" must be hex string or Uint8Array\");\n  }\n  res.length;\n  return res;\n}\nconst isPosBig = (n) => typeof n === \"bigint\" && _0n$3 <= n;\nfunction inRange(n, min, max) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\nfunction aInRange(title, n, min, max) {\n  if (!inRange(n, min, max))\n    throw new Error(\"expected valid \" + title + \": \" + min + \" <= n < \" + max + \", got \" + n);\n}\nfunction bitLen(n) {\n  let len;\n  for (len = 0; n > _0n$3; n >>= _1n$3, len += 1)\n    ;\n  return len;\n}\nconst bitMask = (n) => (_1n$3 << BigInt(n)) - _1n$3;\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n  if (typeof hashLen !== \"number\" || hashLen < 2)\n    throw new Error(\"hashLen must be a number\");\n  if (typeof qByteLen !== \"number\" || qByteLen < 2)\n    throw new Error(\"qByteLen must be a number\");\n  if (typeof hmacFn !== \"function\")\n    throw new Error(\"hmacFn must be a function\");\n  const u8n = (len) => new Uint8Array(len);\n  const u8of = (byte) => Uint8Array.of(byte);\n  let v = u8n(hashLen);\n  let k = u8n(hashLen);\n  let i = 0;\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b) => hmacFn(k, v, ...b);\n  const reseed = (seed = u8n(0)) => {\n    k = h(u8of(0), seed);\n    v = h();\n    if (seed.length === 0)\n      return;\n    k = h(u8of(1), seed);\n    v = h();\n  };\n  const gen = () => {\n    if (i++ >= 1e3)\n      throw new Error(\"drbg: tried 1000 values\");\n    let len = 0;\n    const out = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed, pred) => {\n    reset();\n    reseed(seed);\n    let res = void 0;\n    while (!(res = pred(gen())))\n      reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\nfunction _validateObject(object, fields, optFields = {}) {\n  if (!object || typeof object !== \"object\")\n    throw new Error(\"expected valid options object\");\n  function checkField(fieldName, expectedType, isOpt) {\n    const val = object[fieldName];\n    if (isOpt && val === void 0)\n      return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\nfunction memoized(fn) {\n  const map = /* @__PURE__ */ new WeakMap();\n  return (arg, ...args) => {\n    const val = map.get(arg);\n    if (val !== void 0)\n      return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n$2 = BigInt(0), _1n$2 = BigInt(1), _2n$1 = /* @__PURE__ */ BigInt(2), _3n$1 = /* @__PURE__ */ BigInt(3);\nconst _4n$1 = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\nfunction mod(a, b) {\n  const result = a % b;\n  return result >= _0n$2 ? result : b + result;\n}\nfunction invert(number, modulo) {\n  if (number === _0n$2)\n    throw new Error(\"invert: expected non-zero number\");\n  if (modulo <= _0n$2)\n    throw new Error(\"invert: expected positive modulus, got \" + modulo);\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n$2, u = _1n$2;\n  while (a !== _0n$2) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    b = a, a = r, x = u, u = m;\n  }\n  const gcd = b;\n  if (gcd !== _1n$2)\n    throw new Error(\"invert: does not exist\");\n  return mod(x, modulo);\n}\nfunction assertIsSquare(Fp, root, n) {\n  if (!Fp.eql(Fp.sqr(root), n))\n    throw new Error(\"Cannot find square root\");\n}\nfunction sqrt3mod4(Fp, n) {\n  const p1div4 = (Fp.ORDER + _1n$2) / _4n$1;\n  const root = Fp.pow(n, p1div4);\n  assertIsSquare(Fp, root, n);\n  return root;\n}\nfunction sqrt5mod8(Fp, n) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n$1);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n$1), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  assertIsSquare(Fp, root, n);\n  return root;\n}\nfunction sqrt9mod16(P) {\n  const Fp_ = Field(P);\n  const tn = tonelliShanks(P);\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));\n  const c2 = tn(Fp_, c1);\n  const c3 = tn(Fp_, Fp_.neg(c1));\n  const c4 = (P + _7n) / _16n;\n  return (Fp, n) => {\n    let tv1 = Fp.pow(n, c4);\n    let tv2 = Fp.mul(tv1, c1);\n    const tv3 = Fp.mul(tv1, c2);\n    const tv4 = Fp.mul(tv1, c3);\n    const e1 = Fp.eql(Fp.sqr(tv2), n);\n    const e2 = Fp.eql(Fp.sqr(tv3), n);\n    tv1 = Fp.cmov(tv1, tv2, e1);\n    tv2 = Fp.cmov(tv4, tv3, e2);\n    const e3 = Fp.eql(Fp.sqr(tv2), n);\n    const root = Fp.cmov(tv1, tv2, e3);\n    assertIsSquare(Fp, root, n);\n    return root;\n  };\n}\nfunction tonelliShanks(P) {\n  if (P < _3n$1)\n    throw new Error(\"sqrt is not defined for small field\");\n  let Q = P - _1n$2;\n  let S = 0;\n  while (Q % _2n$1 === _0n$2) {\n    Q /= _2n$1;\n    S++;\n  }\n  let Z = _2n$1;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    if (Z++ > 1e3)\n      throw new Error(\"Cannot find square root: probably non-prime P\");\n  }\n  if (S === 1)\n    return sqrt3mod4;\n  let cc = _Fp.pow(Z, Q);\n  const Q1div2 = (Q + _1n$2) / _2n$1;\n  return function tonelliSlow(Fp, n) {\n    if (Fp.is0(n))\n      return n;\n    if (FpLegendre(Fp, n) !== 1)\n      throw new Error(\"Cannot find square root\");\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc);\n    let t = Fp.pow(n, Q);\n    let R = Fp.pow(n, Q1div2);\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t))\n        return Fp.ZERO;\n      let i = 1;\n      let t_tmp = Fp.sqr(t);\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp);\n        if (i === M)\n          throw new Error(\"Cannot find square root\");\n      }\n      const exponent = _1n$2 << BigInt(M - i - 1);\n      const b = Fp.pow(c, exponent);\n      M = i;\n      c = Fp.sqr(b);\n      t = Fp.mul(t, c);\n      R = Fp.mul(R, b);\n    }\n    return R;\n  };\n}\nfunction FpSqrt(P) {\n  if (P % _4n$1 === _3n$1)\n    return sqrt3mod4;\n  if (P % _8n === _5n)\n    return sqrt5mod8;\n  if (P % _16n === _9n)\n    return sqrt9mod16(P);\n  return tonelliShanks(P);\n}\nconst FIELD_FIELDS = [\n  \"create\",\n  \"isValid\",\n  \"is0\",\n  \"neg\",\n  \"inv\",\n  \"sqrt\",\n  \"sqr\",\n  \"eql\",\n  \"add\",\n  \"sub\",\n  \"mul\",\n  \"pow\",\n  \"div\",\n  \"addN\",\n  \"subN\",\n  \"mulN\",\n  \"sqrN\"\n];\nfunction validateField(field) {\n  const initial = {\n    ORDER: \"bigint\",\n    MASK: \"bigint\",\n    BYTES: \"number\",\n    BITS: \"number\"\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = \"function\";\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  return field;\n}\nfunction FpPow(Fp, num, power) {\n  if (power < _0n$2)\n    throw new Error(\"invalid exponent, negatives unsupported\");\n  if (power === _0n$2)\n    return Fp.ONE;\n  if (power === _1n$2)\n    return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n$2) {\n    if (power & _1n$2)\n      p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n$2;\n  }\n  return p;\n}\nfunction FpInvertBatch(Fp, nums, passZero = false) {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : void 0);\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num))\n      return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  const invertedAcc = Fp.inv(multipliedAcc);\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num))\n      return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\nfunction FpLegendre(Fp, n) {\n  const p1mod2 = (Fp.ORDER - _1n$2) / _2n$1;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no)\n    throw new Error(\"invalid Legendre symbol result\");\n  return yes ? 1 : zero ? 0 : -1;\n}\nfunction nLength(n, nBitLength) {\n  if (nBitLength !== void 0)\n    anumber(nBitLength);\n  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\nfunction Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n  if (ORDER <= _0n$2)\n    throw new Error(\"invalid field: expected ORDER > 0, got \" + ORDER);\n  let _nbitLength = void 0;\n  let _sqrt = void 0;\n  let modOnDecode = false;\n  let allowedLengths = void 0;\n  if (typeof bitLenOrOpts === \"object\" && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE)\n      throw new Error(\"cannot specify opts in two arguments\");\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS)\n      _nbitLength = _opts.BITS;\n    if (_opts.sqrt)\n      _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === \"boolean\")\n      isLE = _opts.isLE;\n    if (typeof _opts.modOnDecode === \"boolean\")\n      modOnDecode = _opts.modOnDecode;\n    allowedLengths = _opts.allowedLengths;\n  } else {\n    if (typeof bitLenOrOpts === \"number\")\n      _nbitLength = bitLenOrOpts;\n    if (opts.sqrt)\n      _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048)\n    throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n  let sqrtP;\n  const f = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n$2,\n    ONE: _1n$2,\n    allowedLengths,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== \"bigint\")\n        throw new Error(\"invalid field element: expected bigint, got \" + typeof num);\n      return _0n$2 <= num && num < ORDER;\n    },\n    is0: (num) => num === _0n$2,\n    // is valid and invertible\n    isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n$2) === _1n$2,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: (num) => invert(num, ORDER),\n    sqrt: _sqrt || ((n) => {\n      if (!sqrtP)\n        sqrtP = FpSqrt(ORDER);\n      return sqrtP(f, n);\n    }),\n    toBytes: (num) => isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),\n    fromBytes: (bytes, skipValidation = true) => {\n      if (allowedLengths) {\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n          throw new Error(\"Field.fromBytes: expected \" + allowedLengths + \" bytes, got \" + bytes.length);\n        }\n        const padded = new Uint8Array(BYTES);\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n        bytes = padded;\n      }\n      if (bytes.length !== BYTES)\n        throw new Error(\"Field.fromBytes: expected \" + BYTES + \" bytes, got \" + bytes.length);\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n      if (modOnDecode)\n        scalar = mod(scalar, ORDER);\n      if (!skipValidation) {\n        if (!f.isValid(scalar))\n          throw new Error(\"invalid field element: outside of range 0..ORDER\");\n      }\n      return scalar;\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => c ? b : a\n  });\n  return Object.freeze(f);\n}\nfunction getFieldBytesLength(fieldOrder) {\n  if (typeof fieldOrder !== \"bigint\")\n    throw new Error(\"field order must be bigint\");\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\nfunction getMinHashLength(fieldOrder) {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(\"expected \" + minLen + \"-1024 bytes of input, got \" + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  const reduced = mod(num, fieldOrder - _1n$2) + _1n$2;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === \"function\")\n    return view.setBigUint64(byteOffset, value, isLE);\n  const _32n2 = BigInt(32);\n  const _u32_max = BigInt(4294967295);\n  const wh = Number(value >> _32n2 & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\nfunction Chi(a, b, c) {\n  return a & b ^ ~a & c;\n}\nfunction Maj(a, b, c) {\n  return a & b ^ a & c ^ b & c;\n}\nclass HashMD extends Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data) {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen)\n          this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    buffer[pos++] = 128;\n    clean(this.buffer.subarray(pos));\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    for (let i = pos; i < blockLen; i++)\n      buffer[i] = 0;\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    if (len % 4)\n      throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length)\n      throw new Error(\"_sha2: outputLen bigger than state\");\n    for (let i = 0; i < outLen; i++)\n      oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen)\n      to.buffer.set(buffer);\n    return to;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n}\nconst SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n  1779033703,\n  3144134277,\n  1013904242,\n  2773480762,\n  1359893119,\n  2600822924,\n  528734635,\n  1541459225\n]);\nconst SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n  3418070365,\n  3238371032,\n  1654270250,\n  914150663,\n  2438529370,\n  812702999,\n  355462360,\n  4144912697,\n  1731405415,\n  4290775857,\n  2394180231,\n  1750603025,\n  3675008525,\n  1694076839,\n  1203062813,\n  3204075428\n]);\nconst SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n  1779033703,\n  4089235720,\n  3144134277,\n  2227873595,\n  1013904242,\n  4271175723,\n  2773480762,\n  1595750129,\n  1359893119,\n  2917565137,\n  2600822924,\n  725511199,\n  528734635,\n  4215389547,\n  1541459225,\n  327033209\n]);\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n  if (le)\n    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };\n  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };\n}\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  1116352408,\n  1899447441,\n  3049323471,\n  3921009573,\n  961987163,\n  1508970993,\n  2453635748,\n  2870763221,\n  3624381080,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  2162078206,\n  2614888103,\n  3248222580,\n  3835390401,\n  4022224774,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  2554220882,\n  2821834349,\n  2952996808,\n  3210313671,\n  3336571891,\n  3584528711,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  2177026350,\n  2456956037,\n  2730485921,\n  2820302411,\n  3259730800,\n  3345764771,\n  3516065817,\n  3600352804,\n  4094571909,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  2227730452,\n  2361852424,\n  2428436474,\n  2756734187,\n  3204031479,\n  3329325298\n]);\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n  constructor(outputLen = 32) {\n    super(64, outputLen, 8, false);\n    this.A = SHA256_IV[0] | 0;\n    this.B = SHA256_IV[1] | 0;\n    this.C = SHA256_IV[2] | 0;\n    this.D = SHA256_IV[3] | 0;\n    this.E = SHA256_IV[4] | 0;\n    this.F = SHA256_IV[5] | 0;\n    this.G = SHA256_IV[6] | 0;\n    this.H = SHA256_IV[7] | 0;\n  }\n  get() {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  process(view, offset) {\n    for (let i = 0; i < 16; i++, offset += 4)\n      SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    }\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = sigma0 + Maj(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    }\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  roundClean() {\n    clean(SHA256_W);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\nconst K512 = /* @__PURE__ */ (() => split([\n  \"0x428a2f98d728ae22\",\n  \"0x7137449123ef65cd\",\n  \"0xb5c0fbcfec4d3b2f\",\n  \"0xe9b5dba58189dbbc\",\n  \"0x3956c25bf348b538\",\n  \"0x59f111f1b605d019\",\n  \"0x923f82a4af194f9b\",\n  \"0xab1c5ed5da6d8118\",\n  \"0xd807aa98a3030242\",\n  \"0x12835b0145706fbe\",\n  \"0x243185be4ee4b28c\",\n  \"0x550c7dc3d5ffb4e2\",\n  \"0x72be5d74f27b896f\",\n  \"0x80deb1fe3b1696b1\",\n  \"0x9bdc06a725c71235\",\n  \"0xc19bf174cf692694\",\n  \"0xe49b69c19ef14ad2\",\n  \"0xefbe4786384f25e3\",\n  \"0x0fc19dc68b8cd5b5\",\n  \"0x240ca1cc77ac9c65\",\n  \"0x2de92c6f592b0275\",\n  \"0x4a7484aa6ea6e483\",\n  \"0x5cb0a9dcbd41fbd4\",\n  \"0x76f988da831153b5\",\n  \"0x983e5152ee66dfab\",\n  \"0xa831c66d2db43210\",\n  \"0xb00327c898fb213f\",\n  \"0xbf597fc7beef0ee4\",\n  \"0xc6e00bf33da88fc2\",\n  \"0xd5a79147930aa725\",\n  \"0x06ca6351e003826f\",\n  \"0x142929670a0e6e70\",\n  \"0x27b70a8546d22ffc\",\n  \"0x2e1b21385c26c926\",\n  \"0x4d2c6dfc5ac42aed\",\n  \"0x53380d139d95b3df\",\n  \"0x650a73548baf63de\",\n  \"0x766a0abb3c77b2a8\",\n  \"0x81c2c92e47edaee6\",\n  \"0x92722c851482353b\",\n  \"0xa2bfe8a14cf10364\",\n  \"0xa81a664bbc423001\",\n  \"0xc24b8b70d0f89791\",\n  \"0xc76c51a30654be30\",\n  \"0xd192e819d6ef5218\",\n  \"0xd69906245565a910\",\n  \"0xf40e35855771202a\",\n  \"0x106aa07032bbd1b8\",\n  \"0x19a4c116b8d2d0c8\",\n  \"0x1e376c085141ab53\",\n  \"0x2748774cdf8eeb99\",\n  \"0x34b0bcb5e19b48a8\",\n  \"0x391c0cb3c5c95a63\",\n  \"0x4ed8aa4ae3418acb\",\n  \"0x5b9cca4f7763e373\",\n  \"0x682e6ff3d6b2b8a3\",\n  \"0x748f82ee5defb2fc\",\n  \"0x78a5636f43172f60\",\n  \"0x84c87814a1f0ab72\",\n  \"0x8cc702081a6439ec\",\n  \"0x90befffa23631e28\",\n  \"0xa4506cebde82bde9\",\n  \"0xbef9a3f7b2c67915\",\n  \"0xc67178f2e372532b\",\n  \"0xca273eceea26619c\",\n  \"0xd186b8c721c0c207\",\n  \"0xeada7dd6cde0eb1e\",\n  \"0xf57d4f7fee6ed178\",\n  \"0x06f067aa72176fba\",\n  \"0x0a637dc5a2c898a6\",\n  \"0x113f9804bef90dae\",\n  \"0x1b710b35131c471b\",\n  \"0x28db77f523047d84\",\n  \"0x32caab7b40c72493\",\n  \"0x3c9ebe0a15c9bebc\",\n  \"0x431d67c49c100d4c\",\n  \"0x4cc5d4becb3e42b6\",\n  \"0x597f299cfc657e2a\",\n  \"0x5fcb6fab3ad6faec\",\n  \"0x6c44198c4a475817\"\n].map((n) => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends HashMD {\n  constructor(outputLen = 64) {\n    super(128, outputLen, 16, false);\n    this.Ah = SHA512_IV[0] | 0;\n    this.Al = SHA512_IV[1] | 0;\n    this.Bh = SHA512_IV[2] | 0;\n    this.Bl = SHA512_IV[3] | 0;\n    this.Ch = SHA512_IV[4] | 0;\n    this.Cl = SHA512_IV[5] | 0;\n    this.Dh = SHA512_IV[6] | 0;\n    this.Dl = SHA512_IV[7] | 0;\n    this.Eh = SHA512_IV[8] | 0;\n    this.El = SHA512_IV[9] | 0;\n    this.Fh = SHA512_IV[10] | 0;\n    this.Fl = SHA512_IV[11] | 0;\n    this.Gh = SHA512_IV[12] | 0;\n    this.Gl = SHA512_IV[13] | 0;\n    this.Hh = SHA512_IV[14] | 0;\n    this.Hl = SHA512_IV[15] | 0;\n  }\n  // prettier-ignore\n  get() {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  process(view, offset) {\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32(offset += 4);\n    }\n    for (let i = 16; i < 80; i++) {\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);\n      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);\n      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);\n      const SUMl = add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    for (let i = 0; i < 80; i++) {\n      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);\n      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);\n      const CHIh = Eh & Fh ^ ~Eh & Gh;\n      const CHIl = El & Fl ^ ~El & Gl;\n      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);\n      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);\n      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = add3L(T1l, sigma0l, MAJl);\n      Ah = add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  roundClean() {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy() {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\nclass SHA384 extends SHA512 {\n  constructor() {\n    super(48);\n    this.Ah = SHA384_IV[0] | 0;\n    this.Al = SHA384_IV[1] | 0;\n    this.Bh = SHA384_IV[2] | 0;\n    this.Bl = SHA384_IV[3] | 0;\n    this.Ch = SHA384_IV[4] | 0;\n    this.Cl = SHA384_IV[5] | 0;\n    this.Dh = SHA384_IV[6] | 0;\n    this.Dl = SHA384_IV[7] | 0;\n    this.Eh = SHA384_IV[8] | 0;\n    this.El = SHA384_IV[9] | 0;\n    this.Fh = SHA384_IV[10] | 0;\n    this.Fl = SHA384_IV[11] | 0;\n    this.Gh = SHA384_IV[12] | 0;\n    this.Gl = SHA384_IV[13] | 0;\n    this.Hh = SHA384_IV[14] | 0;\n    this.Hl = SHA384_IV[15] | 0;\n  }\n}\nconst sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\nconst sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\nconst sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\nclass HMAC extends Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== \"function\")\n      throw new Error(\"Expected instance of class which extends utils.Hash\");\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++)\n      pad[i] ^= 54;\n    this.iHash.update(pad);\n    this.oHash = hash.create();\n    for (let i = 0; i < pad.length; i++)\n      pad[i] ^= 54 ^ 92;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf) {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n$1 = BigInt(0);\nconst _1n$1 = BigInt(1);\nfunction negateCt(condition, item) {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\nfunction normalizeZ(c, points) {\n  const invertedZs = FpInvertBatch(c.Fp, points.map((p) => p.Z));\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n}\nfunction validateW(W, bits) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error(\"invalid window size, expected [1..\" + bits + \"], got W=\" + W);\n}\nfunction calcWOpts(W, scalarBits) {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1;\n  const windowSize = 2 ** (W - 1);\n  const maxNumber = 2 ** W;\n  const mask = bitMask(W);\n  const shiftBy = BigInt(W);\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window2, wOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask);\n  let nextN = n >> shiftBy;\n  if (wbits > windowSize) {\n    wbits -= maxNumber;\n    nextN += _1n$1;\n  }\n  const offsetStart = window2 * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1;\n  const isZero = wbits === 0;\n  const isNeg = wbits < 0;\n  const isNegF = window2 % 2 !== 0;\n  const offsetF = offsetStart;\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n  if (!Array.isArray(points))\n    throw new Error(\"array expected\");\n  points.forEach((p, i) => {\n    if (!(p instanceof c))\n      throw new Error(\"invalid point at index \" + i);\n  });\n}\nfunction validateMSMScalars(scalars, field) {\n  if (!Array.isArray(scalars))\n    throw new Error(\"array of scalars expected\");\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s))\n      throw new Error(\"invalid scalar at index \" + i);\n  });\n}\nconst pointPrecomputes = /* @__PURE__ */ new WeakMap();\nconst pointWindowSizes = /* @__PURE__ */ new WeakMap();\nfunction getW(P) {\n  return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n  if (n !== _0n$1)\n    throw new Error(\"invalid wNAF\");\n}\nclass wNAF {\n  // Parametrized with a given Point class (not individual point)\n  constructor(Point, bits) {\n    this.BASE = Point.BASE;\n    this.ZERO = Point.ZERO;\n    this.Fn = Point.Fn;\n    this.bits = bits;\n  }\n  // non-const time multiplication ladder\n  _unsafeLadder(elm, n, p = this.ZERO) {\n    let d = elm;\n    while (n > _0n$1) {\n      if (n & _1n$1)\n        p = p.add(d);\n      d = d.double();\n      n >>= _1n$1;\n    }\n    return p;\n  }\n  /**\n   * Creates a wNAF precomputation window. Used for caching.\n   * Default window size is set by `utils.precompute()` and is equal to 8.\n   * Number of precomputed points depends on the curve size:\n   * 2^(\uD835\uDC4A\u22121) * (Math.ceil(\uD835\uDC5B / \uD835\uDC4A) + 1), where:\n   * - \uD835\uDC4A is the window size\n   * - \uD835\uDC5B is the bitlength of the curve order.\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n   * @param point Point instance\n   * @param W window size\n   * @returns precomputed point tables flattened to a single array\n   */\n  precomputeWindow(point, W) {\n    const { windows, windowSize } = calcWOpts(W, this.bits);\n    const points = [];\n    let p = point;\n    let base = p;\n    for (let window2 = 0; window2 < windows; window2++) {\n      base = p;\n      points.push(base);\n      for (let i = 1; i < windowSize; i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n  /**\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n   * More compact implementation:\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n   * @returns real and fake (for const-time) points\n   */\n  wNAF(W, precomputes, n) {\n    if (!this.Fn.isValid(n))\n      throw new Error(\"invalid scalar\");\n    let p = this.ZERO;\n    let f = this.BASE;\n    const wo = calcWOpts(W, this.bits);\n    for (let window2 = 0; window2 < wo.windows; window2++) {\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window2, wo);\n      n = nextN;\n      if (isZero) {\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\n      } else {\n        p = p.add(negateCt(isNeg, precomputes[offset]));\n      }\n    }\n    assert0(n);\n    return { p, f };\n  }\n  /**\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n   * @param acc accumulator point to add result of multiplication\n   * @returns point\n   */\n  wNAFUnsafe(W, precomputes, n, acc = this.ZERO) {\n    const wo = calcWOpts(W, this.bits);\n    for (let window2 = 0; window2 < wo.windows; window2++) {\n      if (n === _0n$1)\n        break;\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window2, wo);\n      n = nextN;\n      if (isZero) {\n        continue;\n      } else {\n        const item = precomputes[offset];\n        acc = acc.add(isNeg ? item.negate() : item);\n      }\n    }\n    assert0(n);\n    return acc;\n  }\n  getPrecomputes(W, point, transform) {\n    let comp = pointPrecomputes.get(point);\n    if (!comp) {\n      comp = this.precomputeWindow(point, W);\n      if (W !== 1) {\n        if (typeof transform === \"function\")\n          comp = transform(comp);\n        pointPrecomputes.set(point, comp);\n      }\n    }\n    return comp;\n  }\n  cached(point, scalar, transform) {\n    const W = getW(point);\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n  }\n  unsafe(point, scalar, transform, prev) {\n    const W = getW(point);\n    if (W === 1)\n      return this._unsafeLadder(point, scalar, prev);\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n  }\n  // We calculate precomputes for elliptic curve point multiplication\n  // using windowed method. This specifies window size and\n  // stores precomputed values. Usually only base point would be precomputed.\n  createCache(P, W) {\n    validateW(W, this.bits);\n    pointWindowSizes.set(P, W);\n    pointPrecomputes.delete(P);\n  }\n  hasCache(elm) {\n    return getW(elm) !== 1;\n  }\n}\nfunction mulEndoUnsafe(Point, point, k1, k2) {\n  let acc = point;\n  let p1 = Point.ZERO;\n  let p2 = Point.ZERO;\n  while (k1 > _0n$1 || k2 > _0n$1) {\n    if (k1 & _1n$1)\n      p1 = p1.add(acc);\n    if (k2 & _1n$1)\n      p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n$1;\n    k2 >>= _1n$1;\n  }\n  return { p1, p2 };\n}\nfunction pippenger(c, fieldN, points, scalars) {\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength)\n    throw new Error(\"arrays of points and scalars must have equal length\");\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1;\n  if (wbits > 12)\n    windowSize = wbits - 3;\n  else if (wbits > 4)\n    windowSize = wbits - 2;\n  else if (wbits > 0)\n    windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero);\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits2 = Number(scalar >> BigInt(i) & MASK);\n      buckets[wbits2] = buckets[wbits2].add(points[j]);\n    }\n    let resI = zero;\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0)\n      for (let j = 0; j < windowSize; j++)\n        sum = sum.double();\n  }\n  return sum;\n}\nfunction createField(order, field) {\n  if (field) {\n    if (field.ORDER !== order)\n      throw new Error(\"Field.ORDER must match order: Fp == p, Fn == n\");\n    validateField(field);\n    return field;\n  } else {\n    return Field(order);\n  }\n}\nfunction _createCurveFields(type, CURVE, curveOpts = {}) {\n  if (!CURVE || typeof CURVE !== \"object\")\n    throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of [\"p\", \"n\", \"h\"]) {\n    const val = CURVE[p];\n    if (!(typeof val === \"bigint\" && val > _0n$1))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp);\n  const Fn = createField(CURVE.n, curveOpts.Fn);\n  const _b = \"b\";\n  const params = [\"Gx\", \"Gy\", \"a\", _b];\n  for (const p of params) {\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  return { Fp, Fn };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n) / den;\nfunction _splitEndoScalar(k, basis, n) {\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg)\n    k1 = -k1;\n  if (k2neg)\n    k2 = -k2;\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n;\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error(\"splitScalar (endomorphism): failed, k=\" + k);\n  }\n  return { k1neg, k1, k2neg, k2 };\n}\nfunction validateSigVerOpts(opts) {\n  if (opts.lowS !== void 0)\n    abool(\"lowS\", opts.lowS);\n  if (opts.prehash !== void 0)\n    abool(\"prehash\", opts.prehash);\n}\nclass DERErr extends Error {\n  constructor(m = \"\") {\n    super(m);\n  }\n}\nconst DER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag, data) => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256)\n        throw new E(\"tlv.encode: wrong tag\");\n      if (data.length & 1)\n        throw new E(\"tlv.encode: unpadded data\");\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if (len.length / 2 & 128)\n        throw new E(\"tlv.encode: long form length too big\");\n      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : \"\";\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag, data) {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256)\n        throw new E(\"tlv.encode: wrong tag\");\n      if (data.length < 2 || data[pos++] !== tag)\n        throw new E(\"tlv.decode: wrong tlv\");\n      const first = data[pos++];\n      const isLong = !!(first & 128);\n      let length = 0;\n      if (!isLong)\n        length = first;\n      else {\n        const lenLen = first & 127;\n        if (!lenLen)\n          throw new E(\"tlv.decode(long): indefinite length not supported\");\n        if (lenLen > 4)\n          throw new E(\"tlv.decode(long): byte length is too big\");\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen)\n          throw new E(\"tlv.decode: length bytes not complete\");\n        if (lengthBytes[0] === 0)\n          throw new E(\"tlv.decode(long): zero leftmost byte\");\n        for (const b of lengthBytes)\n          length = length << 8 | b;\n        pos += lenLen;\n        if (length < 128)\n          throw new E(\"tlv.decode(long): not minimal encoding\");\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length)\n        throw new E(\"tlv.decode: wrong value length\");\n      return { v, l: data.subarray(pos + length) };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num) {\n      const { Err: E } = DER;\n      if (num < _0n)\n        throw new E(\"integer: negative integers are not allowed\");\n      let hex = numberToHexUnpadded(num);\n      if (Number.parseInt(hex[0], 16) & 8)\n        hex = \"00\" + hex;\n      if (hex.length & 1)\n        throw new E(\"unexpected DER parsing assertion: unpadded hex\");\n      return hex;\n    },\n    decode(data) {\n      const { Err: E } = DER;\n      if (data[0] & 128)\n        throw new E(\"invalid signature integer: negative\");\n      if (data[0] === 0 && !(data[1] & 128))\n        throw new E(\"invalid signature integer: unnecessary leading zero\");\n      return bytesToNumberBE(data);\n    }\n  },\n  toSig(hex) {\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes(\"signature\", hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);\n    if (seqLeftBytes.length)\n      throw new E(\"invalid signature: left bytes after parsing\");\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);\n    if (sLeftBytes.length)\n      throw new E(\"invalid signature: left bytes after parsing\");\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig) {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(2, int.encode(sig.r));\n    const ss = tlv.encode(2, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(48, seq);\n  }\n};\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction _legacyHelperEquat(Fp, a, b) {\n  function weierstrassEquation(x) {\n    const x2 = Fp.sqr(x);\n    const x3 = Fp.mul(x2, x);\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);\n  }\n  return weierstrassEquation;\n}\nfunction _normFnElement(Fn, key) {\n  const { BYTES: expected } = Fn;\n  let num;\n  if (typeof key === \"bigint\") {\n    num = key;\n  } else {\n    let bytes = ensureBytes(\"private key\", key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num))\n    throw new Error(\"invalid private key: out of range [1..N-1]\");\n  return num;\n}\nfunction weierstrassN(CURVE, curveOpts = {}) {\n  const { Fp, Fn } = _createCurveFields(\"weierstrass\", CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(curveOpts, {}, {\n    allowInfinityPoint: \"boolean\",\n    clearCofactor: \"function\",\n    isTorsionFree: \"function\",\n    fromBytes: \"function\",\n    toBytes: \"function\",\n    endo: \"object\",\n    wrapPrivateKey: \"boolean\"\n  });\n  const { endo } = curveOpts;\n  if (endo) {\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== \"bigint\" || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd)\n      throw new Error(\"compression is not supported: Field does not have .isOdd()\");\n  }\n  function pointToBytes(_c, point, isCompressed) {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool(\"isCompressed\", isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(4), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1;\n    const LU = 2 * L + 1;\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    if (length === LC && (head === 2 || head === 3)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x))\n        throw new Error(\"bad point: is not on curve, wrong x\");\n      const y2 = weierstrassEquation(x);\n      let y;\n      try {\n        y = Fp.sqrt(y2);\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? \": \" + sqrtError.message : \"\";\n        throw new Error(\"bad point: is not on curve, sqrt error\" + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd(y);\n      const isHeadOdd = (head & 1) === 1;\n      if (isHeadOdd !== isYOdd)\n        y = Fp.neg(y);\n      return { x, y };\n    } else if (length === LU && head === 4) {\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y))\n        throw new Error(\"bad point: is not on curve\");\n      return { x, y };\n    } else {\n      throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n    }\n  }\n  const toBytes2 = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n  function isValidXY(x, y) {\n    const left = Fp.sqr(y);\n    const right = weierstrassEquation(x);\n    return Fp.eql(left, right);\n  }\n  if (!isValidXY(CURVE.Gx, CURVE.Gy))\n    throw new Error(\"bad curve params: generator point\");\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2)))\n    throw new Error(\"bad curve params: a or b\");\n  function acoord(title, n, banZero = false) {\n    if (!Fp.isValid(n) || banZero && Fp.is0(n))\n      throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n  function aprjpoint(other) {\n    if (!(other instanceof Point))\n      throw new Error(\"ProjectivePoint expected\");\n  }\n  function splitEndoScalarN(k) {\n    if (!endo || !endo.basises)\n      throw new Error(\"no endo\");\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n  const toAffineMemo = memoized((p, iz) => {\n    const { X, Y, Z } = p;\n    if (Fp.eql(Z, Fp.ONE))\n      return { x: X, y: Y };\n    const is0 = p.is0();\n    if (iz == null)\n      iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0)\n      return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE))\n      throw new Error(\"invZ was invalid\");\n    return { x, y };\n  });\n  const assertValidMemo = memoized((p) => {\n    if (p.is0()) {\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.Y))\n        return;\n      throw new Error(\"bad point: ZERO\");\n    }\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y))\n      throw new Error(\"bad point: x or y not field elements\");\n    if (!isValidXY(x, y))\n      throw new Error(\"bad point: equation left != right\");\n    if (!p.isTorsionFree())\n      throw new Error(\"bad point: not in prime-order subgroup\");\n    return true;\n  });\n  function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n  class Point {\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X, Y, Z) {\n      this.X = acoord(\"x\", X);\n      this.Y = acoord(\"y\", Y, true);\n      this.Z = acoord(\"z\", Z);\n      Object.freeze(this);\n    }\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p) {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n        throw new Error(\"invalid affine point\");\n      if (p instanceof Point)\n        throw new Error(\"projective point not allowed\");\n      if (Fp.is0(x) && Fp.is0(y))\n        return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    // TODO: remove\n    get px() {\n      return this.X;\n    }\n    get py() {\n      return this.X;\n    }\n    get pz() {\n      return this.Z;\n    }\n    static normalizeZ(points) {\n      return normalizeZ(Point, points);\n    }\n    static fromBytes(bytes) {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes(ensureBytes(\"pointHex\", hex)));\n      P.assertValidity();\n      return P;\n    }\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n    // TODO: remove\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize) {\n      this.precompute(windowSize);\n    }\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize = 8, isLazy = true) {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy)\n        this.multiply(_3n);\n      return this;\n    }\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    hasEvenY() {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd)\n        throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n    /** Compare one point to another. */\n    equals(other) {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate() {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;\n      let t0 = Fp.mul(X1, X1);\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3);\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3);\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3);\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0);\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1);\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3);\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2);\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2);\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2);\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2);\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2);\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0);\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4);\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0);\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      const { endo: endo2 } = curveOpts;\n      if (!Fn.isValidNot0(scalar))\n        throw new Error(\"invalid scalar: out of range\");\n      let point, fake;\n      const mul = (n) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      if (endo2) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo2.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      return normalizeZ(Point, [point, fake])[0];\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc) {\n      const { endo: endo2 } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc))\n        throw new Error(\"invalid scalar: out of range\");\n      if (sc === _0n || p.is0())\n        return Point.ZERO;\n      if (sc === _1n)\n        return p;\n      if (wnaf.hasCache(this))\n        return this.multiply(sc);\n      if (endo2) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n        return finishEndo(endo2.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? void 0 : sum;\n    }\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ) {\n      return toAffineMemo(this, invertedZ);\n    }\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree() {\n      const { isTorsionFree } = curveOpts;\n      if (cofactor === _1n)\n        return true;\n      if (isTorsionFree)\n        return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n    clearCofactor() {\n      const { clearCofactor } = curveOpts;\n      if (cofactor === _1n)\n        return this;\n      if (clearCofactor)\n        return clearCofactor(Point, this);\n      return this.multiplyUnsafe(cofactor);\n    }\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    toBytes(isCompressed = true) {\n      abool(\"isCompressed\", isCompressed);\n      this.assertValidity();\n      return toBytes2(Point, this, isCompressed);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true) {\n      return this.toBytes(isCompressed);\n    }\n    toHex(isCompressed = true) {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n    toString() {\n      return `<Point ${this.is0() ? \"ZERO\" : this.toHex()}>`;\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  Point.Fp = Fp;\n  Point.Fn = Fn;\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\nfunction pprefix(hasEvenY) {\n  return Uint8Array.of(hasEvenY ? 2 : 3);\n}\nfunction ecdsa(Point, hash, ecdsaOpts = {}) {\n  ahash(hash);\n  _validateObject(ecdsaOpts, {}, {\n    hmac: \"function\",\n    lowS: \"boolean\",\n    randomBytes: \"function\",\n    bits2int: \"function\",\n    bits2int_modN: \"function\"\n  });\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_ = ecdsaOpts.hmac || ((key, ...msgs) => hmac(hash, key, concatBytes(...msgs)));\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n  const seedLen = getMinHashLength(CURVE_ORDER);\n  const lengths = {\n    secret: Fn.BYTES,\n    public: 1 + Fp.BYTES,\n    publicUncompressed: 1 + 2 * Fp.BYTES,\n    signature: 2 * Fn.BYTES,\n    seed: seedLen\n  };\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title, num) {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n  class Signature {\n    constructor(r, s, recovery) {\n      aValidRS(\"r\", r);\n      aValidRS(\"s\", s);\n      this.r = r;\n      this.s = s;\n      if (recovery != null)\n        this.recovery = recovery;\n      Object.freeze(this);\n    }\n    static fromBytes(bytes, format = \"compact\") {\n      if (format === \"compact\") {\n        const L = Fn.BYTES;\n        abytes(bytes, L * 2);\n        const r = bytes.subarray(0, L);\n        const s = bytes.subarray(L, L * 2);\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s));\n      }\n      if (format === \"der\") {\n        abytes(bytes);\n        const { r, s } = DER.toSig(bytes);\n        return new Signature(r, s);\n      }\n      throw new Error(\"invalid format\");\n    }\n    static fromHex(hex, format) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash) {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec))\n        throw new Error(\"recovery id invalid\");\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1)\n        throw new Error(\"recovery id is ambiguous for h>1 curve\");\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj))\n        throw new Error(\"recovery id 2 or 3 invalid\");\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj);\n      const h = bits2int_modN(ensureBytes(\"msgHash\", msgHash));\n      const u1 = Fn.create(-h * ir);\n      const u2 = Fn.create(s * ir);\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0())\n        throw new Error(\"point at infinify\");\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toBytes(format = \"compact\") {\n      if (format === \"compact\")\n        return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === \"der\")\n        return hexToBytes(DER.hexFromSig(this));\n      throw new Error(\"invalid format\");\n    }\n    toHex(format) {\n      return bytesToHex(this.toBytes(format));\n    }\n    // TODO: remove\n    assertValidity() {\n    }\n    static fromCompact(hex) {\n      return Signature.fromBytes(ensureBytes(\"sig\", hex), \"compact\");\n    }\n    static fromDER(hex) {\n      return Signature.fromBytes(ensureBytes(\"sig\", hex), \"der\");\n    }\n    toDERRawBytes() {\n      return this.toBytes(\"der\");\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes(\"der\"));\n    }\n    toCompactRawBytes() {\n      return this.toBytes(\"compact\");\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes(\"compact\"));\n    }\n  }\n  function isValidSecretKey(privateKey) {\n    try {\n      return !!_normFnElement(Fn, privateKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  function isValidPublicKey(publicKey, isCompressed) {\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== lengths.public)\n        return false;\n      if (isCompressed === false && l !== lengths.publicUncompressed)\n        return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n  function randomSecretKey(seed = randomBytes_(seedLen)) {\n    return mapHashToField(seed, CURVE_ORDER);\n  }\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: (key) => _normFnElement(Fn, key),\n    precompute(windowSize = 8, point = Point.BASE) {\n      return point.precompute(windowSize, false);\n    }\n  };\n  function getPublicKey(secretKey, isCompressed = true) {\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n  function isProbPub(item) {\n    if (typeof item === \"bigint\")\n      return false;\n    if (item instanceof Point)\n      return true;\n    if (Fn.allowedLengths || lengths.secret === lengths.public)\n      return void 0;\n    const l = ensureBytes(\"key\", item).length;\n    return l === lengths.public || l === lengths.publicUncompressed;\n  }\n  function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {\n    if (isProbPub(secretKeyA) === true)\n      throw new Error(\"first arg must be private key\");\n    if (isProbPub(publicKeyB) === false)\n      throw new Error(\"second arg must be public key\");\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB);\n    return b.multiply(s).toBytes(isCompressed);\n  }\n  const bits2int = ecdsaOpts.bits2int || function(bytes) {\n    if (bytes.length > 8192)\n      throw new Error(\"input is too large\");\n    const num = bytesToNumberBE(bytes);\n    const delta = bytes.length * 8 - fnBits;\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = ecdsaOpts.bits2int_modN || function(bytes) {\n    return Fn.create(bits2int(bytes));\n  };\n  const ORDER_MASK = bitMask(fnBits);\n  function int2octets(num) {\n    aInRange(\"num < 2^\" + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n    if ([\"recovered\", \"canonical\"].some((k) => k in opts))\n      throw new Error(\"sign() legacy options not supported\");\n    let { lowS, prehash, extraEntropy: ent } = opts;\n    if (lowS == null)\n      lowS = true;\n    msgHash = ensureBytes(\"msgHash\", msgHash);\n    validateSigVerOpts(opts);\n    if (prehash)\n      msgHash = ensureBytes(\"prehashed msgHash\", hash(msgHash));\n    const h1int = bits2int_modN(msgHash);\n    const d = _normFnElement(Fn, privateKey);\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    if (ent != null && ent !== false) {\n      const e = ent === true ? randomBytes_(lengths.secret) : ent;\n      seedArgs.push(ensureBytes(\"extraEntropy\", e));\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = h1int;\n    function k2sig(kBytes) {\n      const k = bits2int(kBytes);\n      if (!Fn.isValidNot0(k))\n        return;\n      const ik = Fn.inv(k);\n      const q = Point.BASE.multiply(k).toAffine();\n      const r = Fn.create(q.x);\n      if (r === _0n)\n        return;\n      const s = Fn.create(ik * Fn.create(m + r * d));\n      if (s === _0n)\n        return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s);\n        recovery ^= 1;\n      }\n      return new Signature(r, normS, recovery);\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  function sign(msgHash, secretKey, opts = defaultSigOpts) {\n    const { seed, k2sig } = prepSig(msgHash, secretKey, opts);\n    const drbg = createHmacDrbg(hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig);\n  }\n  Point.BASE.precompute(8);\n  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n    const sg = signature;\n    msgHash = ensureBytes(\"msgHash\", msgHash);\n    publicKey = ensureBytes(\"publicKey\", publicKey);\n    validateSigVerOpts(opts);\n    const { lowS, prehash, format } = opts;\n    if (\"strict\" in opts)\n      throw new Error(\"options.strict was renamed to lowS\");\n    let _sig = void 0;\n    let P;\n    if (format === void 0) {\n      const isHex = typeof sg === \"string\" || isBytes(sg);\n      const isObj = !isHex && sg !== null && typeof sg === \"object\" && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\";\n      if (!isHex && !isObj)\n        throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\n      if (isObj) {\n        _sig = new Signature(sg.r, sg.s);\n      } else if (isHex) {\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err))\n            throw derError;\n        }\n        if (!_sig) {\n          try {\n            _sig = Signature.fromCompact(sg);\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (format === \"compact\" || format === \"der\") {\n        if (typeof sg !== \"string\" && !isBytes(sg))\n          throw new Error('\"der\" / \"compact\" format expects Uint8Array signature');\n        _sig = Signature.fromBytes(ensureBytes(\"sig\", sg), format);\n      } else if (format === \"js\") {\n        if (!(sg instanceof Signature))\n          throw new Error('\"js\" format expects Signature instance');\n        _sig = sg;\n      } else {\n        throw new Error('format must be \"compact\", \"der\" or \"js\"');\n      }\n    }\n    if (!_sig)\n      return false;\n    try {\n      P = Point.fromHex(publicKey);\n      if (lowS && _sig.hasHighS())\n        return false;\n      if (prehash)\n        msgHash = hash(msgHash);\n      const { r, s } = _sig;\n      const h = bits2int_modN(msgHash);\n      const is = Fn.inv(s);\n      const u1 = Fn.create(h * is);\n      const u2 = Fn.create(r * is);\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n      if (R.is0())\n        return false;\n      const v = Fn.create(R.x);\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n  function keygen(seed) {\n    const secretKey = utils.randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    getSharedSecret,\n    utils,\n    Point,\n    Signature,\n    info: { type: \"weierstrass\", lengths, publicKeyHasPrefix: true }\n  });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n  const CURVE = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2)))) : void 0;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths,\n    modOnDecode: c.wrapPrivateKey\n  });\n  const curveOpts = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN\n  };\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa2) {\n  return Object.assign({}, ecdsa2, {\n    ProjectivePoint: ecdsa2.Point,\n    CURVE: c\n  });\n}\nfunction weierstrass(c) {\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction createCurve(curveDef, defHash) {\n  const create = (hash) => weierstrass({ ...curveDef, hash });\n  return { ...create(defHash), create };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst p256_CURVE = {\n  p: BigInt(\"0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff\"),\n  n: BigInt(\"0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\"),\n  h: BigInt(1),\n  a: BigInt(\"0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc\"),\n  b: BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\"),\n  Gx: BigInt(\"0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\"),\n  Gy: BigInt(\"0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\")\n};\nconst p384_CURVE = {\n  p: BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff\"),\n  n: BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973\"),\n  h: BigInt(1),\n  a: BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc\"),\n  b: BigInt(\"0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\"),\n  Gx: BigInt(\"0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\"),\n  Gy: BigInt(\"0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\")\n};\nconst p521_CURVE = {\n  p: BigInt(\"0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"),\n  n: BigInt(\"0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409\"),\n  h: BigInt(1),\n  a: BigInt(\"0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\"),\n  b: BigInt(\"0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00\"),\n  Gx: BigInt(\"0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66\"),\n  Gy: BigInt(\"0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\")\n};\nconst Fp256 = Field(p256_CURVE.p);\nconst Fp384 = Field(p384_CURVE.p);\nconst Fp521 = Field(p521_CURVE.p);\nconst p256$1 = createCurve({ ...p256_CURVE, Fp: Fp256, lowS: false }, sha256);\ncreateCurve({ ...p384_CURVE, Fp: Fp384, lowS: false }, sha384);\ncreateCurve({ ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, sha512);\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst p256 = p256$1;\nfunction promisifyRequest(request) {\n  return new Promise((resolve, reject) => {\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\nfunction createStore(dbName, storeName) {\n  let dbp;\n  const getDB = () => {\n    if (dbp)\n      return dbp;\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    dbp = promisifyRequest(request);\n    dbp.then((db) => {\n      db.onclose = () => dbp = void 0;\n    }, () => {\n    });\n    return dbp;\n  };\n  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n  if (!defaultGetStoreFunc) {\n    defaultGetStoreFunc = createStore(\"keyval-store\", \"keyval\");\n  }\n  return defaultGetStoreFunc;\n}\nfunction get(key, customStore = defaultGetStore()) {\n  return customStore(\"readonly\", (store) => promisifyRequest(store.get(key)));\n}\nfunction set(key, value, customStore = defaultGetStore()) {\n  return customStore(\"readwrite\", (store) => {\n    store.put(value, key);\n    return promisifyRequest(store.transaction);\n  });\n}\nfunction del(key, customStore = defaultGetStore()) {\n  return customStore(\"readwrite\", (store) => {\n    store.delete(key);\n    return promisifyRequest(store.transaction);\n  });\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof document !== \"undefined\";\nlet _subtle;\nfunction getSubtle() {\n  if (_subtle) return _subtle;\n  if (isBrowser && window.crypto?.subtle) {\n    _subtle = window.crypto.subtle;\n  } else if (typeof globalThis !== \"undefined\" && globalThis.crypto?.subtle) {\n    _subtle = globalThis.crypto.subtle;\n  } else {\n    if (typeof require !== \"undefined\") {\n      try {\n        const { webcrypto } = require(\"crypto\");\n        _subtle = webcrypto.subtle;\n      } catch (e) {\n        throw new Error(\"WebCrypto not available in this environment\");\n      }\n    } else {\n      throw new Error(\"WebCrypto not available - ensure you are using Node.js 16+ or a modern browser\");\n    }\n  }\n  return _subtle;\n}\nfunction getRandomValues(array) {\n  if (isBrowser && window.crypto) {\n    return window.crypto.getRandomValues(array);\n  } else if (typeof globalThis !== \"undefined\" && globalThis.crypto) {\n    return globalThis.crypto.getRandomValues(array);\n  } else {\n    if (typeof require !== \"undefined\") {\n      try {\n        const { webcrypto } = require(\"crypto\");\n        return webcrypto.getRandomValues(array);\n      } catch (e) {\n        throw new Error(\"Crypto random values not available in this environment\");\n      }\n    } else {\n      throw new Error(\"Crypto random values not available - ensure you are using Node.js 16+ or a modern browser\");\n    }\n  }\n}\nconst TEXT_ENCODER = new TextEncoder();\nconst TEXT_DECODER = new TextDecoder();\nfunction normalize(s) {\n  if (typeof s !== \"string\") {\n    throw new Error(\"Input must be a string\");\n  }\n  return s.normalize(\"NFC\").trim();\n}\nfunction validatePrivateKey(privB64) {\n  if (typeof privB64 !== \"string\") {\n    throw new Error(\"Private key must be a string\");\n  }\n  try {\n    const key = b64UrlToBuf(privB64);\n    if (key.length !== 32) {\n      throw new Error(\"Invalid private key length for P-256 (expected 32 bytes)\");\n    }\n    return key;\n  } catch (error) {\n    throw new Error(`Invalid private key format: ${error.message}`);\n  }\n}\nfunction validatePublicKey(pubJwk) {\n  if (typeof pubJwk !== \"string\") {\n    throw new Error(\"Public key must be a string\");\n  }\n  if (!pubJwk.includes(\".\")) {\n    throw new Error(\"Public key must be in JWK format (x.y)\");\n  }\n  try {\n    const [x, y] = pubJwk.split(\".\");\n    if (!x || !y) {\n      throw new Error(\"Invalid JWK format: missing x or y component\");\n    }\n    const xBuf = b64UrlToBuf(x);\n    const yBuf = b64UrlToBuf(y);\n    if (xBuf.length !== 32 || yBuf.length !== 32) {\n      throw new Error(\"Invalid public key coordinates length for P-256\");\n    }\n    return { x: xBuf, y: yBuf };\n  } catch (error) {\n    throw new Error(`Invalid public key format: ${error.message}`);\n  }\n}\nfunction constantTimeEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result |= a[i] ^ b[i];\n  }\n  return result === 0;\n}\nfunction bufToB64Url(buf) {\n  const bin = String.fromCharCode(...new Uint8Array(buf));\n  return btoa(bin).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction b64UrlToBuf(b64url) {\n  const b64 = b64url.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"===\".slice((b64url.length + 3) % 4);\n  const bin = atob(b64);\n  return Uint8Array.from(bin, (c) => c.charCodeAt(0));\n}\nfunction keyToJWK(pubBuf) {\n  if (pubBuf[0] !== 4) throw new Error(\"Expected uncompressed key\");\n  const x = pubBuf.slice(1, 33);\n  const y = pubBuf.slice(33, 65);\n  return `${bufToB64Url(x)}.${bufToB64Url(y)}`;\n}\nfunction jwkToKey(jwk) {\n  const [x, y] = jwk.split(\".\");\n  return new Uint8Array([4, ...b64UrlToBuf(x), ...b64UrlToBuf(y)]);\n}\nasync function generateRandomPair() {\n  const signingPriv = p256.utils.randomPrivateKey();\n  const encryptionPriv = p256.utils.randomPrivateKey();\n  const pub = p256.getPublicKey(signingPriv, false);\n  const epub = p256.getPublicKey(encryptionPriv, false);\n  return {\n    pub: keyToJWK(pub),\n    priv: bufToB64Url(signingPriv),\n    epub: keyToJWK(epub),\n    epriv: bufToB64Url(encryptionPriv)\n  };\n}\nasync function signMessage(msg, privB64) {\n  const subtle = getSubtle();\n  const msgBuf = TEXT_ENCODER.encode(normalize(msg));\n  const hash = await subtle.digest(\"SHA-256\", msgBuf);\n  const priv = validatePrivateKey(privB64);\n  const sig = p256.sign(new Uint8Array(hash), priv);\n  return bufToB64Url(sig.toCompactRawBytes());\n}\nasync function verifyMessage(msg, sigB64, pubJwk) {\n  if (typeof sigB64 !== \"string\") {\n    throw new Error(\"Signature must be a string\");\n  }\n  const subtle = getSubtle();\n  const msgBuf = TEXT_ENCODER.encode(normalize(msg));\n  const hash = await subtle.digest(\"SHA-256\", msgBuf);\n  validatePublicKey(pubJwk);\n  const pub = jwkToKey(pubJwk);\n  try {\n    const sig = b64UrlToBuf(sigB64);\n    return p256.verify(sig, new Uint8Array(hash), pub);\n  } catch (error) {\n    return false;\n  }\n}\nasync function encryptMessageWithMeta(msg, recipient) {\n  if (!recipient || typeof recipient !== \"object\") {\n    throw new Error(\"Recipient must be a key object with epub property\");\n  }\n  if (!recipient.epub) {\n    throw new Error(\"Recipient must have an encryption public key (epub)\");\n  }\n  const subtle = getSubtle();\n  validatePublicKey(recipient.epub);\n  const pub = jwkToKey(recipient.epub);\n  const ephPriv = p256.utils.randomPrivateKey();\n  const ephPub = p256.getPublicKey(ephPriv, false);\n  const shared = p256.getSharedSecret(ephPriv, pub).slice(1);\n  const keyMat = await subtle.digest(\"SHA-256\", shared);\n  const iv = getRandomValues(new Uint8Array(12));\n  const key = await subtle.importKey(\"raw\", keyMat, { name: \"AES-GCM\" }, false, [\"encrypt\"]);\n  const msgBuf = TEXT_ENCODER.encode(normalize(msg));\n  const ct = await subtle.encrypt({ name: \"AES-GCM\", iv }, key, msgBuf);\n  return {\n    ciphertext: bufToB64Url(ct),\n    iv: bufToB64Url(iv),\n    sender: keyToJWK(ephPub),\n    timestamp: Date.now()\n  };\n}\nasync function decryptMessageWithMeta(payload, privB64) {\n  if (!payload || typeof payload !== \"object\") {\n    throw new Error(\"Payload must be an encrypted message object\");\n  }\n  if (!payload.ciphertext || !payload.iv || !payload.sender) {\n    throw new Error(\"Payload must contain ciphertext, iv, and sender\");\n  }\n  const subtle = getSubtle();\n  validatePublicKey(payload.sender);\n  const ephPub = jwkToKey(payload.sender);\n  const priv = validatePrivateKey(privB64);\n  const shared = p256.getSharedSecret(priv, ephPub).slice(1);\n  const keyMat = await subtle.digest(\"SHA-256\", shared);\n  const key = await subtle.importKey(\"raw\", keyMat, { name: \"AES-GCM\" }, false, [\"decrypt\"]);\n  try {\n    const iv = b64UrlToBuf(payload.iv);\n    const ct = b64UrlToBuf(payload.ciphertext);\n    const pt = await subtle.decrypt({ name: \"AES-GCM\", iv }, key, ct);\n    return TEXT_DECODER.decode(pt);\n  } catch (error) {\n    throw new Error(`Decryption failed: ${error.message}`);\n  }\n}\nasync function exportToJWK(privB64) {\n  const priv = b64UrlToBuf(privB64);\n  if (priv.length !== 32) {\n    throw new Error(\"Invalid private key length for P-256\");\n  }\n  return {\n    kty: \"EC\",\n    crv: \"P-256\",\n    d: bufToB64Url(priv),\n    use: \"sig\",\n    key_ops: [\"sign\"]\n  };\n}\nasync function importFromJWK(jwk) {\n  if (jwk.kty !== \"EC\") {\n    throw new Error(\"JWK must be an EC key\");\n  }\n  if (jwk.crv !== \"P-256\") {\n    throw new Error(\"JWK must use P-256 curve\");\n  }\n  if (!jwk.d) {\n    throw new Error(\"JWK must contain private key component (d)\");\n  }\n  return jwk.d;\n}\nasync function exportToPEM(privB64) {\n  const raw = b64UrlToBuf(privB64);\n  if (raw.length !== 32) {\n    throw new Error(\"Invalid private key length for P-256\");\n  }\n  const pkcs8Header = new Uint8Array([\n    48,\n    129,\n    135,\n    // SEQUENCE (135 bytes)\n    2,\n    1,\n    0,\n    // INTEGER version (0)\n    48,\n    19,\n    // SEQUENCE AlgorithmIdentifier\n    6,\n    7,\n    42,\n    134,\n    72,\n    206,\n    61,\n    2,\n    1,\n    // OID ecPublicKey\n    6,\n    8,\n    42,\n    134,\n    72,\n    206,\n    61,\n    3,\n    1,\n    7,\n    // OID secp256r1\n    4,\n    109,\n    // OCTET STRING (109 bytes)\n    48,\n    107,\n    // SEQUENCE ECPrivateKey\n    2,\n    1,\n    1,\n    // INTEGER version (1)\n    4,\n    32\n    // OCTET STRING privateKey (32 bytes)\n  ]);\n  const pkcs8Suffix = new Uint8Array([\n    161,\n    68,\n    3,\n    66,\n    0,\n    4\n    // publicKey context tag + BIT STRING + uncompressed point indicator\n  ]);\n  const pubKey = p256.getPublicKey(raw, false);\n  const pkcs8Data = new Uint8Array(pkcs8Header.length + raw.length + pkcs8Suffix.length + pubKey.length);\n  pkcs8Data.set(pkcs8Header, 0);\n  pkcs8Data.set(raw, pkcs8Header.length);\n  pkcs8Data.set(pkcs8Suffix, pkcs8Header.length + raw.length);\n  pkcs8Data.set(pubKey, pkcs8Header.length + raw.length + pkcs8Suffix.length);\n  const b64 = btoa(String.fromCharCode(...pkcs8Data));\n  return `-----BEGIN PRIVATE KEY-----\n${b64.match(/.{1,64}/g).join(\"\\n\")}\n-----END PRIVATE KEY-----`;\n}\nasync function importFromPEM(pem) {\n  if (!pem.includes(\"-----BEGIN PRIVATE KEY-----\")) {\n    throw new Error(\"Invalid PEM format: must contain BEGIN PRIVATE KEY header\");\n  }\n  const b64 = pem.replace(/-----.*?-----/g, \"\").replace(/\\s+/g, \"\");\n  if (!b64) {\n    throw new Error(\"Invalid PEM format: no data found\");\n  }\n  try {\n    const bin = atob(b64);\n    const data = Uint8Array.from([...bin].map((c) => c.charCodeAt(0)));\n    for (let i = 0; i < data.length - 34; i++) {\n      if (data[i] === 4 && data[i + 1] === 32) {\n        const privateKey = data.slice(i + 2, i + 34);\n        if (privateKey.length === 32) {\n          return bufToB64Url(privateKey);\n        }\n      }\n    }\n    throw new Error(\"Could not extract private key from PKCS#8 structure\");\n  } catch (error) {\n    throw new Error(`Failed to parse PEM: ${error.message}`);\n  }\n}\nasync function deriveStorageKey(password, salt) {\n  const subtle = getSubtle();\n  const encoder = new TextEncoder();\n  const keyMaterial = await subtle.importKey(\n    \"raw\",\n    encoder.encode(password),\n    { name: \"PBKDF2\" },\n    false,\n    [\"deriveKey\"]\n  );\n  return subtle.deriveKey(\n    {\n      name: \"PBKDF2\",\n      salt,\n      iterations: 1e5,\n      hash: \"SHA-256\"\n    },\n    keyMaterial,\n    { name: \"AES-GCM\", length: 256 },\n    false,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\nasync function saveKeys(name, keys, password = null) {\n  if (!password) {\n    console.warn(\"\u26A0\uFE0F WARNING: Keys are being stored unencrypted. Consider providing a password for better security.\");\n    return set(name, { encrypted: false, data: keys });\n  }\n  try {\n    const subtle = getSubtle();\n    const salt = getRandomValues(new Uint8Array(16));\n    const iv = getRandomValues(new Uint8Array(12));\n    const storageKey = await deriveStorageKey(password, salt);\n    const keyData = TEXT_ENCODER.encode(JSON.stringify(keys));\n    const encryptedData = await subtle.encrypt({ name: \"AES-GCM\", iv }, storageKey, keyData);\n    return set(name, {\n      encrypted: true,\n      salt: bufToB64Url(salt),\n      iv: bufToB64Url(iv),\n      data: bufToB64Url(encryptedData)\n    });\n  } catch (error) {\n    throw new Error(`Failed to encrypt and save keys: ${error.message}`);\n  }\n}\nasync function loadKeys(name, password = null) {\n  const stored = await get(name);\n  if (!stored) {\n    return void 0;\n  }\n  if (!stored.encrypted) {\n    return stored.data;\n  }\n  if (!password) {\n    throw new Error(\"Password required to decrypt stored keys\");\n  }\n  try {\n    const subtle = getSubtle();\n    const salt = b64UrlToBuf(stored.salt);\n    const iv = b64UrlToBuf(stored.iv);\n    const encryptedData = b64UrlToBuf(stored.data);\n    const storageKey = await deriveStorageKey(password, salt);\n    const decryptedData = await subtle.decrypt({ name: \"AES-GCM\", iv }, storageKey, encryptedData);\n    const keyData = TEXT_DECODER.decode(decryptedData);\n    return JSON.parse(keyData);\n  } catch (error) {\n    throw new Error(`Failed to decrypt keys: ${error.message}`);\n  }\n}\nasync function clearKeys(name) {\n  return del(name);\n}\nasync function generateWork(data, difficulty = 4, maxIterations = 1e6) {\n  const subtle = getSubtle();\n  const target = \"0\".repeat(difficulty);\n  const dataStr = typeof data === \"string\" ? data : JSON.stringify(data);\n  let nonce = 0;\n  let hash;\n  let hashHex;\n  const startTime = Date.now();\n  while (nonce < maxIterations) {\n    const payload = `${dataStr}:${nonce}`;\n    const payloadBuf = TEXT_ENCODER.encode(payload);\n    const hashBuf = await subtle.digest(\"SHA-256\", payloadBuf);\n    const hashArray = new Uint8Array(hashBuf);\n    hashHex = Array.from(hashArray).map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n    if (hashHex.startsWith(target)) {\n      hash = bufToB64Url(hashBuf);\n      break;\n    }\n    nonce++;\n  }\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  if (nonce >= maxIterations) {\n    throw new Error(`Failed to find proof of work within ${maxIterations} iterations`);\n  }\n  return {\n    data: dataStr,\n    nonce,\n    hash,\n    hashHex,\n    difficulty,\n    timestamp: endTime,\n    duration,\n    hashRate: Math.round(nonce / (duration / 1e3))\n  };\n}\nasync function verifyWork(proof) {\n  if (!proof || typeof proof !== \"object\") {\n    throw new Error(\"Proof must be an object\");\n  }\n  if (typeof proof.data !== \"string\" || typeof proof.nonce !== \"number\" || typeof proof.difficulty !== \"number\" || !proof.hash || !proof.hashHex) {\n    throw new Error(\"Proof must contain data, nonce, difficulty, hash, and hashHex\");\n  }\n  const subtle = getSubtle();\n  const target = \"0\".repeat(proof.difficulty);\n  const payload = `${proof.data}:${proof.nonce}`;\n  const payloadBuf = TEXT_ENCODER.encode(payload);\n  const hashBuf = await subtle.digest(\"SHA-256\", payloadBuf);\n  const hashArray = new Uint8Array(hashBuf);\n  const hashHex = Array.from(hashArray).map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  const hashB64 = bufToB64Url(hashBuf);\n  const expectedHashB64 = TEXT_ENCODER.encode(proof.hash);\n  const computedHashB64 = TEXT_ENCODER.encode(hashB64);\n  const expectedHashHex = TEXT_ENCODER.encode(proof.hashHex);\n  const computedHashHex = TEXT_ENCODER.encode(hashHex);\n  const validHashB64 = constantTimeEqual(expectedHashB64, computedHashB64);\n  const validHashHex = constantTimeEqual(expectedHashHex, computedHashHex);\n  const validHash = validHashB64 && validHashHex;\n  const validDifficulty = hashHex.startsWith(target);\n  return {\n    valid: validHash && validDifficulty,\n    hashMatches: validHash,\n    difficultyMatches: validDifficulty,\n    computedHash: hashB64,\n    computedHashHex: hashHex,\n    expectedDifficulty: target\n  };\n}\nasync function generateSignedWork(data, privKey, difficulty = 4, maxIterations = 1e6) {\n  const work = await generateWork(data, difficulty, maxIterations);\n  const workPayload = JSON.stringify({\n    data: work.data,\n    nonce: work.nonce,\n    hash: work.hash,\n    difficulty: work.difficulty,\n    timestamp: work.timestamp\n  });\n  const signature = await signMessage(workPayload, privKey);\n  return {\n    ...work,\n    signature,\n    signedPayload: workPayload\n  };\n}\nasync function verifySignedWork(signedWork, pubKey) {\n  const workVerification = await verifyWork(signedWork);\n  if (!workVerification.valid) {\n    return {\n      valid: false,\n      workValid: false,\n      signatureValid: false,\n      reason: \"Invalid proof of work\"\n    };\n  }\n  const signatureValid = await verifyMessage(\n    signedWork.signedPayload,\n    signedWork.signature,\n    pubKey\n  );\n  return {\n    valid: workVerification.valid && signatureValid,\n    workValid: workVerification.valid,\n    signatureValid,\n    workVerification\n  };\n}\nconst SECURITY_CONFIG = {\n  PBKDF2_ITERATIONS: 1e5,\n  AES_KEY_LENGTH: 256,\n  CURVE: \"P-256\",\n  HASH_ALGORITHM: \"SHA-256\",\n  SUPPORTED_FORMATS: [\"JWK\", \"PEM\"],\n  MIN_POW_DIFFICULTY: 1,\n  MAX_POW_DIFFICULTY: 8\n};\nfunction getSecurityInfo() {\n  return {\n    version: \"1.1.2\",\n    securityEnhancements: [\n      \"Bundled dependencies with static imports\",\n      \"Proper PKCS#8 PEM encoding/decoding\",\n      \"Encrypted key storage with PBKDF2\",\n      \"Input validation and sanitization\",\n      \"Constant-time comparisons\",\n      \"Enhanced error handling\",\n      \"Multiple output formats for compatibility\"\n    ],\n    algorithms: {\n      signing: \"ECDSA with P-256 and SHA-256\",\n      encryption: \"ECDH + AES-GCM\",\n      keyDerivation: \"PBKDF2 with SHA-256\",\n      proofOfWork: \"SHA-256 based mining\"\n    },\n    warnings: [\n      \"Keys stored without password are unencrypted\",\n      \"PEM format uses simplified PKCS#8 structure\",\n      \"Proof of work verification uses constant-time comparison for hashes only\",\n      \"Dependencies are bundled at build time - verify bundle integrity\"\n    ]\n  };\n}\nexport {\n  SECURITY_CONFIG,\n  clearKeys,\n  decryptMessageWithMeta,\n  encryptMessageWithMeta,\n  exportToJWK,\n  exportToPEM,\n  generateRandomPair,\n  generateSignedWork,\n  generateWork,\n  getSecurityInfo,\n  importFromJWK,\n  importFromPEM,\n  loadKeys,\n  saveKeys,\n  signMessage,\n  verifyMessage,\n  verifySignedWork,\n  verifyWork\n};\n", "'use strict';\n\nexports.MediaStream = window.MediaStream;\nexports.MediaStreamTrack = window.MediaStreamTrack;\nexports.RTCDataChannel = window.RTCDataChannel;\nexports.RTCDataChannelEvent = window.RTCDataChannelEvent;\nexports.RTCDtlsTransport = window.RTCDtlsTransport;\nexports.RTCIceCandidate = window.RTCIceCandidate;\nexports.RTCIceTransport = window.RTCIceTransport;\nexports.RTCPeerConnection = window.RTCPeerConnection;\nexports.RTCPeerConnectionIceEvent = window.RTCPeerConnectionIceEvent;\nexports.RTCRtpReceiver = window.RTCRtpReceiver;\nexports.RTCRtpSender = window.RTCRtpSender;\nexports.RTCRtpTransceiver = window.RTCRtpTransceiver;\nexports.RTCSctpTransport = window.RTCSctpTransport;\nexports.RTCSessionDescription = window.RTCSessionDescription;\nexports.getUserMedia = window.getUserMedia;\nexports.mediaDevices = navigator.mediaDevices;\n", "'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n", "// Browser entry point that bundles UnSEA crypto library\n// This file is used by esbuild to create a self-contained browser bundle\n\n// Import UnSEA directly from node_modules (esbuild will bundle it)\nimport * as UnSEA from 'unsea';\n\n// Import only browser-compatible components\nexport { PeerPigeonMesh } from '../src/PeerPigeonMesh.js';\nexport { PeerConnection } from '../src/PeerConnection.js';\nexport { SignalingClient } from '../src/SignalingClient.js';\nexport { WebDHT } from '../src/WebDHT.js';\nexport { DistributedStorageManager } from '../src/DistributedStorageManager.js';\n\n// Export debug logger for controlling console output\nexport { default as DebugLogger } from '../src/DebugLogger.js';\n\n// Export environment detection utilities\nexport {\n  EnvironmentDetector,\n  environmentDetector,\n  isBrowser,\n  isNodeJS,\n  isWorker,\n  hasWebRTC,\n  hasWebSocket,\n  getEnvironmentReport\n} from '../src/EnvironmentDetector.js';\n\n// Make UnSEA available globally for the existing dynamic import logic\n// This allows the CryptoManager to detect and use the bundled version\nif (typeof globalThis !== 'undefined') {\n  globalThis.__PEERPIGEON_UNSEA__ = UnSEA;\n}\n\n// Also set it on window for browser compatibility\nif (typeof window !== 'undefined') {\n  window.__PEERPIGEON_UNSEA__ = UnSEA;\n}\n\nconsole.log('\uD83D\uDD10 PeerPigeon browser bundle loaded with embedded UnSEA crypto');\n", "export class EventEmitter {\n  constructor() {\n    this.eventListeners = {};\n  }\n\n  addEventListener(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n  }\n\n  removeEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      const index = this.eventListeners[event].indexOf(callback);\n      if (index > -1) {\n        this.eventListeners[event].splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  // Standard Node.js EventEmitter compatible methods\n  \n  /**\n   * Add event listener (alias for addEventListener)\n   * @param {string} event - Event name\n   * @param {Function} callback - Event handler\n   * @returns {EventEmitter} Returns this for chaining\n   */\n  on(event, callback) {\n    this.addEventListener(event, callback);\n    return this;\n  }\n\n  /**\n   * Remove event listener (alias for removeEventListener)\n   * @param {string} event - Event name\n   * @param {Function} callback - Event handler to remove\n   * @returns {EventEmitter} Returns this for chaining\n   */\n  off(event, callback) {\n    this.removeEventListener(event, callback);\n    return this;\n  }\n\n  /**\n   * Add one-time event listener\n   * @param {string} event - Event name\n   * @param {Function} callback - Event handler\n   * @returns {EventEmitter} Returns this for chaining\n   */\n  once(event, callback) {\n    const onceWrapper = (data) => {\n      callback(data);\n      this.removeEventListener(event, onceWrapper);\n    };\n    this.addEventListener(event, onceWrapper);\n    return this;\n  }\n\n  /**\n   * Remove all listeners for an event, or all listeners if no event specified\n   * @param {string} [event] - Event name (optional)\n   * @returns {EventEmitter} Returns this for chaining\n   */\n  removeAllListeners(event) {\n    if (event) {\n      delete this.eventListeners[event];\n    } else {\n      this.eventListeners = {};\n    }\n    return this;\n  }\n\n  /**\n   * Get array of listeners for an event\n   * @param {string} event - Event name\n   * @returns {Function[]} Array of listeners\n   */\n  listeners(event) {\n    return this.eventListeners[event] ? [...this.eventListeners[event]] : [];\n  }\n\n  /**\n   * Get count of listeners for an event\n   * @param {string} event - Event name\n   * @returns {number} Number of listeners\n   */\n  listenerCount(event) {\n    return this.eventListeners[event] ? this.eventListeners[event].length : 0;\n  }\n\n  /**\n   * Get array of event names that have listeners\n   * @returns {string[]} Array of event names\n   */\n  eventNames() {\n    return Object.keys(this.eventListeners);\n  }\n}\n", "/**\n * EnvironmentDetector - Utility for detecting runtime environment and capabilities\n * Provides comprehensive environment detection for browser, Node.js, Worker contexts\n */\n\nexport class EnvironmentDetector {\n  constructor() {\n    this._cache = new Map();\n    this._init();\n  }\n\n  _init() {\n    // Pre-compute common detections to avoid repeated checks\n    this._cache.set('isBrowser', this._detectBrowser());\n    this._cache.set('isNodeJS', this._detectNodeJS());\n    this._cache.set('isWorker', this._detectWorker());\n    this._cache.set('isServiceWorker', this._detectServiceWorker());\n    this._cache.set('isWebWorker', this._detectWebWorker());\n    this._cache.set('isSharedWorker', this._detectSharedWorker());\n    this._cache.set('isDeno', this._detectDeno());\n    this._cache.set('isBun', this._detectBun());\n    this._cache.set('isNativeScript', this._detectNativeScript());\n\n    // Initialize WebRTC polyfill for Node.js if available\n    if (this._cache.get('isNodeJS')) {\n      this._initNodeWebRTC();\n    }\n  }\n\n  /**\n   * Initialize WebRTC polyfill for Node.js environment\n   * Attempts to load @koush/wrtc and set up WebRTC globals\n   * @private\n   */\n  _initNodeWebRTC() {\n    try {\n      // Check if WebRTC is already available globally\n      if (typeof global !== 'undefined' && typeof global.RTCPeerConnection !== 'undefined') {\n        return; // WebRTC already available\n      }\n\n      // Try to import @koush/wrtc package\n      let wrtc;\n      if (typeof require !== 'undefined') {\n        // CommonJS require\n        try {\n          wrtc = require('@koush/wrtc');\n        } catch (e) {\n          // @koush/wrtc not available, try node-webrtc as fallback\n          try {\n            wrtc = require('node-webrtc');\n          } catch (e2) {\n            // No WebRTC package available\n            return;\n          }\n        }\n      } else {\n        // ES modules - dynamic import would be needed\n        // Since we can't do synchronous dynamic imports, we'll skip this\n        // The async method initWebRTCAsync() should be used instead\n        return;\n      }\n\n      // Set up WebRTC globals if we successfully loaded a package\n      if (wrtc && typeof global !== 'undefined') {\n        global.RTCPeerConnection = wrtc.RTCPeerConnection;\n        global.RTCSessionDescription = wrtc.RTCSessionDescription;\n        global.RTCIceCandidate = wrtc.RTCIceCandidate;\n        global.MediaStream = wrtc.MediaStream || global.MediaStream;\n        global.MediaStreamTrack = wrtc.MediaStreamTrack || global.MediaStreamTrack;\n\n        // Update cache to reflect that WebRTC is now available\n        this._webrtcPolyfilled = true;\n      }\n    } catch (error) {\n      // Silently fail - WebRTC polyfill is optional\n      // The application will handle missing WebRTC through normal capability detection\n    }\n  }\n\n  // Primary environment detection\n  _detectBrowser() {\n    return typeof window !== 'undefined' &&\n               typeof document !== 'undefined' &&\n               typeof navigator !== 'undefined';\n  }\n\n  _detectNodeJS() {\n    return typeof process !== 'undefined' &&\n               process.versions != null &&\n               process.versions.node != null;\n  }\n\n  _detectDeno() {\n    return typeof Deno !== 'undefined';\n  }\n\n  _detectBun() {\n    return typeof Bun !== 'undefined';\n  }\n\n  _detectNativeScript() {\n    return typeof global !== 'undefined' &&\n           ((typeof global.NativeScriptGlobals !== 'undefined') ||\n            (typeof global.__ANDROID__ !== 'undefined') ||\n            (typeof global.__IOS__ !== 'undefined') ||\n            (typeof global.__VISIONOS__ !== 'undefined') ||\n            (typeof global.loadModule === 'function' && typeof global.registerModule === 'function'));\n  }\n\n  _detectWorker() {\n    return typeof importScripts !== 'undefined' ||\n               this._detectServiceWorker() ||\n               this._detectWebWorker() ||\n               this._detectSharedWorker();\n  }\n\n  _detectServiceWorker() {\n    return typeof globalThis.ServiceWorkerGlobalScope !== 'undefined' &&\n               typeof self !== 'undefined' &&\n               self instanceof globalThis.ServiceWorkerGlobalScope;\n  }\n\n  _detectWebWorker() {\n    return typeof globalThis.DedicatedWorkerGlobalScope !== 'undefined' &&\n               typeof self !== 'undefined' &&\n               self instanceof globalThis.DedicatedWorkerGlobalScope;\n  }\n\n  _detectSharedWorker() {\n    return typeof globalThis.SharedWorkerGlobalScope !== 'undefined' &&\n               typeof self !== 'undefined' &&\n               self instanceof globalThis.SharedWorkerGlobalScope;\n  }\n\n  // Public getters\n  get isBrowser() {\n    return this._cache.get('isBrowser');\n  }\n\n  get isNodeJS() {\n    return this._cache.get('isNodeJS');\n  }\n\n  get isWorker() {\n    return this._cache.get('isWorker');\n  }\n\n  get isServiceWorker() {\n    return this._cache.get('isServiceWorker');\n  }\n\n  get isWebWorker() {\n    return this._cache.get('isWebWorker');\n  }\n\n  get isSharedWorker() {\n    return this._cache.get('isSharedWorker');\n  }\n\n  get isDeno() {\n    return this._cache.get('isDeno');\n  }\n\n  get isBun() {\n    return this._cache.get('isBun');\n  }\n\n  get isNativeScript() {\n    return this._cache.get('isNativeScript');\n  }\n\n  get isServer() {\n    return this.isNodeJS || this.isDeno || this.isBun;\n  }\n\n  get isClient() {\n    return this.isBrowser || this.isWorker || this.isNativeScript;\n  }\n\n  // WebRTC capability detection\n  get hasWebRTC() {\n    if (this.isBrowser) {\n      return typeof RTCPeerConnection !== 'undefined' ||\n                   typeof webkitRTCPeerConnection !== 'undefined' ||\n                   typeof mozRTCPeerConnection !== 'undefined';\n    }\n    if (this.isNodeJS) {\n      // Check for Node.js WebRTC implementations or globally injected WebRTC\n      // This includes polyfills loaded by _initNodeWebRTC()\n      return (typeof global !== 'undefined' &&\n                   typeof global.RTCPeerConnection !== 'undefined') ||\n                   typeof RTCPeerConnection !== 'undefined' ||\n                   this._webrtcPolyfilled === true;\n    }\n    if (this.isNativeScript) {\n      // NativeScript can access native WebRTC implementations through native modules\n      // Check for globally injected WebRTC first\n      return (typeof global !== 'undefined' &&\n                   typeof global.RTCPeerConnection !== 'undefined') ||\n                   typeof RTCPeerConnection !== 'undefined';\n    }\n    return false;\n  }\n\n  get hasDataChannel() {\n    return this.hasWebRTC && (this.isBrowser || this.isNativeScript);\n  }\n\n  get hasGetUserMedia() {\n    if (!this.isBrowser && !this.isNativeScript) return false;\n    return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n               !!(navigator && (navigator.getUserMedia ||\n                  navigator.webkitGetUserMedia ||\n                  navigator.mozGetUserMedia ||\n                  navigator.msGetUserMedia));\n  }\n\n  // WebSocket capability detection\n  get hasWebSocket() {\n    if (this.isBrowser || this.isWorker) {\n      return typeof WebSocket !== 'undefined';\n    }\n    if (this.isNodeJS) {\n      // Check for globally injected WebSocket first\n      if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n        return true;\n      }\n      if (typeof WebSocket !== 'undefined') {\n        return true;\n      }\n\n      try {\n        // Try ES module import first\n        if (typeof require !== 'undefined') {\n          require.resolve('ws');\n          return true;\n        } else {\n          // In ES modules, we can't easily check if a package is available\n          // without actually importing it, so we'll assume it might be available\n          return false;\n        }\n      } catch (e) {\n        return false;\n      }\n    }\n    if (this.isNativeScript) {\n      // NativeScript has WebSocket support through global injection or native modules\n      return typeof WebSocket !== 'undefined' ||\n             (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined');\n    }\n    return false;\n  }\n\n  // Storage capability detection\n  get hasLocalStorage() {\n    if (!this.isBrowser && !this.isNativeScript) return false;\n    try {\n      const test = '__storage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  get hasSessionStorage() {\n    if (!this.isBrowser && !this.isNativeScript) return false;\n    try {\n      const test = '__storage_test__';\n      sessionStorage.setItem(test, test);\n      sessionStorage.removeItem(test);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  get hasIndexedDB() {\n    if (!this.isBrowser) return false; // NativeScript doesn't typically have IndexedDB\n    return typeof indexedDB !== 'undefined';\n  }\n\n  get hasCookies() {\n    if (!this.isBrowser) return false; // NativeScript doesn't have cookies\n    return typeof document !== 'undefined' &&\n               typeof document.cookie === 'string';\n  }\n\n  // Network and connectivity detection\n  get hasNetworkInformation() {\n    if (!this.isBrowser) return false;\n    return typeof navigator !== 'undefined' &&\n               'connection' in navigator;\n  }\n\n  get isOnline() {\n    if (this.isBrowser) {\n      return typeof navigator !== 'undefined' ? navigator.onLine : true;\n    }\n    return true; // Assume online for server environments\n  }\n\n  get networkType() {\n    if (this.hasNetworkInformation) {\n      return navigator.connection.effectiveType || 'unknown';\n    }\n    return 'unknown';\n  }\n\n  // Crypto capabilities\n  get hasCrypto() {\n    if (this.isBrowser || this.isWorker) {\n      return typeof crypto !== 'undefined' &&\n                   typeof crypto.subtle !== 'undefined';\n    }\n    if (this.isNodeJS) {\n      try {\n        if (typeof require !== 'undefined') {\n          require('crypto');\n          return true;\n        } else {\n          // In ES modules, crypto is a built-in Node.js module\n          return typeof process !== 'undefined' && process.versions.node;\n        }\n      } catch (e) {\n        return false;\n      }\n    }\n    if (this.isNativeScript) {\n      // NativeScript may have crypto through global polyfills or native modules\n      return (typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined') ||\n             (typeof global !== 'undefined' && typeof global.crypto !== 'undefined');\n    }\n    return false;\n  }\n\n  get hasRandomValues() {\n    if (this.isBrowser || this.isWorker) {\n      return typeof crypto !== 'undefined' &&\n                   typeof crypto.getRandomValues === 'function';\n    }\n    if (this.isNodeJS) {\n      try {\n        if (typeof require !== 'undefined') {\n          const crypto = require('crypto');\n          return typeof crypto.randomBytes === 'function';\n        } else {\n          // In ES modules, crypto is a built-in Node.js module\n          return typeof process !== 'undefined' && process.versions.node;\n        }\n      } catch (e) {\n        return false;\n      }\n    }\n    if (this.isNativeScript) {\n      // NativeScript may have crypto random values through global polyfills\n      return (typeof crypto !== 'undefined' && typeof crypto.getRandomValues === 'function') ||\n             (typeof global !== 'undefined' &&\n              typeof global.crypto !== 'undefined' &&\n              typeof global.crypto.getRandomValues === 'function');\n    }\n    return false;\n  }\n\n  // Performance and timing\n  get hasPerformanceNow() {\n    return typeof performance !== 'undefined' &&\n               typeof performance.now === 'function';\n  }\n\n  get hasHighResolutionTime() {\n    if (this.isNodeJS) {\n      return typeof process.hrtime === 'function' ||\n                   typeof process.hrtime.bigint === 'function';\n    }\n    return this.hasPerformanceNow;\n  }\n\n  // Browser-specific detection\n  getBrowserInfo() {\n    if (!this.isBrowser) return null;\n\n    const userAgent = navigator.userAgent;\n    const browsers = {\n      chrome: /Chrome\\/(\\d+)/.exec(userAgent),\n      firefox: /Firefox\\/(\\d+)/.exec(userAgent),\n      safari: /Safari\\/(\\d+)/.exec(userAgent) && !/Chrome/.test(userAgent),\n      edge: /Edge\\/(\\d+)/.exec(userAgent),\n      ie: /MSIE (\\d+)/.exec(userAgent) || /Trident.*rv:(\\d+)/.exec(userAgent)\n    };\n\n    for (const [browser, match] of Object.entries(browsers)) {\n      if (match) {\n        return {\n          name: browser,\n          version: match[1] || 'unknown'\n        };\n      }\n    }\n\n    return { name: 'unknown', version: 'unknown' };\n  }\n\n  // Node.js-specific detection\n  getNodeInfo() {\n    if (!this.isNodeJS) return null;\n\n    return {\n      version: process.version,\n      platform: process.platform,\n      arch: process.arch,\n      versions: process.versions\n    };\n  }\n\n  // NativeScript-specific detection\n  getNativeScriptInfo() {\n    if (!this.isNativeScript) return null;\n\n    const info = {\n      runtime: 'nativescript'\n    };\n\n    // Detect platform if globals are available\n    if (typeof global !== 'undefined') {\n      if (global.__ANDROID__) {\n        info.platform = 'android';\n      } else if (global.__IOS__) {\n        info.platform = 'ios';\n      } else if (global.__VISIONOS__) {\n        info.platform = 'visionos';\n      }\n\n      // Add additional NativeScript globals if available\n      if (global.NativeScriptGlobals) {\n        info.launched = global.NativeScriptGlobals.launched;\n        info.appInstanceReady = global.NativeScriptGlobals.appInstanceReady;\n      }\n    }\n\n    return info;\n  }\n\n  // Device and platform detection\n  getPlatformInfo() {\n    if (this.isBrowser) {\n      return {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        languages: navigator.languages || [navigator.language],\n        cookieEnabled: navigator.cookieEnabled,\n        onLine: navigator.onLine,\n        hardwareConcurrency: navigator.hardwareConcurrency || 1\n      };\n    }\n\n    if (this.isNodeJS) {\n      return this.getNodeInfo();\n    }\n\n    if (this.isNativeScript) {\n      return this.getNativeScriptInfo();\n    }\n\n    return null;\n  }\n\n  // Feature detection for specific APIs\n  hasFeature(feature) {\n    const features = {\n      // WebRTC\n      webrtc: () => this.hasWebRTC,\n      datachannel: () => this.hasDataChannel,\n      getusermedia: () => this.hasGetUserMedia,\n\n      // WebSocket\n      websocket: () => this.hasWebSocket,\n\n      // Storage\n      localstorage: () => this.hasLocalStorage,\n      sessionstorage: () => this.hasSessionStorage,\n      indexeddb: () => this.hasIndexedDB,\n      cookies: () => this.hasCookies,\n\n      // Crypto\n      crypto: () => this.hasCrypto,\n      randomvalues: () => this.hasRandomValues,\n\n      // Performance\n      performance: () => this.hasPerformanceNow,\n      hrtime: () => this.hasHighResolutionTime,\n\n      // Network\n      networkinfo: () => this.hasNetworkInformation,\n      online: () => this.isOnline,\n\n      // Workers\n      webworker: () => typeof Worker !== 'undefined',\n      serviceworker: () => typeof navigator !== 'undefined' && 'serviceWorker' in navigator,\n      sharedworker: () => typeof SharedWorker !== 'undefined'\n    };\n\n    const featureCheck = features[feature.toLowerCase()];\n    return featureCheck ? featureCheck() : false;\n  }\n\n  // Get comprehensive environment report\n  getEnvironmentReport() {\n    return {\n      runtime: {\n        isBrowser: this.isBrowser,\n        isNodeJS: this.isNodeJS,\n        isWorker: this.isWorker,\n        isServiceWorker: this.isServiceWorker,\n        isWebWorker: this.isWebWorker,\n        isSharedWorker: this.isSharedWorker,\n        isDeno: this.isDeno,\n        isBun: this.isBun,\n        isNativeScript: this.isNativeScript,\n        isServer: this.isServer,\n        isClient: this.isClient\n      },\n      capabilities: {\n        webrtc: this.hasWebRTC,\n        dataChannel: this.hasDataChannel,\n        getUserMedia: this.hasGetUserMedia,\n        webSocket: this.hasWebSocket,\n        localStorage: this.hasLocalStorage,\n        sessionStorage: this.hasSessionStorage,\n        indexedDB: this.hasIndexedDB,\n        cookies: this.hasCookies,\n        crypto: this.hasCrypto,\n        randomValues: this.hasRandomValues,\n        performance: this.hasPerformanceNow,\n        networkInfo: this.hasNetworkInformation\n      },\n      platform: this.getPlatformInfo(),\n      browser: this.getBrowserInfo(),\n      node: this.getNodeInfo(),\n      nativescript: this.getNativeScriptInfo(),\n      network: {\n        online: this.isOnline,\n        type: this.networkType\n      }\n    };\n  }\n\n  /**\n   * Asynchronously initialize WebRTC polyfill for Node.js environment\n   * This method is useful for ES module environments where dynamic imports are preferred\n   * @returns {Promise<boolean>} True if WebRTC was successfully initialized\n   */\n  async initWebRTCAsync() {\n    if (!this.isNodeJS) {\n      return false; // Only works in Node.js\n    }\n\n    try {\n      // Check if WebRTC is already available globally\n      if (typeof global !== 'undefined' && typeof global.RTCPeerConnection !== 'undefined') {\n        return true; // WebRTC already available\n      }\n\n      let wrtc;\n      try {\n        // Try to import @koush/wrtc first\n        wrtc = await import('@koush/wrtc');\n      } catch (e) {\n        try {\n          // Fallback to node-webrtc\n          wrtc = await import('node-webrtc');\n        } catch (e2) {\n          // No WebRTC package available\n          return false;\n        }\n      }\n\n      // Set up WebRTC globals if we successfully loaded a package\n      if (wrtc && typeof global !== 'undefined') {\n        global.RTCPeerConnection = wrtc.RTCPeerConnection || wrtc.default?.RTCPeerConnection;\n        global.RTCSessionDescription = wrtc.RTCSessionDescription || wrtc.default?.RTCSessionDescription;\n        global.RTCIceCandidate = wrtc.RTCIceCandidate || wrtc.default?.RTCIceCandidate;\n        global.MediaStream = wrtc.MediaStream || wrtc.default?.MediaStream || global.MediaStream;\n        global.MediaStreamTrack = wrtc.MediaStreamTrack || wrtc.default?.MediaStreamTrack || global.MediaStreamTrack;\n\n        // Update cache to reflect that WebRTC is now available\n        this._webrtcPolyfilled = true;\n        return true;\n      }\n    } catch (error) {\n      // Silently fail - WebRTC polyfill is optional\n    }\n\n    return false;\n  }\n\n  // Static method for quick environment check\n  static detect() {\n    return new EnvironmentDetector();\n  }\n\n  // Static method for single feature check\n  static hasFeature(feature) {\n    const detector = new EnvironmentDetector();\n    return detector.hasFeature(feature);\n  }\n}\n\n// Export singleton instance for convenience\nexport const environmentDetector = new EnvironmentDetector();\n\n// Export individual detection functions for tree-shaking\nexport const isBrowser = () => environmentDetector.isBrowser;\nexport const isNodeJS = () => environmentDetector.isNodeJS;\nexport const isWorker = () => environmentDetector.isWorker;\nexport const isNativeScript = () => environmentDetector.isNativeScript;\nexport const hasWebRTC = () => environmentDetector.hasWebRTC;\nexport const hasWebSocket = () => environmentDetector.hasWebSocket;\nexport const getEnvironmentReport = () => environmentDetector.getEnvironmentReport();\nexport const initWebRTCAsync = () => environmentDetector.initWebRTCAsync();\n", "/**\n * Debug Logger - Configurable debugging system for PeerPigeon\n *\n * Provides centralized control over console logging with module-specific enable/disable\n * functionality. Default is disabled to prevent console noise in production.\n *\n * Usage:\n *   const debug = DebugLogger.create('ModuleName');\n *   debug.log('This will only show if enabled');\n *   debug.warn('Warnings can be controlled separately');\n *   debug.error('Errors can be controlled separately');\n *\n * Configuration:\n *   DebugLogger.enable('ModuleName');  // Enable specific module\n *   DebugLogger.enableAll();          // Enable all modules\n *   DebugLogger.disable('ModuleName'); // Disable specific module\n *   DebugLogger.disableAll();         // Disable all modules (default)\n */\n\nclass DebugLogger {\n  static moduleStates = new Map();\n  static globalEnabled = false;\n  static defaultEnabled = false; // Default is disabled\n\n  /**\n   * Create a debug logger for a specific module\n   * @param {string} moduleName - Name of the module (e.g., 'GossipManager', 'PeerConnection')\n   * @returns {Object} Debug logger with log/warn/error methods\n   */\n  static create(moduleName) {\n    // Initialize module state if not exists\n    if (!this.moduleStates.has(moduleName)) {\n      this.moduleStates.set(moduleName, this.defaultEnabled);\n    }\n\n    return {\n      /**\n       * Debug log - for general debugging information\n       * @param {...any} args - Arguments to log\n       */\n      log: (...args) => {\n        if (this.isEnabled(moduleName)) {\n          console.log(`[${moduleName}]`, ...args);\n        }\n      },\n\n      /**\n       * Debug warn - for warnings\n       * @param {...any} args - Arguments to log\n       */\n      warn: (...args) => {\n        if (this.isEnabled(moduleName)) {\n          console.warn(`[${moduleName}]`, ...args);\n        }\n      },\n\n      /**\n       * Debug error - for errors\n       * @param {...any} args - Arguments to log\n       */\n      error: (...args) => {\n        if (this.isEnabled(moduleName)) {\n          console.error(`[${moduleName}]`, ...args);\n        }\n      },\n\n      /**\n       * Debug info - alias for log\n       * @param {...any} args - Arguments to log\n       */\n      info: (...args) => {\n        if (this.isEnabled(moduleName)) {\n          console.info(`[${moduleName}]`, ...args);\n        }\n      },\n\n      /**\n       * Debug debug - alias for log\n       * @param {...any} args - Arguments to log\n       */\n      debug: (...args) => {\n        if (this.isEnabled(moduleName)) {\n          console.debug(`[${moduleName}]`, ...args);\n        }\n      }\n    };\n  }\n\n  /**\n   * Check if debugging is enabled for a module\n   * @param {string} moduleName - Module name to check\n   * @returns {boolean} True if enabled\n   */\n  static isEnabled(moduleName) {\n    if (this.globalEnabled) return true;\n    return this.moduleStates.get(moduleName) || false;\n  }\n\n  /**\n   * Enable debugging for a specific module\n   * @param {string} moduleName - Module name to enable\n   */\n  static enable(moduleName) {\n    this.moduleStates.set(moduleName, true);\n  }\n\n  /**\n   * Disable debugging for a specific module\n   * @param {string} moduleName - Module name to disable\n   */\n  static disable(moduleName) {\n    this.moduleStates.set(moduleName, false);\n  }\n\n  /**\n   * Enable debugging for all modules\n   */\n  static enableAll() {\n    this.globalEnabled = true;\n  }\n\n  /**\n   * Disable debugging for all modules\n   */\n  static disableAll() {\n    this.globalEnabled = false;\n    // Reset all module states to false\n    for (const [moduleName] of this.moduleStates) {\n      this.moduleStates.set(moduleName, false);\n    }\n  }\n\n  /**\n   * Enable debugging for multiple modules\n   * @param {string[]} moduleNames - Array of module names to enable\n   */\n  static enableModules(moduleNames) {\n    for (const moduleName of moduleNames) {\n      this.enable(moduleName);\n    }\n  }\n\n  /**\n   * Disable debugging for multiple modules\n   * @param {string[]} moduleNames - Array of module names to disable\n   */\n  static disableModules(moduleNames) {\n    for (const moduleName of moduleNames) {\n      this.disable(moduleName);\n    }\n  }\n\n  /**\n   * Get the current state of all modules\n   * @returns {Object} Object with module names as keys and enabled state as values\n   */\n  static getState() {\n    const state = {};\n    for (const [moduleName, enabled] of this.moduleStates) {\n      state[moduleName] = enabled;\n    }\n    return {\n      globalEnabled: this.globalEnabled,\n      modules: state\n    };\n  }\n\n  /**\n   * Configure debugging from an options object\n   * @param {Object} options - Configuration options\n   * @param {boolean} [options.enableAll] - Enable all modules\n   * @param {boolean} [options.disableAll] - Disable all modules\n   * @param {string[]} [options.enable] - Array of module names to enable\n   * @param {string[]} [options.disable] - Array of module names to disable\n   */\n  static configure(options = {}) {\n    if (options.disableAll) {\n      this.disableAll();\n    }\n\n    if (options.enableAll) {\n      this.enableAll();\n    }\n\n    if (options.enable && Array.isArray(options.enable)) {\n      this.enableModules(options.enable);\n    }\n\n    if (options.disable && Array.isArray(options.disable)) {\n      this.disableModules(options.disable);\n    }\n  }\n\n  /**\n   * Get list of all known modules\n   * @returns {string[]} Array of module names\n   */\n  static getModules() {\n    return Array.from(this.moduleStates.keys()).sort();\n  }\n}\n\n// ES6 export\nexport default DebugLogger;\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\nexport class SignalingClient extends EventEmitter {\n  constructor(peerId, maxPeers = 10, mesh = null) {\n    super();\n    this.debug = DebugLogger.create('SignalingClient');\n    this.peerId = peerId;\n    this.maxPeers = maxPeers;\n    this.mesh = mesh; // Reference to the mesh for peer coordination\n    this.signalingUrl = null;\n    this.connected = false;\n    this.websocket = null;\n    this.reconnectDelay = 1000;\n    this.maxReconnectDelay = 30000;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 10; // Increased for better persistence\n    this.connectionPromise = null;\n    this.reconnectTimeout = null;\n    this.isReconnecting = false;\n  }\n\n  setConnectionType(type) {\n    // WebSocket-only implementation, ignore connection type setting\n    this.debug.log(`WebSocket-only implementation - connection type setting ignored: ${type}`);\n  }\n\n  createWebSocket(url) {\n    // Environment-aware WebSocket creation\n    if (environmentDetector.isNodeJS) {\n      // Check for globally injected WebSocket first (set by user)\n      if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n        return new global.WebSocket(url);\n      }\n      if (typeof WebSocket !== 'undefined') {\n        return new WebSocket(url);\n      }\n\n      // Try to use the 'ws' package if available\n      try {\n        if (typeof require !== 'undefined') {\n          const WebSocket = require('ws');\n          return new WebSocket(url);\n        } else {\n          // In ES modules, dynamic import would be needed\n          this.debug.warn('WebSocket package detection not available in ES modules. Ensure \"ws\" is installed.');\n          throw new Error('WebSocket not available in Node.js ES modules. Install the \"ws\" package and import it manually.');\n        }\n      } catch (error) {\n        this.debug.warn('ws package not found in Node.js environment. Install with: npm install ws');\n        throw new Error('WebSocket not available in Node.js. Install the \"ws\" package.');\n      }\n    } else if (environmentDetector.isBrowser || environmentDetector.isWorker || environmentDetector.isNativeScript) {\n      // In browser, worker, or NativeScript environments, use the native WebSocket\n      return new WebSocket(url);\n    } else {\n      throw new Error('WebSocket not supported in this environment');\n    }\n  }\n\n  async sendSignalingMessage(message) {\n    // Check connection status before sending\n    if (!this.isConnected()) {\n      this.debug.log('WebSocket not connected, attempting to reconnect...');\n      if (!this.isReconnecting) {\n        this.attemptReconnect();\n      }\n      throw new Error('WebSocket not connected');\n    }\n\n    const payload = {\n      type: message.type,\n      data: message.data,\n      maxPeers: this.maxPeers,\n      networkName: this.mesh ? this.mesh.networkName : 'global', // Include network namespace\n      ...(message.targetPeerId && { targetPeerId: message.targetPeerId })\n    };\n\n    try {\n      this.websocket.send(JSON.stringify(payload));\n      this.debug.log(`Sent WebSocket message: ${payload.type} (network: ${payload.networkName})`);\n      return { success: true };\n    } catch (error) {\n      this.debug.error('Failed to send WebSocket message:', error);\n      // Trigger reconnection on send failure\n      if (!this.isReconnecting) {\n        this.attemptReconnect();\n      }\n      throw error;\n    }\n  }\n\n  isConnected() {\n    return this.websocket &&\n               this.websocket.readyState === WebSocket.OPEN &&\n               this.connected;\n  }\n\n  async connect(websocketUrl) {\n    // Validate WebSocket support before attempting connection\n    if (!environmentDetector.hasWebSocket) {\n      const error = new Error('WebSocket not supported in this environment');\n      this.emit('statusChanged', { type: 'error', message: error.message });\n      throw error;\n    }\n\n    // Prevent multiple simultaneous connection attempts\n    if (this.connectionPromise) {\n      this.debug.log('Connection already in progress, waiting for completion...');\n      return this.connectionPromise;\n    }\n\n    // Convert HTTP/HTTPS URL to WebSocket URL if needed\n    if (websocketUrl.startsWith('http://')) {\n      websocketUrl = websocketUrl.replace('http://', 'ws://');\n    } else if (websocketUrl.startsWith('https://')) {\n      websocketUrl = websocketUrl.replace('https://', 'wss://');\n    }\n\n    // Ensure WebSocket URL format\n    if (!websocketUrl.startsWith('ws://') && !websocketUrl.startsWith('wss://')) {\n      throw new Error('Invalid WebSocket URL format');\n    }\n\n    this.signalingUrl = websocketUrl;\n\n    // Add peerId as query parameter\n    const url = new URL(websocketUrl);\n    url.searchParams.set('peerId', this.peerId);\n\n    this.emit('statusChanged', { type: 'connecting', message: 'Connecting to WebSocket...' });\n\n    this.connectionPromise = new Promise((resolve, reject) => {\n      try {\n        // Create WebSocket with environment-specific handling\n        this.websocket = this.createWebSocket(url.toString());\n\n        const connectTimeout = setTimeout(() => {\n          if (this.websocket.readyState === WebSocket.CONNECTING) {\n            this.websocket.close();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, 10000);\n\n        this.websocket.onopen = () => {\n          clearTimeout(connectTimeout);\n          this.connected = true;\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.isReconnecting = false;\n          this.connectionPromise = null;\n\n          this.debug.log('WebSocket connected');\n          this.emit('statusChanged', { type: 'info', message: 'WebSocket connected' });\n\n          // Send announce message\n          this.sendSignalingMessage({\n            type: 'announce',\n            data: { peerId: this.peerId }\n          }).then(() => {\n            this.emit('connected');\n            resolve();\n          }).catch(error => {\n            this.debug.error('Failed to send announce message:', error);\n            this.emit('connected'); // Still emit connected even if announce fails\n            resolve();\n          });\n        };\n\n        this.websocket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            this.debug.log(`Received WebSocket message: ${message.type} (network: ${message.networkName || 'unknown'})`);\n\n            if (message.type === 'connected') {\n              // Connection confirmation from server\n              this.debug.log('WebSocket connection confirmed by server');\n            } else {\n              // Filter messages by network namespace\n              const currentNetwork = this.mesh ? this.mesh.networkName : 'global';\n              const messageNetwork = message.networkName || 'global';\n              \n              if (messageNetwork === currentNetwork) {\n                // Forward signaling message to mesh\n                this.emit('signalingMessage', message);\n              } else {\n                this.debug.log(`Filtered message from different network: ${messageNetwork} (current: ${currentNetwork})`);\n              }\n            }\n          } catch (error) {\n            this.debug.error('Failed to parse WebSocket message:', error);\n          }\n        };\n\n        this.websocket.onclose = (event) => {\n          clearTimeout(connectTimeout);\n          this.connected = false;\n          this.connectionPromise = null;\n\n          this.debug.log('WebSocket closed:', event.code, event.reason);\n\n          if (event.code === 1000) {\n            // Normal closure\n            this.emit('disconnected');\n          } else {\n            // Abnormal closure - attempt reconnection\n            this.emit('statusChanged', { type: 'warning', message: 'WebSocket connection lost - reconnecting...' });\n            if (!this.isReconnecting) {\n              this.attemptReconnect();\n            }\n          }\n        };\n\n        this.websocket.onerror = (error) => {\n          clearTimeout(connectTimeout);\n          this.debug.error('WebSocket error:', error);\n\n          if (this.websocket.readyState === WebSocket.CONNECTING) {\n            this.connectionPromise = null;\n            reject(new Error('WebSocket connection failed'));\n          } else {\n            this.emit('statusChanged', { type: 'error', message: 'WebSocket error occurred' });\n            // Trigger reconnection on error if not already reconnecting\n            if (!this.isReconnecting) {\n              this.attemptReconnect();\n            }\n          }\n        };\n      } catch (error) {\n        this.connectionPromise = null;\n        reject(error);\n      }\n    });\n\n    return this.connectionPromise;\n  }\n\n  attemptReconnect() {\n    if (this.isReconnecting) {\n      this.debug.log('Reconnection already in progress');\n      return;\n    }\n\n    // Check if we have healthy peer connections - if so, be less aggressive with reconnection\n    const hasHealthyPeers = this.mesh && this.mesh.connectionManager &&\n                           this.mesh.connectionManager.getConnectedPeerCount() > 0;\n\n    if (hasHealthyPeers) {\n      this.debug.log('Have healthy peer connections, reducing reconnection urgency');\n    }\n\n    // Clear any existing reconnect timeout\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      this.debug.log('Max reconnection attempts reached, using exponential backoff');\n      // If we have healthy peers, use much longer delays to avoid disrupting the mesh\n      const baseExtendedDelay = hasHealthyPeers ? 600000 : this.maxReconnectDelay * 2; // 10 min vs 2x normal\n      const extendedDelay = Math.min(baseExtendedDelay, 600000); // Max 10 minutes\n      this.reconnectTimeout = setTimeout(() => {\n        this.reconnectAttempts = Math.floor(this.maxReconnectAttempts / 2); // Reset to half max\n        this.attemptReconnect();\n      }, extendedDelay);\n      return;\n    }\n\n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n\n    // Use longer delays if we have healthy peer connections\n    const baseDelay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n    const delayMultiplier = hasHealthyPeers ? 3 : 1; // 3x longer delay if peers are healthy\n    const delay = Math.min(baseDelay * delayMultiplier, hasHealthyPeers ? 300000 : this.maxReconnectDelay);\n\n    this.debug.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}, healthy peers: ${hasHealthyPeers})`);\n\n    this.reconnectTimeout = setTimeout(async () => {\n      if (!this.connected && this.signalingUrl) {\n        try {\n          await this.connect(this.signalingUrl);\n          this.emit('statusChanged', { type: 'info', message: 'WebSocket reconnected successfully' });\n        } catch (error) {\n          this.debug.error('Reconnection failed:', error);\n          this.isReconnecting = false;\n          this.attemptReconnect();\n        }\n      } else {\n        this.isReconnecting = false;\n      }\n    }, delay);\n  }\n\n  disconnect() {\n    // Clear reconnection state\n    this.isReconnecting = false;\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    // The sendGoodbyeMessage is often called from an unload handler,\n    // so we don't want to make it part of the standard disconnect flow here.\n    // The CleanupManager handles sending goodbye on unload.\n\n    this.connected = false;\n    this.connectionPromise = null;\n\n    if (this.websocket) {\n      // Clear event handlers to prevent memory leaks\n      this.websocket.onopen = null;\n      this.websocket.onmessage = null;\n      this.websocket.onclose = null;\n      this.websocket.onerror = null;\n\n      this.websocket.close(1000, 'Client disconnect');\n      this.websocket = null;\n    }\n\n    this.emit('disconnected');\n  }\n\n  sendGoodbyeMessage() {\n    if (!this.connected) return;\n\n    try {\n      this.debug.log('Sending goodbye message');\n\n      if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(JSON.stringify({\n          type: 'goodbye',\n          data: {\n            peerId: this.peerId,\n            timestamp: Date.now(),\n            reason: 'peer_disconnect'\n          }\n        }));\n      }\n    } catch (error) {\n      this.debug.error('Failed to send goodbye message:', error);\n    }\n  }\n\n  async sendCleanupMessage(targetPeerId) {\n    if (!this.connected) return;\n\n    try {\n      await this.sendSignalingMessage({\n        type: 'cleanup',\n        data: {\n          peerId: this.peerId,\n          targetPeerId,\n          timestamp: Date.now(),\n          reason: 'peer_disconnect'\n        },\n        targetPeerId\n      });\n    } catch (error) {\n      this.debug.log(`Cleanup message failed for ${targetPeerId}:`, error.message);\n    }\n  }\n\n  getConnectionStats() {\n    return {\n      connected: this.connected,\n      isReconnecting: this.isReconnecting,\n      reconnectAttempts: this.reconnectAttempts,\n      websocketState: this.websocket ? this.websocket.readyState : 'not created'\n    };\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\nexport class PeerDiscovery extends EventEmitter {\n  constructor(peerId, options = {}) {\n    super();\n    this.debug = DebugLogger.create('PeerDiscovery');\n    this.peerId = peerId;\n    this.discoveredPeers = new Map();\n    this.connectionAttempts = new Map();\n    this.cleanupInterval = null;\n    this.meshOptimizationTimeout = null;\n    this.autoDiscovery = options.autoDiscovery ?? true;\n    this.evictionStrategy = options.evictionStrategy ?? true;\n    this.xorRouting = options.xorRouting ?? true;\n    this.minPeers = options.minPeers ?? 0;\n    this.maxPeers = options.maxPeers ?? 10;\n  }\n\n  start() {\n    this.startCleanupInterval();\n  }\n\n  stop() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n\n    if (this.meshOptimizationTimeout) {\n      clearTimeout(this.meshOptimizationTimeout);\n      this.meshOptimizationTimeout = null;\n    }\n\n    this.discoveredPeers.clear();\n    this.connectionAttempts.clear();\n  }\n\n  addDiscoveredPeer(peerId) {\n    // Skip if we already know about this peer (prevent duplicate processing)\n    if (this.discoveredPeers.has(peerId)) {\n      // Update timestamp but don't emit events or trigger connections\n      this.discoveredPeers.set(peerId, Date.now());\n      return;\n    }\n\n    this.discoveredPeers.set(peerId, Date.now());\n    this.emit('peerDiscovered', { peerId });\n\n    this.debug.log(`Discovered peer ${peerId.substring(0, 8)}...`);\n\n    // Only auto-connect if we should initiate to this peer and we're not already trying\n    if (this.autoDiscovery && this.shouldInitiateConnection(peerId) && !this.connectionAttempts.has(peerId)) {\n      this.debug.log(`Considering connection to ${peerId.substring(0, 8)}...`);\n\n      const canAccept = this.canAcceptMorePeers();\n      if (canAccept) {\n        this.debug.log(`Connecting to ${peerId.substring(0, 8)}...`);\n        this.emit('connectToPeer', { peerId });\n      }\n    }\n\n    this.scheduleMeshOptimization();\n  }\n\n  // Update connection attempts tracking (no complex isolation logic needed)\n  onConnectionEstablished() {\n    this.debug.log('Connection established');\n  }\n\n  removeDiscoveredPeer(peerId) {\n    this.discoveredPeers.delete(peerId);\n    this.connectionAttempts.delete(peerId);\n  }\n\n  trackConnectionAttempt(peerId) {\n    this.connectionAttempts.set(peerId, Date.now());\n  }\n\n  clearConnectionAttempt(peerId) {\n    this.connectionAttempts.delete(peerId);\n  }\n\n  calculateXorDistance(peerId1, peerId2) {\n    let distance = 0n;\n    for (let i = 0; i < Math.min(peerId1.length, peerId2.length); i += 2) {\n      const byte1 = parseInt(peerId1.substr(i, 2), 16);\n      const byte2 = parseInt(peerId2.substr(i, 2), 16);\n      const xor = byte1 ^ byte2;\n      distance = (distance << 8n) | BigInt(xor);\n    }\n    return distance;\n  }\n\n  shouldInitiateConnection(targetPeerId) {\n    if (this.connectionAttempts.has(targetPeerId)) {\n      return false;\n    }\n\n    // Check current connection count to handle isolation\n    this.emit('checkCapacity');\n    const currentConnectionCount = this._currentConnectionCount || 0;\n\n    // Standard rule: Lexicographically larger peer ID initiates\n    const lexicographicShouldInitiate = this.peerId > targetPeerId;\n\n    // CRITICAL FIX: If we have no connections, override lexicographic rule to avoid isolation\n    if (currentConnectionCount === 0 && this.discoveredPeers.size > 0) {\n      // For completely isolated peers, be more aggressive about connecting\n      const discoveredPeers = Array.from(this.discoveredPeers.keys());\n      const naturalInitiators = discoveredPeers.filter(peerId => this.peerId > peerId);\n\n      // First priority: peers where we'd naturally be the initiator\n      if (naturalInitiators.length > 0 && naturalInitiators.includes(targetPeerId)) {\n        this.debug.log(`shouldInitiateConnection: Isolation override (natural) - ${this.peerId.substring(0, 8)}... will initiate to ${targetPeerId.substring(0, 8)}...`);\n        return true;\n      }\n\n      // Second priority: if no natural initiators, try the closest 3 peers by XOR distance\n      if (naturalInitiators.length === 0) {\n        const sortedByDistance = discoveredPeers.sort((a, b) => {\n          const distA = this.calculateXorDistance(this.peerId, a);\n          const distB = this.calculateXorDistance(this.peerId, b);\n          return distA < distB ? -1 : 1;\n        });\n\n        // Try to connect to the closest 3 peers (or all if less than 3)\n        const closestPeers = sortedByDistance.slice(0, Math.min(3, sortedByDistance.length));\n        if (closestPeers.includes(targetPeerId)) {\n          const index = closestPeers.indexOf(targetPeerId);\n          this.debug.log(`shouldInitiateConnection: Isolation override (closest ${index + 1}) - ${this.peerId.substring(0, 8)}... will initiate to ${targetPeerId.substring(0, 8)}...`);\n          return true;\n        }\n      }\n\n      // Third priority: if we still have no connections and have attempted several peers,\n      // be even more aggressive and try ANY peer to break isolation\n      const attemptedConnections = this.connectionAttempts.size;\n      if (attemptedConnections >= 2 && discoveredPeers.includes(targetPeerId)) {\n        this.debug.log(`shouldInitiateConnection: Isolation override (desperate) - ${this.peerId.substring(0, 8)}... will initiate to ${targetPeerId.substring(0, 8)}... (${attemptedConnections} attempts failed)`);\n        return true;\n      }\n    }\n\n    this.debug.log(`shouldInitiateConnection: ${this.peerId.substring(0, 8)}... > ${targetPeerId.substring(0, 8)}... = ${lexicographicShouldInitiate}`);\n    return lexicographicShouldInitiate;\n  }\n\n  isAttemptingConnection(peerId) {\n    return this.connectionAttempts.has(peerId);\n  }\n\n  shouldEvictForPeer(newPeerId) {\n    if (!this.evictionStrategy || !this.xorRouting) {\n      return null;\n    }\n\n    // This would need access to current peers, so we'll emit an event instead\n    this.emit('checkEviction', { newPeerId });\n    return this._shouldEvictForPeer ?? null; // Use stored value from mesh, default to null\n  }\n\n  canAcceptMorePeers() {\n    // This needs to be determined by the mesh\n    this.emit('checkCapacity');\n    return this._canAcceptMorePeers ?? true; // Use stored value from mesh, default to true\n  }\n\n  optimizeMeshConnections(currentPeers) {\n    if (!this.autoDiscovery) return;\n\n    this.debug.log('Optimizing mesh connections...');\n\n    // Find unconnected peers that we should initiate connections to\n    const unconnectedPeers = Array.from(this.discoveredPeers.keys())\n      .filter(peerId => {\n        const notConnected = !currentPeers.has(peerId);\n        const notConnecting = !this.connectionAttempts.has(peerId);\n        const shouldInitiate = this.shouldInitiateConnection(peerId);\n\n        return notConnected && notConnecting && shouldInitiate;\n      });\n\n    if (unconnectedPeers.length === 0) {\n      this.debug.log('No unconnected peers to optimize');\n      return;\n    }\n\n    // Sort by XOR distance to prioritize closer peers (if XOR routing enabled)\n    if (this.xorRouting) {\n      unconnectedPeers.sort((a, b) => {\n        const distA = this.calculateXorDistance(this.peerId, a);\n        const distB = this.calculateXorDistance(this.peerId, b);\n        return distA < distB ? -1 : 1;\n      });\n    }\n\n    this.emit('optimizeConnections', { unconnectedPeers });\n  }\n\n  scheduleMeshOptimization() {\n    if (this.meshOptimizationTimeout) {\n      clearTimeout(this.meshOptimizationTimeout);\n    }\n\n    // Simple scheduling - optimize every 10-15 seconds\n    const delay = 10000 + Math.random() * 5000;\n\n    this.meshOptimizationTimeout = setTimeout(() => {\n      this.emit('optimizeMesh');\n    }, delay);\n  }\n\n  startCleanupInterval() {\n    if (environmentDetector.isBrowser) {\n      this.cleanupInterval = window.setInterval(() => {\n        this.cleanupStaleDiscoveredPeers();\n      }, 30000);\n    } else {\n      this.cleanupInterval = setInterval(() => {\n        this.cleanupStaleDiscoveredPeers();\n      }, 30000);\n    }\n  }\n\n  cleanupStaleDiscoveredPeers() {\n    const now = Date.now();\n    const staleThreshold = 5 * 60 * 1000;\n    let removedCount = 0;\n\n    this.discoveredPeers.forEach((timestamp, peerId) => {\n      if (now - timestamp > staleThreshold) {\n        this.discoveredPeers.delete(peerId);\n        this.connectionAttempts.delete(peerId);\n        removedCount++;\n        this.debug.log('Removed stale peer:', peerId.substring(0, 8));\n      }\n    });\n\n    if (removedCount > 0) {\n      this.emit('peersUpdated', { removedCount });\n    }\n  }\n\n  getDiscoveredPeers() {\n    return Array.from(this.discoveredPeers.entries()).map(([peerId, timestamp]) => ({\n      peerId,\n      timestamp,\n      distance: this.calculateXorDistance(this.peerId, peerId),\n      isConnecting: this.connectionAttempts.has(peerId),\n      isConnected: false // Will be set by the mesh when it has peer info\n    }));\n  }\n\n  hasPeer(peerId) {\n    return this.discoveredPeers.has(peerId);\n  }\n\n  setSettings(settings) {\n    if (settings.autoDiscovery !== undefined) {\n      this.autoDiscovery = settings.autoDiscovery;\n    }\n    if (settings.evictionStrategy !== undefined) {\n      this.evictionStrategy = settings.evictionStrategy;\n    }\n    if (settings.xorRouting !== undefined) {\n      this.xorRouting = settings.xorRouting;\n    }\n    if (settings.minPeers !== undefined) {\n      this.minPeers = settings.minPeers;\n    }\n    if (settings.maxPeers !== undefined) {\n      this.maxPeers = settings.maxPeers;\n    }\n  }\n\n  updateDiscoveryTimestamp(peerId) {\n    if (this.discoveredPeers.has(peerId)) {\n      this.discoveredPeers.set(peerId, Date.now());\n    }\n  }\n\n  debugCurrentState() {\n    const discoveredPeerIds = Array.from(this.discoveredPeers.keys()).map(p => p.substring(0, 8));\n    const connectionAttempts = Array.from(this.connectionAttempts.keys()).map(p => p.substring(0, 8));\n\n    this.debug.log('=== PEER DISCOVERY DEBUG ===');\n    this.debug.log(`Our peer ID: ${this.peerId.substring(0, 8)}...`);\n    this.debug.log(`Discovered peers (${discoveredPeerIds.length}): ${discoveredPeerIds.join(', ')}`);\n    this.debug.log(`Connection attempts (${connectionAttempts.length}): ${connectionAttempts.join(', ')}`);\n\n    // Show which peers we should/shouldn't initiate to\n    discoveredPeerIds.forEach(peerId => {\n      const fullPeerId = Array.from(this.discoveredPeers.keys()).find(p => p.startsWith(peerId));\n      const shouldInitiate = this.shouldInitiateConnection(fullPeerId);\n      const comparison = this.peerId > fullPeerId;\n      this.debug.log(`  ${peerId}...: should initiate = ${shouldInitiate} (${this.peerId.substring(0, 8)}... > ${peerId}... = ${comparison})`);\n    });\n    this.debug.log('=== END DEBUG ===');\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\nexport class PeerConnection extends EventEmitter {\n  constructor(peerId, isInitiator = false, options = {}) {\n    super();\n    this.peerId = peerId;\n    this.debug = DebugLogger.create('PeerConnection');\n    this.isInitiator = isInitiator;\n    this.connection = null;\n    this.dataChannel = null;\n    this.remoteDescriptionSet = false;\n    this.dataChannelReady = false;\n    this.connectionStartTime = Date.now();\n    this.pendingIceCandidates = [];\n    this.isClosing = false; // Flag to prevent disconnection events during intentional close\n    this.iceTimeoutId = null; // Timeout ID for ICE negotiation\n    this._forcedStatus = null; // Track forced status (e.g., failed)\n\n    // Media stream support\n    this.localStream = options.localStream || null;\n    this.remoteStream = null;\n    this.enableVideo = options.enableVideo || false;\n    this.enableAudio = options.enableAudio || false;\n    this.audioTransceiver = null;\n    this.videoTransceiver = null;\n    \n    // SECURITY: Never automatically invoke remote streams - only when user explicitly requests\n    this.allowRemoteStreams = options.allowRemoteStreams === true; // Default to false - streams must be explicitly invoked\n    this.pendingRemoteStreams = []; // Buffer remote streams until user invokes them\n  }\n\n  /**\n     * Force this connection into a terminal state (e.g., failed/timeout)\n     */\n  markAsFailed(reason = 'failed') {\n    this._forcedStatus = reason;\n    try {\n      this.close();\n    } catch (e) {}\n  }\n\n  async createConnection() {\n    // Validate WebRTC support before creating connection\n    if (!environmentDetector.hasWebRTC) {\n      const error = new Error('WebRTC not supported in this environment');\n      this.emit('connectionFailed', { peerId: this.peerId, reason: error.message });\n      throw error;\n    }\n\n    this.connection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        { urls: 'stun:stun3.l.google.com:19302' },\n        { urls: 'stun:stun4.l.google.com:19302' }\n      ],\n      iceCandidatePoolSize: 10, // Pre-gather ICE candidates for faster connection\n      bundlePolicy: 'max-bundle', // Bundle all media on single transport for efficiency\n      rtcpMuxPolicy: 'require' // Multiplex RTP and RTCP for faster setup\n    });\n\n    this.setupConnectionHandlers();\n\n    // CRITICAL FIX: Use addTrack() instead of pre-allocated transceivers to trigger ontrack events\n    // This ensures that ontrack events are properly fired on the receiving side\n    this.debug.log('\uD83D\uDD04 Using addTrack() approach for proper ontrack event firing');\n\n    // Add local media stream if provided using addTrack()\n    if (this.localStream) {\n      this.debug.log('Adding local stream tracks using addTrack() method');\n      await this.addLocalStreamWithAddTrack(this.localStream);\n    }\n\n    if (this.isInitiator) {\n      this.debug.log(`\uD83D\uDE80 INITIATOR: Creating data channel for ${this.peerId.substring(0, 8)}... (WE are initiator)`);\n      this.dataChannel = this.connection.createDataChannel('messages', {\n        ordered: true\n      });\n      this.setupDataChannel();\n    } else {\n      this.debug.log(`\uD83D\uDC65 RECEIVER: Waiting for data channel from ${this.peerId.substring(0, 8)}... (THEY are initiator)`);\n      this.connection.ondatachannel = (event) => {\n        this.debug.log(`\uD83D\uDCE8 RECEIVED: Data channel received from ${this.peerId.substring(0, 8)}...`);\n        this.dataChannel = event.channel;\n        this.setupDataChannel();\n      };\n    }\n  }\n\n  setupConnectionHandlers() {\n    this.connection.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.debug.log(`\uD83E\uDDCA Generated ICE candidate for ${this.peerId.substring(0, 8)}...`, {\n          type: event.candidate.type,\n          protocol: event.candidate.protocol,\n          address: event.candidate.address?.substring(0, 10) + '...' || 'unknown'\n        });\n        this.emit('iceCandidate', { peerId: this.peerId, candidate: event.candidate });\n      } else {\n        this.debug.log(`\uD83E\uDDCA ICE gathering complete for ${this.peerId.substring(0, 8)}...`);\n      }\n    };\n\n    // Handle remote media streams\n    this.connection.ontrack = (event) => {\n      this.debug.log('\uD83C\uDFB5 Received remote media stream from', this.peerId);\n      const stream = event.streams[0];\n      const track = event.track;\n\n      this.debug.log(`\uD83C\uDFB5 Track received: kind=${track.kind}, id=${track.id}, enabled=${track.enabled}, readyState=${track.readyState}`);\n\n      // CRITICAL: Enhanced loopback detection and stream validation\n      this.debug.log('\uD83D\uDD0D ONTRACK DEBUG: Starting stream validation...');\n      if (!this.validateRemoteStream(stream, track)) {\n        this.debug.error('\u274C ONTRACK DEBUG: Stream validation FAILED - rejecting remote stream');\n        return; // Don't process invalid or looped back streams\n      }\n      this.debug.log('\u2705 ONTRACK DEBUG: Stream validation PASSED - processing remote stream');\n\n      if (stream) {\n        this.remoteStream = stream;\n        const audioTracks = stream.getAudioTracks();\n        const videoTracks = stream.getVideoTracks();\n\n        this.debug.log(`\uD83C\uDFB5 Remote stream tracks: ${audioTracks.length} audio, ${videoTracks.length} video`);\n        this.debug.log(`\uD83C\uDFB5 Remote stream ID: ${stream.id} (vs local: ${this.localStream?.id || 'none'})`);\n\n        // Mark stream as genuinely remote to prevent future confusion\n        this.markStreamAsRemote(stream);\n\n        audioTracks.forEach((audioTrack, index) => {\n          this.debug.log(`\uD83C\uDFB5 Audio track ${index}: enabled=${audioTrack.enabled}, readyState=${audioTrack.readyState}, muted=${audioTrack.muted}, id=${audioTrack.id}`);\n\n          // Add audio data monitoring\n          this.setupAudioDataMonitoring(audioTrack, index);\n        });\n\n        this.debug.log('\uD83D\uDEA8 ONTRACK DEBUG: About to emit remoteStream event');\n        \n        // Check if remote streams are allowed (crypto gating)\n        if (this.allowRemoteStreams) {\n          this.emit('remoteStream', { peerId: this.peerId, stream: this.remoteStream });\n          this.debug.log('\u2705 ONTRACK DEBUG: remoteStream event emitted successfully');\n        } else {\n          // Buffer the stream until crypto allows it\n          this.debug.log('\uD83D\uDD12 ONTRACK DEBUG: Buffering remote stream until crypto verification');\n          this.pendingRemoteStreams.push({ peerId: this.peerId, stream: this.remoteStream });\n        }\n      } else {\n        this.debug.error('\u274C ONTRACK DEBUG: No stream in ontrack event - this should not happen');\n      }\n    };\n\n    this.connection.onconnectionstatechange = () => {\n      this.debug.log(`\uD83D\uDD17 Connection state with ${this.peerId}: ${this.connection.connectionState} (previous signaling: ${this.connection.signalingState})`);\n\n      // Log additional context about transceivers and media with Node.js compatibility\n      try {\n        const transceivers = this.connection.getTransceivers();\n        const audioSending = this.audioTransceiver && this.audioTransceiver.sender && this.audioTransceiver.sender.track;\n        const videoSending = this.videoTransceiver && this.videoTransceiver.sender && this.videoTransceiver.sender.track;\n        this.debug.log(`\uD83D\uDD17 Media context: Audio sending=${!!audioSending}, Video sending=${!!videoSending}, Transceivers=${transceivers.length}`);\n      } catch (error) {\n        // Handle Node.js WebRTC compatibility issues\n        this.debug.log(`\uD83D\uDD17 Media context: Unable to access transceiver details (${error.message})`);\n      }\n\n      if (this.connection.connectionState === 'connected') {\n        this.debug.log(`\u2705 Connection established with ${this.peerId}`);\n        this.emit('connected', { peerId: this.peerId });\n      } else if (this.connection.connectionState === 'connecting') {\n        this.debug.log(`\uD83D\uDD04 Connection to ${this.peerId} is connecting...`);\n      } else if (this.connection.connectionState === 'disconnected') {\n        // Give WebRTC more time to recover - it's common for connections to briefly disconnect during renegotiation\n        this.debug.log(`\u26A0\uFE0F WebRTC connection disconnected for ${this.peerId}, waiting for potential recovery...`);\n        \n        // Longer recovery time for disconnected state when there are multiple peers (3+)\n        // This helps prevent cascade failures when multiple renegotiations happen\n        const recoveryTime = 12000; // 12 seconds for disconnected state recovery\n        \n        setTimeout(() => {\n          if (this.connection &&\n                        this.connection.connectionState === 'disconnected' &&\n                        !this.isClosing) {\n            this.debug.log(`\u274C WebRTC connection remained disconnected for ${this.peerId} after ${recoveryTime}ms, treating as failed`);\n            this.emit('disconnected', { peerId: this.peerId, reason: 'connection disconnected' });\n          }\n        }, recoveryTime);\n      } else if (this.connection.connectionState === 'failed') {\n        if (!this.isClosing) {\n          this.debug.log(`\u274C Connection failed for ${this.peerId}`);\n          this.emit('disconnected', { peerId: this.peerId, reason: 'connection failed' });\n        }\n      } else if (this.connection.connectionState === 'closed') {\n        if (!this.isClosing) {\n          this.debug.log(`\u274C Connection closed for ${this.peerId}`);\n          this.emit('disconnected', { peerId: this.peerId, reason: 'connection closed' });\n        }\n      }\n    };\n\n    this.connection.oniceconnectionstatechange = () => {\n      this.debug.log(`\uD83E\uDDCA ICE connection state with ${this.peerId}: ${this.connection.iceConnectionState}`);\n\n      if (this.connection.iceConnectionState === 'connected') {\n        this.debug.log(`\u2705 ICE connection established with ${this.peerId}`);\n        // Clear any existing ICE timeout\n        if (this.iceTimeoutId) {\n          clearTimeout(this.iceTimeoutId);\n          this.iceTimeoutId = null;\n        }\n      } else if (this.connection.iceConnectionState === 'checking') {\n        this.debug.log(`\uD83D\uDD04 ICE checking for ${this.peerId}...`);\n        \n        // Set a timeout for ICE negotiation to prevent hanging\n        if (this.iceTimeoutId) {\n          clearTimeout(this.iceTimeoutId);\n        }\n        this.iceTimeoutId = setTimeout(() => {\n          if (this.connection && this.connection.iceConnectionState === 'checking' && !this.isClosing) {\n            this.debug.error(`\u274C ICE negotiation timeout for ${this.peerId} - connection stuck in checking state`);\n            this.emit('disconnected', { peerId: this.peerId, reason: 'ICE negotiation timeout' });\n          }\n        }, 30000); // 30 second timeout for ICE negotiation\n      } else if (this.connection.iceConnectionState === 'failed') {\n        // Check if signaling is available before attempting ICE restart\n        const hasSignaling = this.mesh && this.mesh.signalingClient && this.mesh.signalingClient.isConnected();\n        const hasMeshConnectivity = this.mesh && this.mesh.connected && this.mesh.connectionManager.getConnectedPeerCount() > 0;\n\n        if (hasSignaling || hasMeshConnectivity) {\n          this.debug.log(`\u274C ICE connection failed for ${this.peerId}, attempting restart (signaling: ${hasSignaling}, mesh: ${hasMeshConnectivity})`);\n          try {\n            // For ICE restart, we need to coordinate new ICE candidates through signaling\n            this.restartIceViaSignaling().catch(error => {\n              this.debug.error('Failed to restart ICE after failure:', error);\n              this.emit('disconnected', { peerId: this.peerId, reason: 'ICE failed' });\n            });\n          } catch (error) {\n            this.debug.error('Failed to restart ICE after failure:', error);\n            this.emit('disconnected', { peerId: this.peerId, reason: 'ICE failed' });\n          }\n        } else {\n          this.debug.log(`\u274C ICE connection failed for ${this.peerId}, disconnecting`);\n          this.emit('disconnected', { peerId: this.peerId, reason: 'ICE failed' });\n        }\n      } else if (this.connection.iceConnectionState === 'disconnected') {\n        // Give more time for ICE reconnection - this is common during renegotiation\n        this.debug.log(`\u26A0\uFE0F ICE connection disconnected for ${this.peerId}, waiting for potential reconnection...`);\n        setTimeout(() => {\n          if (this.connection &&\n                        this.connection.iceConnectionState === 'disconnected' &&\n                        !this.isClosing) {\n            // Check if signaling is available before attempting ICE restart\n            const hasSignaling = this.mesh && this.mesh.signalingClient && this.mesh.signalingClient.isConnected();\n            const hasMeshConnectivity = this.mesh && this.mesh.connected && this.mesh.connectionManager.getConnectedPeerCount() > 0;\n\n            if (hasSignaling || hasMeshConnectivity) {\n              this.debug.log(`\u274C ICE remained disconnected for ${this.peerId}, attempting restart (signaling: ${hasSignaling}, mesh: ${hasMeshConnectivity})`);\n              try {\n                this.restartIceViaSignaling().catch(error => {\n                  this.debug.error('Failed to restart ICE after disconnection:', error);\n                  this.emit('disconnected', { peerId: this.peerId, reason: 'ICE disconnected' });\n                });\n              } catch (error) {\n                this.debug.error('Failed to restart ICE after disconnection:', error);\n                this.emit('disconnected', { peerId: this.peerId, reason: 'ICE disconnected' });\n              }\n            } else {\n              this.debug.log(`\u274C ICE remained disconnected for ${this.peerId}, disconnecting`);\n              this.emit('disconnected', { peerId: this.peerId, reason: 'ICE disconnected' });\n            }\n          }\n        }, 5000); // Faster ICE reconnection - 5 seconds\n      }\n    };\n\n    // Handle renegotiation when tracks are added/removed\n    this.connection.onnegotiationneeded = () => {\n      this.debug.log(`\uD83D\uDD04 Negotiation needed for ${this.peerId} (WebRTC detected track changes)`);\n      // CRITICAL: Renegotiation IS needed when tracks are added/replaced, even with pre-allocated transceivers\n      // Pre-allocated transceivers only avoid m-line changes, but SDP still needs to be renegotiated\n      this.debug.log('\u2705 RENEGOTIATION: Track changes detected - triggering renegotiation as expected');\n\n      // Log debug info about current transceivers (with error handling for Node.js WebRTC)\n      try {\n        const transceivers = this.connection.getTransceivers();\n        this.debug.log('\uD83D\uDD04 Transceivers state during renegotiation:', transceivers.map(t => ({\n          kind: t.receiver?.track?.kind || 'unknown',\n          direction: t.direction,\n          hasTrack: !!t.sender?.track,\n          mid: t.mid\n        })));\n      } catch (error) {\n        this.debug.log('\uD83D\uDD04 Cannot inspect transceivers (Node.js WebRTC limitation):', error.message);\n      }\n\n      // Emit renegotiation needed event to trigger SDP exchange\n      this.emit('renegotiationNeeded', { peerId: this.peerId });\n    };\n\n    // CRITICAL FIX: Handle track changes manually after renegotiation\n    // Since we use replaceTrack() with pre-allocated transceivers, ontrack events don't fire\n    // We need to monitor transceivers for new tracks after SDP exchanges\n    this.connection.onsignalingstatechange = () => {\n      this.debug.log(`\uD83D\uDD04 Signaling state changed for ${this.peerId}: ${this.connection.signalingState}`);\n\n      // When signaling becomes stable after renegotiation, check for new remote tracks\n      if (this.connection.signalingState === 'stable') {\n        this.debug.log('\uD83D\uDD0D Signaling stable - checking for new remote tracks...');\n        this.checkForNewRemoteTracks();\n      }\n    };\n  }\n\n  setupDataChannel() {\n    this.dataChannel.onopen = () => {\n      this.debug.log(`Data channel opened with ${this.peerId}`);\n      this.dataChannelReady = true;\n      this.emit('dataChannelOpen', { peerId: this.peerId });\n    };\n\n    this.dataChannel.onclose = () => {\n      this.debug.log(`Data channel closed with ${this.peerId}`);\n      this.dataChannelReady = false;\n\n      // Only emit disconnection if we're not intentionally closing\n      if (!this.isClosing) {\n        this.emit('disconnected', { peerId: this.peerId, reason: 'data channel closed' });\n      }\n    };\n\n    this.dataChannel.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        this.emit('message', { peerId: this.peerId, message });\n      } catch (error) {\n        this.debug.error('Failed to parse message:', error);\n        this.emit('message', { peerId: this.peerId, message: { content: event.data } });\n      }\n    };\n\n    this.dataChannel.onerror = (error) => {\n      this.debug.error(`Data channel error with ${this.peerId}:`, error);\n      this.dataChannelReady = false;\n\n      // Only emit disconnection if we're not intentionally closing\n      if (!this.isClosing) {\n        this.emit('disconnected', { peerId: this.peerId, reason: 'data channel error' });\n      }\n    };\n  }\n\n  // CRITICAL: Check and force data channel state after answer processing\n  checkDataChannelState() {\n    if (this.dataChannel) {\n      this.debug.log(`\uD83D\uDD0D DATA CHANNEL CHECK: State for ${this.peerId.substring(0, 8)}... is ${this.dataChannel.readyState}`);\n      \n      // If data channel is open but we haven't triggered the open event yet\n      if (this.dataChannel.readyState === 'open' && !this.dataChannelReady) {\n        this.debug.log(`\uD83D\uDE80 FORCE OPEN: Triggering data channel open for ${this.peerId.substring(0, 8)}...`);\n        this.dataChannelReady = true;\n        this.emit('dataChannelOpen', { peerId: this.peerId });\n      }\n      // If data channel is connecting, set up a check in case the event doesn't fire\n      else if (this.dataChannel.readyState === 'connecting') {\n        this.debug.log(`\u23F3 CONNECTING: Data channel connecting for ${this.peerId.substring(0, 8)}..., setting up backup check`);\n        setTimeout(() => {\n          if (this.dataChannel && this.dataChannel.readyState === 'open' && !this.dataChannelReady) {\n            this.debug.log(`\uD83D\uDE80 BACKUP OPEN: Backup trigger for data channel open for ${this.peerId.substring(0, 8)}...`);\n            this.dataChannelReady = true;\n            this.emit('dataChannelOpen', { peerId: this.peerId });\n          }\n        }, 100); // Short delay to allow normal event to fire first\n      } else {\n        this.debug.log(`\u274C DATA CHANNEL CHECK: No data channel found for ${this.peerId.substring(0, 8)}...`);\n      }\n    }\n  }\n\n  async createOffer() {\n    // Create offer with optimized settings for faster connection and timeout protection\n    try {\n      const offer = await Promise.race([\n        this.connection.createOffer({\n          offerToReceiveAudio: true,\n          offerToReceiveVideo: true,\n          iceRestart: false // Don't restart ICE unless necessary\n        }),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('createOffer timeout')), 10000)\n        )\n      ]);\n      \n      await Promise.race([\n        this.connection.setLocalDescription(offer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('setLocalDescription timeout')), 10000)\n        )\n      ]);\n      \n      return offer;\n    } catch (error) {\n      this.debug.error(`\u274C Failed to create offer for ${this.peerId}:`, error);\n      throw error;\n    }\n  }\n\n  async handleOffer(offer) {\n    // Validate offer data structure\n    if (!offer || typeof offer !== 'object') {\n      this.debug.error(`Invalid offer from ${this.peerId} - not an object:`, offer);\n      throw new Error('Invalid offer: not an object');\n    }\n\n    if (!offer.type || offer.type !== 'offer') {\n      this.debug.error(`Invalid offer from ${this.peerId} - wrong type:`, offer.type);\n      throw new Error(`Invalid offer: expected type 'offer', got '${offer.type}'`);\n    }\n\n    if (!offer.sdp || typeof offer.sdp !== 'string') {\n      this.debug.error(`Invalid offer from ${this.peerId} - missing or invalid SDP:`, typeof offer.sdp);\n      throw new Error('Invalid offer: missing or invalid SDP');\n    }\n\n    // Basic SDP validation\n    if (offer.sdp.length < 10 || !offer.sdp.includes('v=0')) {\n      this.debug.error(`Invalid offer SDP from ${this.peerId} - malformed:`, offer.sdp.substring(0, 100) + '...');\n      throw new Error('Invalid offer: malformed SDP');\n    }\n\n    // ENHANCED DEBUGGING: Log detailed state before processing offer\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: Processing offer from ${this.peerId.substring(0, 8)}...`);\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: Current signaling state: ${this.connection.signalingState}`);\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: Current connection state: ${this.connection.connectionState}`);\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: Current ICE state: ${this.connection.iceConnectionState}`);\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: Offer SDP length: ${offer.sdp.length}`);\n\n    // Check if we're in the right state to handle an offer\n    if (this.connection.signalingState !== 'stable') {\n      this.debug.log(`\u274C OFFER DEBUG: Cannot handle offer from ${this.peerId} - connection state is ${this.connection.signalingState} (expected: stable)`);\n      throw new Error(`Cannot handle offer in state: ${this.connection.signalingState}`);\n    }\n\n    this.debug.log(`\uD83D\uDD04 OFFER DEBUG: State validation passed, processing offer from ${this.peerId.substring(0, 8)}... SDP length: ${offer.sdp.length}`);\n\n    try {\n      await Promise.race([\n        this.connection.setRemoteDescription(offer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('setRemoteDescription timeout')), 10000)\n        )\n      ]);\n      \n      this.remoteDescriptionSet = true;\n      this.debug.log(`\u2705 OFFER DEBUG: Offer processed successfully from ${this.peerId.substring(0, 8)}...`);\n      this.debug.log(`\u2705 OFFER DEBUG: New signaling state after offer: ${this.connection.signalingState}`);\n      await this.processPendingIceCandidates();\n\n      const answer = await Promise.race([\n        this.connection.createAnswer(),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('createAnswer timeout')), 10000)\n        )\n      ]);\n      \n      await Promise.race([\n        this.connection.setLocalDescription(answer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('setLocalDescription timeout')), 10000)\n        )\n      ]);\n      \n      this.debug.log(`\u2705 OFFER DEBUG: Answer created for offer from ${this.peerId.substring(0, 8)}...`);\n      this.debug.log(`\u2705 OFFER DEBUG: Final signaling state after answer: ${this.connection.signalingState}`);\n      \n      // CRITICAL: Force check data channel state after offer/answer processing\n      this.checkDataChannelState();\n      \n      return answer;\n    } catch (error) {\n      this.debug.error(`\u274C OFFER DEBUG: Failed to process offer from ${this.peerId}:`, error);\n      this.debug.error('OFFER DEBUG: Offer SDP that failed:', offer.sdp);\n      this.debug.error('OFFER DEBUG: Current connection state:', this.connection.signalingState);\n      this.debug.error('OFFER DEBUG: Current ICE state:', this.connection.iceConnectionState);\n      throw error;\n    }\n  }\n\n  async handleAnswer(answer) {\n    // Validate answer data structure\n    if (!answer || typeof answer !== 'object') {\n      this.debug.error(`Invalid answer from ${this.peerId} - not an object:`, answer);\n      throw new Error('Invalid answer: not an object');\n    }\n\n    if (!answer.type || answer.type !== 'answer') {\n      this.debug.error(`Invalid answer from ${this.peerId} - wrong type:`, answer.type);\n      throw new Error(`Invalid answer: expected type 'answer', got '${answer.type}'`);\n    }\n\n    if (!answer.sdp || typeof answer.sdp !== 'string') {\n      this.debug.error(`Invalid answer from ${this.peerId} - missing or invalid SDP:`, typeof answer.sdp);\n      throw new Error('Invalid answer: missing or invalid SDP');\n    }\n\n    // Basic SDP validation\n    if (answer.sdp.length < 10 || !answer.sdp.includes('v=0')) {\n      this.debug.error(`Invalid answer SDP from ${this.peerId} - malformed:`, answer.sdp.substring(0, 100) + '...');\n      throw new Error('Invalid answer: malformed SDP');\n    }\n\n    // ENHANCED DEBUGGING: Log detailed state before processing answer\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: Processing answer from ${this.peerId.substring(0, 8)}...`);\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: Current signaling state: ${this.connection.signalingState}`);\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: Current connection state: ${this.connection.connectionState}`);\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: Current ICE state: ${this.connection.iceConnectionState}`);\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: Answer SDP length: ${answer.sdp.length}`);\n\n    // Check if we're in the right state to handle an answer\n    if (this.connection.signalingState !== 'have-local-offer') {\n      this.debug.log(`\u274C ANSWER DEBUG: Cannot handle answer from ${this.peerId} - connection state is ${this.connection.signalingState} (expected: have-local-offer)`);\n\n      // If we're already stable, the connection might already be established\n      if (this.connection.signalingState === 'stable') {\n        this.debug.log('\u2705 ANSWER DEBUG: Connection already stable, answer not needed');\n        return;\n      }\n\n      throw new Error(`Cannot handle answer in state: ${this.connection.signalingState}`);\n    }\n\n    this.debug.log(`\uD83D\uDD04 ANSWER DEBUG: State validation passed, processing answer from ${this.peerId.substring(0, 8)}... SDP length: ${answer.sdp.length}`);\n\n    try {\n      await Promise.race([\n        this.connection.setRemoteDescription(answer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('setRemoteDescription timeout')), 10000)\n        )\n      ]);\n      \n      this.remoteDescriptionSet = true;\n      this.debug.log(`\u2705 ANSWER DEBUG: Answer processed successfully from ${this.peerId.substring(0, 8)}...`);\n      this.debug.log(`\u2705 ANSWER DEBUG: New signaling state: ${this.connection.signalingState}`);\n      this.debug.log(`\u2705 ANSWER DEBUG: New connection state: ${this.connection.connectionState}`);\n      await this.processPendingIceCandidates();\n      \n      // CRITICAL: Force check data channel state after answer processing\n      this.checkDataChannelState();\n    } catch (error) {\n      this.debug.error(`\u274C ANSWER DEBUG: Failed to set remote description for answer from ${this.peerId}:`, error);\n      this.debug.error('ANSWER DEBUG: Answer SDP that failed:', answer.sdp);\n      this.debug.error('ANSWER DEBUG: Current connection state:', this.connection.signalingState);\n      this.debug.error('ANSWER DEBUG: Current ICE state:', this.connection.iceConnectionState);\n      throw error;\n    }\n  }\n\n  async handleIceCandidate(candidate) {\n    // Validate ICE candidate data structure\n    if (!candidate || typeof candidate !== 'object') {\n      this.debug.error(`Invalid ICE candidate from ${this.peerId} - not an object:`, candidate);\n      throw new Error('Invalid ICE candidate: not an object');\n    }\n\n    // Basic ICE candidate validation\n    if (!candidate.candidate || typeof candidate.candidate !== 'string') {\n      this.debug.error(`Invalid ICE candidate from ${this.peerId} - missing candidate string:`, candidate);\n      throw new Error('Invalid ICE candidate: missing candidate string');\n    }\n\n    this.debug.log(`\uD83E\uDDCA Received ICE candidate for ${this.peerId.substring(0, 8)}...`, {\n      type: candidate.type,\n      protocol: candidate.protocol,\n      candidateLength: candidate.candidate?.length || 0\n    });\n\n    if (!this.remoteDescriptionSet) {\n      this.debug.log(`\uD83E\uDDCA Buffering ICE candidate for ${this.peerId.substring(0, 8)}... (remote description not set yet)`);\n      this.pendingIceCandidates.push(candidate);\n      return;\n    }\n\n    try {\n      await Promise.race([\n        this.connection.addIceCandidate(candidate),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('addIceCandidate timeout')), 5000)\n        )\n      ]);\n      this.debug.log(`\uD83E\uDDCA Successfully added ICE candidate for ${this.peerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`\uD83E\uDDCA Failed to add ICE candidate for ${this.peerId.substring(0, 8)}...:`, error);\n      this.debug.error('ICE candidate that failed:', candidate);\n      this.debug.error('Current connection state:', this.connection.connectionState);\n      this.debug.error('Current ICE state:', this.connection.iceConnectionState);\n      // Don't rethrow - ICE candidate failures are often recoverable\n    }\n  }\n\n  async processPendingIceCandidates() {\n    if (this.pendingIceCandidates.length > 0) {\n      this.debug.log(`\uD83E\uDDCA Processing ${this.pendingIceCandidates.length} buffered ICE candidates for ${this.peerId.substring(0, 8)}...`);\n\n      for (const candidate of this.pendingIceCandidates) {\n        try {\n          await Promise.race([\n            this.connection.addIceCandidate(candidate),\n            new Promise((resolve, reject) => \n              setTimeout(() => reject(new Error('addIceCandidate timeout')), 5000)\n            )\n          ]);\n          this.debug.log(`\uD83E\uDDCA Successfully added buffered ICE candidate (${candidate.type}) for ${this.peerId.substring(0, 8)}...`);\n        } catch (error) {\n          this.debug.error(`\uD83E\uDDCA Failed to add buffered ICE candidate for ${this.peerId.substring(0, 8)}...:`, error);\n        }\n      }\n\n      this.pendingIceCandidates = [];\n      this.debug.log(`\uD83E\uDDCA Finished processing buffered ICE candidates for ${this.peerId.substring(0, 8)}...`);\n    }\n  }\n\n  sendMessage(message) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(message));\n        return true;\n      } catch (error) {\n        this.debug.error(`Failed to send message to ${this.peerId}:`, error);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * CRITICAL FIX: Manually check for new remote tracks after renegotiation\n   * This is needed because replaceTrack() doesn't trigger ontrack events\n   */\n  checkForNewRemoteTracks() {\n    this.debug.log(`\uD83D\uDD0D TRACK CHECK: Checking transceivers for new remote tracks from ${this.peerId.substring(0, 8)}...`);\n\n    try {\n      const transceivers = this.connection.getTransceivers();\n      let foundNewTracks = false;\n\n      transceivers.forEach((transceiver, index) => {\n        const track = transceiver.receiver.track;\n        if (track && track.readyState === 'live') {\n          this.debug.log(`\uD83D\uDD0D TRACK CHECK: Transceiver ${index} has live ${track.kind} track: ${track.id.substring(0, 8)}...`);\n\n          // Check if this is a new track we haven't processed\n          const isNewTrack = !this.processedTrackIds || !this.processedTrackIds.has(track.id);\n\n          if (isNewTrack) {\n            this.debug.log(`\uD83C\uDFB5 NEW TRACK FOUND: Processing new ${track.kind} track from ${this.peerId.substring(0, 8)}...`);\n\n            // Create a stream from this track (simulate ontrack event)\n            const stream = new MediaStream([track]);\n\n            // Validate and process like ontrack would\n            if (this.validateRemoteStream(stream, track)) {\n              this.remoteStream = stream;\n              this.markStreamAsRemote(stream);\n\n              // Track that we've processed this track\n              if (!this.processedTrackIds) this.processedTrackIds = new Set();\n              this.processedTrackIds.add(track.id);\n\n              this.debug.log('\uD83D\uDEA8 TRACK CHECK: Emitting remoteStream event for new track');\n              \n              // Check if remote streams are allowed (crypto gating)\n              if (this.allowRemoteStreams) {\n                this.emit('remoteStream', { peerId: this.peerId, stream: this.remoteStream });\n              } else {\n                // Buffer the stream until crypto allows it\n                this.debug.log('\uD83D\uDD12 TRACK CHECK: Buffering remote stream until crypto verification');\n                this.pendingRemoteStreams.push({ peerId: this.peerId, stream: this.remoteStream });\n              }\n              \n              foundNewTracks = true;\n            }\n          }\n        }\n      });\n\n      if (!foundNewTracks) {\n        this.debug.log('\uD83D\uDD0D TRACK CHECK: No new remote tracks found');\n      }\n    } catch (error) {\n      this.debug.error('\u274C TRACK CHECK: Failed to check for remote tracks:', error);\n    }\n  }\n\n  /**\n     * Enhanced validation to ensure received stream is genuinely remote\n     */\n  validateRemoteStream(stream, track) {\n    this.debug.log('\uD83D\uDD0D VALIDATION: Starting remote stream validation...');\n\n    // Check 0: Ensure stream and track are valid\n    if (!stream) {\n      this.debug.error('\u274C VALIDATION: Stream is null or undefined');\n      return false;\n    }\n    if (!track) {\n      this.debug.error('\u274C VALIDATION: Track is null or undefined');\n      return false;\n    }\n\n    // Check 1: Stream ID collision (basic loopback detection)\n    if (this.localStream && stream.id === this.localStream.id) {\n      this.debug.error('\u274C LOOPBACK DETECTED: Received our own local stream as remote!');\n      this.debug.error('Local stream ID:', this.localStream.id);\n      this.debug.error('Received stream ID:', stream.id);\n      return false;\n    }\n    this.debug.log('\u2705 VALIDATION: Stream ID check passed');\n\n    // Check 2: Track ID collision (more granular loopback detection)\n    if (this.localStream) {\n      const localTracks = this.localStream.getTracks();\n      const isOwnTrack = localTracks.some(localTrack => localTrack.id === track.id);\n      if (isOwnTrack) {\n        this.debug.error('\u274C TRACK LOOPBACK: This track is our own local track!');\n        this.debug.error('Local track ID:', track.id);\n        return false;\n      }\n    }\n    this.debug.log('\u2705 VALIDATION: Track ID check passed');\n\n    // Check 3: Verify track comes from remote peer transceiver\n    if (this.connection) {\n      const transceivers = this.connection.getTransceivers();\n      this.debug.log(`\uD83D\uDD0D VALIDATION: Checking ${transceivers.length} transceivers for track ${track.id.substring(0, 8)}...`);\n\n      const sourceTransceiver = transceivers.find(t => t.receiver.track === track);\n      if (!sourceTransceiver) {\n        this.debug.warn('\u26A0\uFE0F VALIDATION: Track not found in any transceiver - may be invalid');\n        this.debug.warn('Available transceivers:', transceivers.map(t => ({\n          kind: t.receiver?.track?.kind || 'no-track',\n          direction: t.direction,\n          trackId: t.receiver?.track?.id?.substring(0, 8) || 'none'\n        })));\n        // TEMPORARY FIX: Don't reject just because transceiver lookup fails\n        // return false;\n        this.debug.log('\u26A0\uFE0F VALIDATION: Allowing track despite transceiver lookup failure (temporary fix)');\n      } else {\n        // Ensure this is a receiving transceiver (not sending our own track back)\n        if (sourceTransceiver.direction === 'sendonly') {\n          this.debug.error('\u274C Invalid direction: Receiving track from sendonly transceiver');\n          return false;\n        }\n        this.debug.log(`\u2705 VALIDATION: Transceiver check passed (direction: ${sourceTransceiver.direction})`);\n      }\n    }\n\n    // Check 4: Verify stream hasn't been marked as local origin (with safe property access)\n    if (stream && stream._peerPigeonOrigin === 'local') {\n      this.debug.error('\u274C Stream marked as local origin - preventing synchronization loop');\n      return false;\n    }\n    this.debug.log('\u2705 VALIDATION: Local origin check passed');\n\n    this.debug.log('\u2705 Remote stream validation passed for peer', this.peerId.substring(0, 8));\n    return true;\n  }\n\n  /**\n     * Mark a stream as genuinely remote to prevent future confusion\n     */\n  markStreamAsRemote(stream) {\n    // Add internal marker to prevent future misidentification\n    Object.defineProperty(stream, '_peerPigeonOrigin', {\n      value: 'remote',\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    Object.defineProperty(stream, '_peerPigeonSourcePeerId', {\n      value: this.peerId,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    this.debug.log(`\uD83D\uDD12 Stream ${stream.id} marked as remote from peer ${this.peerId.substring(0, 8)}`);\n  }\n\n  /**\n     * Mark local stream to prevent it from being treated as remote\n     */\n  markStreamAsLocal(stream) {\n    if (!stream) return;\n\n    Object.defineProperty(stream, '_peerPigeonOrigin', {\n      value: 'local',\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    this.debug.log(`\uD83D\uDD12 Stream ${stream.id} marked as local origin`);\n  }\n\n  /**\n   * Add local stream using addTrack() method to trigger ontrack events\n   */\n  async addLocalStreamWithAddTrack(stream) {\n    if (!stream || !this.connection) return;\n\n    this.debug.log('\uD83C\uDFA5 Adding local stream using addTrack() for proper ontrack events');\n\n    const audioTracks = stream.getAudioTracks();\n    const videoTracks = stream.getVideoTracks();\n\n    // Mark stream as local origin to prevent loopback\n    this.markStreamAsLocal(stream);\n\n    // Add audio tracks using addTrack()\n    audioTracks.forEach((audioTrack, index) => {\n      this.debug.log(`\uD83C\uDFA4 Adding audio track ${index} using addTrack()`);\n      try {\n        const audioSender = this.connection.addTrack(audioTrack, stream);\n        this.audioTransceiver = this.connection.getTransceivers().find(t => t.sender === audioSender);\n        \n        // Setup audio sending monitoring\n        this.setupAudioSendingMonitoring(audioTrack);\n        this.debug.log(`\uD83C\uDFA4 SENDING AUDIO to peer ${this.peerId.substring(0, 8)} - track enabled: ${audioTrack.enabled}`);\n      } catch (error) {\n        this.debug.error(`\u274C Failed to add audio track ${index}:`, error);\n      }\n    });\n\n    // Add video tracks using addTrack()\n    videoTracks.forEach((videoTrack, index) => {\n      this.debug.log(`\uD83C\uDFA5 Adding video track ${index} using addTrack()`);\n      try {\n        const videoSender = this.connection.addTrack(videoTrack, stream);\n        this.videoTransceiver = this.connection.getTransceivers().find(t => t.sender === videoSender);\n        this.debug.log(`\uD83C\uDFA5 SENDING VIDEO to peer ${this.peerId.substring(0, 8)} - track enabled: ${videoTrack.enabled}`);\n      } catch (error) {\n        this.debug.error(`\u274C Failed to add video track ${index}:`, error);\n      }\n    });\n\n    this.localStream = stream;\n    this.debug.log('\u2705 Local stream added using addTrack() method');\n    \n    // DEBUG: Log transceivers after adding tracks\n    const transceivers = this.connection.getTransceivers();\n    this.debug.log('\uD83D\uDD0D Transceivers after addTrack():', transceivers.map(t => ({\n      kind: t.receiver?.track?.kind || 'unknown',\n      direction: t.direction,\n      hasTrack: !!t.sender?.track,\n      trackId: t.sender?.track?.id?.substring(0, 8) || 'none',\n      mid: t.mid\n    })));\n  }\n\n  /**\n     * Add or replace local media stream\n     */\n  async setLocalStream(stream) {\n    if (!this.connection) {\n      throw new Error('Connection not initialized');\n    }\n\n    this.debug.log(`Setting local stream for ${this.peerId}, current state: ${this.connection.connectionState}, signaling: ${this.connection.signalingState}`);\n\n    // First, remove any existing local tracks\n    const senders = this.connection.getSenders();\n    for (const sender of senders) {\n      if (sender.track) {\n        this.debug.log('\uFFFD\uFE0F Removing existing track:', sender.track.kind);\n        this.connection.removeTrack(sender);\n      }\n    }\n\n    // Clear transceiver references\n    this.audioTransceiver = null;\n    this.videoTransceiver = null;\n\n    if (stream) {\n      this.debug.log('\uD83C\uDFA5 Adding new stream using addTrack() method');\n      await this.addLocalStreamWithAddTrack(stream);\n    } else {\n      this.localStream = null;\n      this.debug.log('\u2705 All tracks removed');\n    }\n\n    this.debug.log('Updated local media stream for', this.peerId);\n\n    // CRITICAL: Force renegotiation when media changes\n    this.debug.log('\u2705 Stream updated - forcing renegotiation for media changes');\n    this.debug.log(`   Current state: connectionState=${this.connection.connectionState}, signalingState=${this.connection.signalingState}`);\n\n    // Always trigger renegotiation when stream changes\n    if (stream) {\n      setTimeout(() => {\n        this.debug.log('\uD83D\uDD04 Forcing renegotiation for media stream changes');\n        this.emit('renegotiationNeeded', { peerId: this.peerId });\n      }, 200);\n    }\n  }\n\n  /**\n   * Force connection recovery for stuck connections\n   */\n  async forceConnectionRecovery() {\n    this.debug.log(`\uD83C\uDD98 FORCE RECOVERY: Attempting emergency recovery for ${this.peerId.substring(0, 8)}...`);\n\n    try {\n      // Create a new offer to break the stuck state\n      const offer = await Promise.race([\n        this.connection.createOffer({ iceRestart: true }),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('forceConnectionRecovery createOffer timeout')), 10000)\n        )\n      ]);\n      \n      await Promise.race([\n        this.connection.setLocalDescription(offer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('forceConnectionRecovery setLocalDescription timeout')), 10000)\n        )\n      ]);\n\n      // Emit recovery offer via mesh signaling\n      if (this.mesh && this.mesh.sendSignalingMessage) {\n        await this.mesh.sendSignalingMessage({\n          type: 'recovery-offer',\n          data: offer,\n          emergency: true\n        }, this.peerId);\n\n        this.debug.log(`\u2705 RECOVERY: Emergency offer sent for ${this.peerId.substring(0, 8)}...`);\n      } else {\n        this.debug.error(`\u274C RECOVERY: No mesh signaling available for ${this.peerId.substring(0, 8)}...`);\n      }\n    } catch (error) {\n      this.debug.error(`\u274C RECOVERY: Emergency recovery failed for ${this.peerId.substring(0, 8)}...`, error);\n      throw error;\n    }\n  }\n\n  /**\n     * Setup audio data monitoring for received audio tracks\n     */\n  setupAudioDataMonitoring(audioTrack, trackIndex) {\n    this.debug.log(`\uD83C\uDFB5 Setting up audio data monitoring for track ${trackIndex} from peer ${this.peerId.substring(0, 8)}`);\n\n    try {\n      // Create audio context for analyzing audio data\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      if (!AudioContext) {\n        this.debug.warn('\uD83C\uDFB5 AudioContext not available - cannot monitor audio data');\n        return;\n      }\n\n      // Create a MediaStream with just this audio track for analysis\n      const trackStream = new MediaStream([audioTrack]);\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(trackStream);\n      const analyser = audioContext.createAnalyser();\n\n      analyser.fftSize = 256;\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n\n      source.connect(analyser);\n\n      let lastLogTime = 0;\n      let totalSamples = 0;\n      let samplesWithAudio = 0;\n      let maxLevel = 0;\n\n      // Monitor audio levels periodically\n      const monitorAudio = () => {\n        if (audioTrack.readyState === 'ended') {\n          this.debug.log(`\uD83C\uDFB5 Audio track ${trackIndex} ended, stopping monitoring for peer ${this.peerId.substring(0, 8)}`);\n          audioContext.close();\n          return;\n        }\n\n        analyser.getByteFrequencyData(dataArray);\n\n        // Calculate audio level (0-255)\n        const average = dataArray.reduce((sum, value) => sum + value, 0) / bufferLength;\n        const currentTime = Date.now();\n\n        totalSamples++;\n        if (average > 5) { // Threshold for detecting audio activity\n          samplesWithAudio++;\n          maxLevel = Math.max(maxLevel, average);\n        }\n\n        // Log every 5 seconds\n        if (currentTime - lastLogTime > 5000) {\n          const audioActivity = totalSamples > 0 ? (samplesWithAudio / totalSamples * 100) : 0;\n          this.debug.log(`\uD83C\uDFB5 Audio data from peer ${this.peerId.substring(0, 8)} track ${trackIndex}:`, {\n            enabled: audioTrack.enabled,\n            readyState: audioTrack.readyState,\n            muted: audioTrack.muted,\n            currentLevel: Math.round(average),\n            maxLevel: Math.round(maxLevel),\n            activityPercent: Math.round(audioActivity),\n            samplesAnalyzed: totalSamples,\n            hasAudioData: samplesWithAudio > 0\n          });\n\n          lastLogTime = currentTime;\n          // Reset counters for next period\n          totalSamples = 0;\n          samplesWithAudio = 0;\n          maxLevel = 0;\n        }\n\n        // Continue monitoring if track is still active\n        if (audioTrack.readyState === 'live') {\n          requestAnimationFrame(monitorAudio);\n        }\n      };\n\n      // Start monitoring\n      requestAnimationFrame(monitorAudio);\n\n      // Track state changes\n      audioTrack.addEventListener('ended', () => {\n        this.debug.log(`\uD83C\uDFB5 Audio track ${trackIndex} from peer ${this.peerId.substring(0, 8)} ended`);\n        audioContext.close();\n      });\n\n      audioTrack.addEventListener('mute', () => {\n        this.debug.log(`\uD83C\uDFB5 Audio track ${trackIndex} from peer ${this.peerId.substring(0, 8)} muted`);\n      });\n\n      audioTrack.addEventListener('unmute', () => {\n        this.debug.log(`\uD83C\uDFB5 Audio track ${trackIndex} from peer ${this.peerId.substring(0, 8)} unmuted`);\n      });\n\n      this.debug.log(`\uD83C\uDFB5 Audio monitoring started for track ${trackIndex} from peer ${this.peerId.substring(0, 8)}`);\n    } catch (error) {\n      this.debug.error(`\uD83C\uDFB5 Failed to setup audio monitoring for track ${trackIndex}:`, error);\n    }\n  }\n\n  /**\n     * Setup audio sending monitoring for outgoing audio tracks\n     */\n  setupAudioSendingMonitoring(audioTrack) {\n    this.debug.log(`\uD83C\uDFA4 Setting up audio SENDING monitoring to peer ${this.peerId.substring(0, 8)}`);\n\n    try {\n      // Monitor track state changes\n      audioTrack.addEventListener('ended', () => {\n        this.debug.log(`\uD83C\uDFA4 Audio SENDING track ended to peer ${this.peerId.substring(0, 8)}`);\n      });\n\n      audioTrack.addEventListener('mute', () => {\n        this.debug.log(`\uD83C\uDFA4 Audio SENDING track muted to peer ${this.peerId.substring(0, 8)}`);\n      });\n\n      audioTrack.addEventListener('unmute', () => {\n        this.debug.log(`\uD83C\uDFA4 Audio SENDING track unmuted to peer ${this.peerId.substring(0, 8)}`);\n      });\n\n      // Monitor audio input levels if possible\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      if (!AudioContext) {\n        this.debug.warn('\uD83C\uDFA4 AudioContext not available - basic sending monitoring only');\n        return;\n      }\n\n      const trackStream = new MediaStream([audioTrack]);\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(trackStream);\n      const analyser = audioContext.createAnalyser();\n\n      analyser.fftSize = 256;\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n\n      source.connect(analyser);\n\n      let lastLogTime = 0;\n      let totalSamples = 0;\n      let activeSamples = 0;\n      let maxSendLevel = 0;\n\n      const monitorSending = () => {\n        if (audioTrack.readyState === 'ended') {\n          this.debug.log(`\uD83C\uDFA4 Audio sending track ended, stopping monitoring to peer ${this.peerId.substring(0, 8)}`);\n          audioContext.close();\n          return;\n        }\n\n        analyser.getByteFrequencyData(dataArray);\n\n        const average = dataArray.reduce((sum, value) => sum + value, 0) / bufferLength;\n        const currentTime = Date.now();\n\n        totalSamples++;\n        if (average > 5) {\n          activeSamples++;\n          maxSendLevel = Math.max(maxSendLevel, average);\n        }\n\n        // Log every 5 seconds\n        if (currentTime - lastLogTime > 5000) {\n          const sendingActivity = totalSamples > 0 ? (activeSamples / totalSamples * 100) : 0;\n          this.debug.log(`\uD83C\uDFA4 Audio SENDING to peer ${this.peerId.substring(0, 8)}:`, {\n            trackEnabled: audioTrack.enabled,\n            trackReadyState: audioTrack.readyState,\n            trackMuted: audioTrack.muted,\n            currentSendLevel: Math.round(average),\n            maxSendLevel: Math.round(maxSendLevel),\n            sendingActivityPercent: Math.round(sendingActivity),\n            samplesAnalyzed: totalSamples,\n            audioBeingSent: activeSamples > 0\n          });\n\n          lastLogTime = currentTime;\n          totalSamples = 0;\n          activeSamples = 0;\n          maxSendLevel = 0;\n        }\n\n        if (audioTrack.readyState === 'live') {\n          requestAnimationFrame(monitorSending);\n        }\n      };\n\n      requestAnimationFrame(monitorSending);\n      this.debug.log(`\uD83C\uDFA4 Audio sending monitoring started to peer ${this.peerId.substring(0, 8)}`);\n    } catch (error) {\n      this.debug.error(`\uD83C\uDFA4 Failed to setup audio sending monitoring to peer ${this.peerId.substring(0, 8)}:`, error);\n    }\n  }\n\n  /**\n     * Get remote media stream\n     */\n  getRemoteStream() {\n    return this.remoteStream;\n  }\n\n  /**\n     * Get local media stream\n     */\n  getLocalStream() {\n    return this.localStream;\n  }\n\n  /**\n   * Allow remote streams to be emitted (called after crypto verification)\n   */\n  allowRemoteStreamEmission() {\n    this.debug.log(`\uD83D\uDD13 CRYPTO: Allowing remote stream emission for ${this.peerId.substring(0, 8)}...`);\n    this.allowRemoteStreams = true;\n    \n    // Emit any buffered remote streams\n    while (this.pendingRemoteStreams.length > 0) {\n      const streamEvent = this.pendingRemoteStreams.shift();\n      this.debug.log(`\uD83D\uDD13 CRYPTO: Emitting buffered remote stream from ${streamEvent.peerId.substring(0, 8)}...`);\n      this.emit('remoteStream', streamEvent);\n    }\n  }\n\n  /**\n   * Block remote streams (called when crypto is required but not verified)\n   */\n  blockRemoteStreamEmission() {\n    // Check if crypto blocking is globally disabled (for video tests)\n    if (typeof window !== 'undefined' && window.DISABLE_CRYPTO_BLOCKING) {\n      this.debug.log(`\uD83D\uDD13 CRYPTO: Video test mode - NOT blocking remote stream emission for ${this.peerId.substring(0, 8)}...`);\n      return; // Don't block streams in video test mode\n    }\n    \n    this.debug.log(`\uD83D\uDD12 CRYPTO: Blocking remote stream emission for ${this.peerId.substring(0, 8)}...`);\n    this.allowRemoteStreams = false;\n  }\n\n  /**\n     * Check if connection has video/audio capabilities\n     */\n  getMediaCapabilities() {\n    const capabilities = {\n      hasLocalVideo: false,\n      hasLocalAudio: false,\n      hasRemoteVideo: false,\n      hasRemoteAudio: false\n    };\n\n    if (this.localStream) {\n      capabilities.hasLocalVideo = this.localStream.getVideoTracks().length > 0;\n      capabilities.hasLocalAudio = this.localStream.getAudioTracks().length > 0;\n    }\n\n    if (this.remoteStream) {\n      capabilities.hasRemoteVideo = this.remoteStream.getVideoTracks().length > 0;\n      capabilities.hasRemoteAudio = this.remoteStream.getAudioTracks().length > 0;\n    }\n\n    return capabilities;\n  }\n\n  getStatus() {\n    if (this._forcedStatus) {\n      return this._forcedStatus;\n    }\n    // First check if data channel is closed - this indicates disconnection regardless of WebRTC state\n    if (this.dataChannel && this.dataChannel.readyState === 'closed') {\n      return 'disconnected';\n    }\n\n    // If we have a WebRTC connection, check its state\n    if (this.connection) {\n      const connectionState = this.connection.connectionState;\n\n      if (connectionState === 'connected') {\n        // Connection is established, now check data channel\n        if (this.dataChannel && this.dataChannel.readyState === 'open' && this.dataChannelReady) {\n          return 'connected';\n        } else if (this.dataChannel && this.dataChannel.readyState === 'open') {\n          return 'connected';\n        } else if (this.dataChannel && this.dataChannel.readyState === 'connecting') {\n          return 'channel-connecting';\n        } else {\n          return 'connected';\n        }\n      } else if (connectionState === 'connecting') {\n        // Check data channel state even during connection\n        if (this.dataChannel && this.dataChannel.readyState === 'connecting') {\n          return 'channel-connecting';\n        } else {\n          return 'connecting';\n        }\n      } else if (connectionState === 'new') {\n        return 'connecting'; // Map 'new' to 'connecting' for UI consistency\n      } else {\n        // Failed, disconnected, closed, etc.\n        return connectionState;\n      }\n    }\n\n    // If no connection but we have a data channel (edge case)\n    if (this.dataChannel) {\n      if (this.dataChannel.readyState === 'connecting') {\n        return 'channel-connecting';\n      } else if (this.dataChannel.readyState === 'closed') {\n        return 'disconnected';\n      }\n    }\n\n    // Default state when just created\n    return 'connecting';\n  }\n\n  getDetailedStatus() {\n    const status = {\n      connectionState: this.connection ? this.connection.connectionState : 'no-connection',\n      iceConnectionState: this.connection ? this.connection.iceConnectionState : 'no-connection',\n      dataChannelState: this.dataChannel ? this.dataChannel.readyState : 'no-channel',\n      dataChannelReady: this.dataChannelReady,\n      isClosing: this.isClosing,\n      overallStatus: this.getStatus()\n    };\n\n    // Add media stream information if available\n    if (this.remoteStream || this.localStream) {\n      status.audioTracks = {\n        remote: this.remoteStream ? this.remoteStream.getAudioTracks().length : 0,\n        local: this.localStream ? this.localStream.getAudioTracks().length : 0\n      };\n      status.videoTracks = {\n        remote: this.remoteStream ? this.remoteStream.getVideoTracks().length : 0,\n        local: this.localStream ? this.localStream.getVideoTracks().length : 0\n      };\n    }\n\n    return status;\n  }\n\n  /**\n   * Restart ICE using signaling coordination (WebSocket or mesh)\n   * This allows ICE restart to work even when the signaling server is down\n   * by using the mesh for coordination\n   */\n  async restartIceViaSignaling() {\n    if (!this.connection) {\n      throw new Error('No connection to restart ICE for');\n    }\n\n    this.debug.log(`\uD83D\uDD04 Restarting ICE via signaling for ${this.peerId}`);\n\n    try {\n      // Trigger ICE restart - this will generate new ICE candidates\n      this.connection.restartIce();\n\n      // Create a new offer with the restarted ICE\n      const offer = await Promise.race([\n        this.connection.createOffer({ iceRestart: true }),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart createOffer timeout')), 10000)\n        )\n      ]);\n      \n      await Promise.race([\n        this.connection.setLocalDescription(offer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart setLocalDescription timeout')), 10000)\n        )\n      ]);\n\n      // Send the new offer via our mesh signaling system\n      if (this.mesh && this.mesh.sendSignalingMessage) {\n        await this.mesh.sendSignalingMessage({\n          type: 'ice-restart-offer',\n          data: { offer }\n        }, this.peerId);\n\n        this.debug.log(`\u2705 ICE restart offer sent for ${this.peerId}`);\n      } else {\n        throw new Error('No signaling method available for ICE restart');\n      }\n    } catch (error) {\n      this.debug.error(`Failed to restart ICE for ${this.peerId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle incoming ICE restart offers\n   */\n  async handleIceRestartOffer(offer) {\n    if (!this.connection) {\n      this.debug.error('Cannot handle ICE restart offer - no connection');\n      return;\n    }\n\n    this.debug.log(`\uD83D\uDD04 Handling ICE restart offer from ${this.peerId}`);\n\n    try {\n      await Promise.race([\n        this.connection.setRemoteDescription(offer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart setRemoteDescription timeout')), 10000)\n        )\n      ]);\n      \n      const answer = await Promise.race([\n        this.connection.createAnswer(),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart createAnswer timeout')), 10000)\n        )\n      ]);\n      \n      await Promise.race([\n        this.connection.setLocalDescription(answer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart setLocalDescription timeout')), 10000)\n        )\n      ]);\n\n      // Send the answer back\n      if (this.mesh && this.mesh.sendSignalingMessage) {\n        await this.mesh.sendSignalingMessage({\n          type: 'ice-restart-answer',\n          data: { answer }\n        }, this.peerId);\n\n        this.debug.log(`\u2705 ICE restart answer sent for ${this.peerId}`);\n      }\n    } catch (error) {\n      this.debug.error(`Failed to handle ICE restart offer from ${this.peerId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle incoming ICE restart answers\n   */\n  async handleIceRestartAnswer(answer) {\n    if (!this.connection) {\n      this.debug.error('Cannot handle ICE restart answer - no connection');\n      return;\n    }\n\n    this.debug.log(`\uD83D\uDD04 Handling ICE restart answer from ${this.peerId}`);\n\n    try {\n      await Promise.race([\n        this.connection.setRemoteDescription(answer),\n        new Promise((resolve, reject) => \n          setTimeout(() => reject(new Error('ICE restart setRemoteDescription timeout')), 10000)\n        )\n      ]);\n      this.debug.log(`\u2705 ICE restart completed for ${this.peerId}`);\n    } catch (error) {\n      this.debug.error(`Failed to handle ICE restart answer from ${this.peerId}:`, error);\n      throw error;\n    }\n  }\n\n  close() {\n    // Set flag to prevent disconnection events during intentional close\n    this.isClosing = true;\n\n    // Clear any existing ICE timeout\n    if (this.iceTimeoutId) {\n      clearTimeout(this.iceTimeoutId);\n      this.iceTimeoutId = null;\n    }\n\n    if (this.connection) {\n      this.connection.close();\n    }\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { PeerConnection } from './PeerConnection.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Manages individual peer connections, timeouts, and connection attempts\n */\nexport class ConnectionManager extends EventEmitter {\n  constructor(mesh) {\n    super();\n    this.mesh = mesh;\n    this.debug = DebugLogger.create('ConnectionManager');\n    this.peers = new Map();\n    this.connectionAttempts = new Map();\n    this.pendingIceCandidates = new Map();\n    this.disconnectionInProgress = new Set();\n    this.cleanupInProgress = new Set();\n    this.lastConnectionAttempt = new Map(); // Track last attempt time per peer\n\n    // Renegotiation management to prevent conflicts\n    this.activeRenegotiations = new Set();\n    this.renegotiationQueue = new Map();\n    this.maxConcurrentRenegotiations = 1; // Only allow 1 renegotiation at a time\n\n    // Configuration\n    this.maxConnectionAttempts = 3;\n    this.retryDelay = 500; // Faster retry - 500ms between attempts to same peer\n\n    // Start periodic cleanup of stale peers\n    this.startPeriodicCleanup();\n\n    // Start monitoring for stuck connections\n    this.startStuckConnectionMonitoring();\n    \n    // Set up mesh-level event listeners for crypto-gated media\n    this.setupMeshEventListeners();\n  }\n  \n  /**\n   * Set up event listeners for mesh-level events\n   */\n  setupMeshEventListeners() {\n    // Listen for successful key exchanges to enable media sharing\n    this.mesh.addEventListener('peerKeyAdded', (event) => {\n      this.handlePeerKeyAdded(event.peerId);\n    });\n  }\n  \n  /**\n   * Handle when a peer's crypto key is successfully added\n   * @param {string} peerId - The peer ID whose key was added\n   */\n  async handlePeerKeyAdded(peerId) {\n    this.debug.log(`\uD83D\uDD10 Key added for ${peerId.substring(0, 8)}... - crypto verification complete`);\n    \n    // NOTE: We do NOT automatically enable remote streams here\n    // Media streams (both local and remote) must be manually invoked by the user via the \"Start Media\" button\n    // This ensures complete control over when ANY media streams are allowed\n    this.debug.log(`\uD83D\uDD10 Crypto verified for ${peerId.substring(0, 8)}... - user must manually invoke media to enable streams`);\n  }\n\n  async connectToPeer(targetPeerId) {\n    this.debug.log(`connectToPeer called for ${targetPeerId.substring(0, 8)}...`);\n\n    // Enhanced duplicate connection prevention\n    if (this.peers.has(targetPeerId)) {\n      this.debug.log(`Already connected to ${targetPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    // Check if we're already attempting through PeerDiscovery\n    if (this.mesh.peerDiscovery.isAttemptingConnection(targetPeerId)) {\n      this.debug.log(`Already attempting connection to ${targetPeerId.substring(0, 8)}... via PeerDiscovery`);\n      return;\n    }\n\n    // INITIATOR LOGIC: Use deterministic peer ID comparison to prevent race conditions\n    // Only become initiator if our peer ID is lexicographically greater than target's\n    const shouldBeInitiator = this.mesh.peerId > targetPeerId;\n    if (!shouldBeInitiator) {\n      this.debug.log(`\uD83D\uDD04 INITIATOR LOGIC: Not becoming initiator for ${targetPeerId.substring(0, 8)}... (our ID: ${this.mesh.peerId.substring(0, 8)}... is smaller)`);\n      return; // Let the other peer initiate\n    }\n\n    this.debug.log(`\uD83D\uDD04 INITIATOR LOGIC: Becoming initiator for ${targetPeerId.substring(0, 8)}... (our ID: ${this.mesh.peerId.substring(0, 8)}... is greater)`);\n\n    if (!this.mesh.canAcceptMorePeers()) {\n      this.debug.log(`Cannot connect to ${targetPeerId.substring(0, 8)}... (max peers reached: ${this.mesh.maxPeers})`);\n      return;\n    }\n\n    // Check retry cooldown (only apply after first attempt)\n    const now = Date.now();\n    const attempts = this.connectionAttempts.get(targetPeerId) || 0;\n    if (attempts > 0) {\n      const lastAttempt = this.lastConnectionAttempt.get(targetPeerId) || 0;\n\n      // Use shorter delay for isolated peers to help them connect faster\n      const connectedCount = this.getConnectedPeerCount();\n      const retryDelay = connectedCount === 0 ? 200 : this.retryDelay; // 200ms for isolated peers, 500ms otherwise\n\n      if (now - lastAttempt < retryDelay) {\n        const remaining = retryDelay - (now - lastAttempt);\n        this.debug.log(`Connection to ${targetPeerId.substring(0, 8)}... on cooldown (${Math.round(remaining / 1000)}s remaining, isolated: ${connectedCount === 0})`);\n        return;\n      }\n    }\n\n    // Check connection attempt count\n    if (attempts >= this.maxConnectionAttempts) {\n      this.mesh.emit('statusChanged', { type: 'warning', message: `Max connection attempts reached for ${targetPeerId.substring(0, 8)}...` });\n      this.mesh.peerDiscovery.removeDiscoveredPeer(targetPeerId);\n      return;\n    }\n\n    this.debug.log(`Starting connection to ${targetPeerId.substring(0, 8)}... (attempt ${attempts + 1})`);\n    this.connectionAttempts.set(targetPeerId, attempts + 1);\n    this.lastConnectionAttempt.set(targetPeerId, now);\n    this.mesh.peerDiscovery.trackConnectionAttempt(targetPeerId);\n\n    try {\n      this.debug.log(`Creating PeerConnection for ${targetPeerId.substring(0, 8)}...`);\n\n      // SECURITY: NO automatic media sharing - all media must be manually invoked\n      const options = {\n        localStream: null, // Always null - media must be manually added later\n        // ALWAYS enable both audio and video transceivers for maximum compatibility\n        // This allows peers to receive media even if they don't have media when connecting\n        enableAudio: true,\n        enableVideo: true\n        // allowRemoteStreams defaults to false - streams only invoked when user clicks \"Start Media\"\n      };\n\n      this.debug.log(`\uD83D\uDD04 INITIATOR SETUP: Creating PeerConnection(${targetPeerId.substring(0, 8)}..., isInitiator=true)`);\n      const peerConnection = new PeerConnection(targetPeerId, true, options);\n\n      // Set up event handlers BEFORE creating connection to catch all events\n      this.setupPeerConnectionHandlers(peerConnection);\n      this.peers.set(targetPeerId, peerConnection);\n\n      this.debug.log(`Creating WebRTC connection for ${targetPeerId.substring(0, 8)}...`);\n      await peerConnection.createConnection();\n\n      this.debug.log(`Creating offer for ${targetPeerId.substring(0, 8)}...`);\n      const offer = await peerConnection.createOffer();\n\n      this.debug.log(`Offer created for ${targetPeerId.substring(0, 8)}...`, {\n        type: offer.type,\n        sdpLength: offer.sdp?.length || 0,\n        hasAudio: offer.sdp?.includes('m=audio') || false,\n        hasVideo: offer.sdp?.includes('m=video') || false\n      });\n\n      this.debug.log(`Sending offer to ${targetPeerId.substring(0, 8)}...`);\n      await this.mesh.sendSignalingMessage({\n        type: 'offer',\n        data: offer\n      }, targetPeerId);\n\n      this.mesh.emit('statusChanged', { type: 'info', message: `Offer sent to ${targetPeerId.substring(0, 8)}...` });\n    } catch (error) {\n      this.debug.error('Failed to connect to peer:', error);\n      this.mesh.emit('statusChanged', { type: 'error', message: `Failed to connect to ${targetPeerId.substring(0, 8)}...: ${error.message}` });\n      this.cleanupFailedConnection(targetPeerId);\n    }\n  }\n\n  cleanupFailedConnection(peerId) {\n    this.debug.log(`Cleaning up failed connection for ${peerId.substring(0, 8)}...`);\n\n    // Remove peer connection\n    let peerRemoved = false;\n    if (this.peers.has(peerId)) {\n      const peer = this.peers.get(peerId);\n      const status = peer.getStatus();\n      this.debug.log(`Removing peer ${peerId.substring(0, 8)}... with status: ${status}`);\n\n      try {\n        if (typeof peer.markAsFailed === 'function') {\n          peer.markAsFailed('failed');\n        }\n        peer.close();\n      } catch (error) {\n        this.debug.error('Error closing failed connection:', error);\n      }\n      this.peers.delete(peerId);\n      peerRemoved = true;\n      this.debug.log(`Successfully removed peer ${peerId.substring(0, 8)}... from peers Map`);\n    } else {\n      this.debug.log(`Peer ${peerId.substring(0, 8)}... was not in peers Map`);\n    }\n\n    // Clean up related data\n    this.mesh.peerDiscovery.clearConnectionAttempt(peerId);\n    this.pendingIceCandidates.delete(peerId);\n\n    // Always emit peersUpdated if we removed a peer or to force UI refresh\n    if (peerRemoved) {\n      this.debug.log(`Emitting peersUpdated after removing ${peerId.substring(0, 8)}...`);\n      this.emit('peersUpdated');\n    }\n  }\n\n  cleanupRaceCondition(peerId) {\n    // Remove peer connection but preserve connection attempts\n    if (this.peers.has(peerId)) {\n      const peer = this.peers.get(peerId);\n      try {\n        peer.close();\n      } catch (error) {\n        this.debug.error('Error closing race condition connection:', error);\n      }\n      this.peers.delete(peerId);\n    }\n\n    // Don't clear connection attempts or discovery data - just the active connection\n    this.pendingIceCandidates.delete(peerId);\n    this.emit('peersUpdated');\n  }\n\n  setupPeerConnectionHandlers(peerConnection) {\n    peerConnection.addEventListener('iceCandidate', async (event) => {\n      try {\n        this.debug.log('Sending ICE candidate to', event.peerId);\n        await this.mesh.sendSignalingMessage({\n          type: 'ice-candidate',\n          data: event.candidate\n        }, event.peerId);\n      } catch (error) {\n        this.debug.error('Failed to send ICE candidate:', error);\n      }\n    });\n\n    peerConnection.addEventListener('connected', (event) => {\n      this.debug.log(`[EVENT] Connected event received from ${event.peerId.substring(0, 8)}...`);\n\n      // Reset connection attempts on successful connection\n      this.connectionAttempts.delete(event.peerId);\n\n      // Don't emit peerConnected here - wait for data channel to be ready\n      this.mesh.emit('statusChanged', { type: 'info', message: `WebRTC connected to ${event.peerId.substring(0, 8)}...` });\n      this.mesh.peerDiscovery.clearConnectionAttempt(event.peerId);\n      this.mesh.peerDiscovery.updateDiscoveryTimestamp(event.peerId);\n\n      this.emit('peersUpdated');\n    });\n\n    peerConnection.addEventListener('disconnected', (event) => {\n      this.mesh.emit('statusChanged', { type: 'info', message: `Disconnected from ${event.peerId.substring(0, 8)}...` });\n      this.handlePeerDisconnection(event.peerId, event.reason);\n    });\n\n    peerConnection.addEventListener('dataChannelOpen', (event) => {\n      this.debug.log(`[EVENT] DataChannelOpen event received from ${event.peerId.substring(0, 8)}...`);\n\n      this.mesh.emit('statusChanged', { type: 'info', message: `Data channel ready with ${event.peerId.substring(0, 8)}...` });\n      this.emit('peersUpdated');\n\n      // Track successful connections to reset isolation timer\n      if (this.mesh.peerDiscovery) {\n        this.mesh.peerDiscovery.onConnectionEstablished();\n      }\n\n      // Automatically initiate key exchange when crypto is enabled\n      if (this.mesh.cryptoManager) {\n        // Check if we already have this peer's key to avoid duplicate exchanges\n        const hasExistingKey = this.mesh.cryptoManager.peerKeys.has(event.peerId);\n        if (!hasExistingKey) {\n          this.debug.log(`\uD83D\uDD10 Automatically exchanging keys with newly connected peer ${event.peerId.substring(0, 8)}...`);\n          // PERFORMANCE: Defer key exchange to prevent blocking data channel establishment\n          setTimeout(() => {\n            this.mesh.exchangeKeysWithPeer(event.peerId).catch(error => {\n              this.debug.error(`\uD83D\uDD10 Failed to exchange keys with ${event.peerId.substring(0, 8)}:`, error);\n            });\n          }, 0);\n        } else {\n          this.debug.log(`\uD83D\uDD10 Skipping key exchange with ${event.peerId.substring(0, 8)}... - key already exists`);\n        }\n      }\n\n      this.mesh.emit('peerConnected', { peerId: event.peerId });\n    });\n\n    peerConnection.addEventListener('message', (event) => {\n      this.handleIncomingMessage(event.message, event.peerId);\n    });\n\n    peerConnection.addEventListener('remoteStream', (event) => {\n      this.debug.log(`[EVENT] Remote stream received from ${event.peerId.substring(0, 8)}...`);\n      this.emit('remoteStream', event);\n\n      // DISABLED: Media forwarding causes cascade renegotiation issues with 3+ peers\n      // Each peer should manage their own direct streams to avoid conflicts\n      // this._forwardStreamToOtherPeers(event.stream, event.peerId);\n      this.debug.log('\uD83D\uDD04 MEDIA FORWARDING: Disabled to prevent renegotiation conflicts with 3+ peers');\n    });\n\n    peerConnection.addEventListener('renegotiationNeeded', async (event) => {\n      this.debug.log(`\uD83D\uDD04 Renegotiation needed for ${event.peerId.substring(0, 8)}...`);\n\n      // SMART RENEGOTIATION: Queue renegotiations to prevent conflicts\n      if (this.activeRenegotiations.size >= this.maxConcurrentRenegotiations) {\n        this.debug.log(`\uD83D\uDD04 QUEUE: Renegotiation for ${event.peerId.substring(0, 8)}... queued (${this.activeRenegotiations.size} active)`);\n        this.renegotiationQueue.set(event.peerId, event);\n        return;\n      }\n\n      await this._performRenegotiation(peerConnection, event);\n    });\n\n    // ...existing code...\n  }\n\n  handlePeerDisconnection(peerId, reason) {\n    // Prevent duplicate disconnection handling\n    if (this.disconnectionInProgress.has(peerId)) {\n      this.debug.log(`Disconnection already in progress for ${peerId.substring(0, 8)}..., skipping duplicate`);\n      return;\n    }\n\n    this.debug.log(`Handling peer disconnection: ${peerId.substring(0, 8)}... (${reason})`);\n\n    // Mark disconnection in progress\n    this.disconnectionInProgress.add(peerId);\n\n    try {\n      // Clear all related data\n      if (this.peers.has(peerId)) {\n        const peerConnection = this.peers.get(peerId);\n\n        try {\n          peerConnection.close();\n        } catch (error) {\n          this.debug.error('Error closing peer connection:', error);\n        }\n\n        this.peers.delete(peerId);\n      }\n\n      this.mesh.peerDiscovery.clearConnectionAttempt(peerId);\n      this.pendingIceCandidates.delete(peerId);\n\n      // Clean up eviction tracking\n      this.mesh.evictionManager.clearEvictionTracking(peerId);\n\n      // Don't remove from discovered peers immediately - let it timeout naturally\n      // unless it's a goodbye or explicit removal\n      if (reason === 'left network' || reason === 'manually removed') {\n        this.mesh.peerDiscovery.removeDiscoveredPeer(peerId);\n        this.connectionAttempts.delete(peerId);\n      } else if (reason === 'connection failed' || reason === 'connection disconnected' || reason === 'ICE connection closed') {\n        // For connection failures, clear the attempt so we can retry later\n        this.connectionAttempts.delete(peerId);\n        this.debug.log(`Cleared connection attempt for ${peerId.substring(0, 8)}... due to ${reason} - will retry later`);\n      }\n\n      this.mesh.emit('peerDisconnected', { peerId, reason });\n      this.emit('peersUpdated');\n\n      // Only trigger optimization if we're significantly under capacity\n      const connectedCount = this.getConnectedPeerCount();\n      const needsOptimization = connectedCount === 0; // Only optimize if completely disconnected\n\n      if (needsOptimization && this.mesh.autoDiscovery && this.mesh.peerDiscovery.getDiscoveredPeers().length > 0) {\n        this.debug.log(`Completely disconnected (${connectedCount}/${this.mesh.maxPeers}), scheduling mesh optimization`);\n        setTimeout(() => {\n          // Check if we still need optimization\n          const currentCount = this.getConnectedPeerCount();\n          if (currentCount === 0) {\n            this.debug.log(`Still completely disconnected (${currentCount}/${this.mesh.maxPeers}), attempting optimization`);\n            this.mesh.peerDiscovery.optimizeMeshConnections(this.peers);\n          } else {\n            this.debug.log(`Connection recovered (${currentCount}/${this.mesh.maxPeers}), skipping optimization`);\n          }\n        }, 500); // Wait 500ms before optimizing - faster response\n      } else {\n        this.debug.log(`Peer count appropriate at ${connectedCount}/${this.mesh.maxPeers}, no optimization needed`);\n      }\n    } finally {\n      // Always clean up the disconnection tracking\n      this.disconnectionInProgress.delete(peerId);\n    }\n  }\n\n  disconnectAllPeers() {\n    this.peers.forEach((peerConnection, peerId) => {\n      peerConnection.close();\n      this.mesh.emit('peerDisconnected', { peerId, reason: 'mesh disconnected' });\n    });\n  }\n\n  disconnectPeer(peerId, reason) {\n    this.handlePeerDisconnection(peerId, reason);\n  }\n\n  removePeer(peerId) {\n    this.mesh.peerDiscovery.removeDiscoveredPeer(peerId);\n    this.mesh.peerDiscovery.clearConnectionAttempt(peerId);\n    this.connectionAttempts.delete(peerId);\n\n    if (this.peers.has(peerId)) {\n      const peer = this.peers.get(peerId);\n      if (peer.connection) {\n        peer.connection.close();\n      }\n      this.peers.delete(peerId);\n      this.mesh.emit('peerDisconnected', { peerId, reason: 'manually removed' });\n    }\n\n    this.emit('peersUpdated');\n  }\n\n  canAcceptMorePeers() {\n    // Count connected peers first (these are guaranteed slots)\n    const connectedCount = this.getConnectedPeerCount();\n\n    // If we have room for connected peers, always accept\n    if (connectedCount < this.mesh.maxPeers) {\n      return true;\n    }\n\n    // If at max connected peers, check if we have stale peers we can evict\n    const stalePeerCount = this.getStalePeerCount();\n    const totalPeerCount = this.peers.size;\n\n    // Accept if we have stale peers that can be cleaned up\n    if (stalePeerCount > 0 && totalPeerCount >= this.mesh.maxPeers) {\n      this.debug.log(`At capacity (${connectedCount}/${this.mesh.maxPeers} connected, ${totalPeerCount} total) but have ${stalePeerCount} stale peers that can be evicted`);\n      return true;\n    }\n\n    // Reject if we're at capacity with all viable peers\n    this.debug.log(`Cannot accept more peers: ${connectedCount}/${this.mesh.maxPeers} connected, ${totalPeerCount} total peers in Map`);\n    return false;\n  }\n\n  /**\n     * Count peers that are in stale/non-viable states\n     */\n  getStalePeerCount() {\n    const now = Date.now();\n    const STALE_THRESHOLD = 45000; // 45 seconds (shorter than cleanup threshold)\n\n    return Array.from(this.peers.values()).filter(peerConnection => {\n      const status = peerConnection.getStatus();\n      const connectionAge = now - peerConnection.connectionStartTime;\n\n      return connectionAge > STALE_THRESHOLD &&\n                   (status === 'failed' || status === 'disconnected' || status === 'closed');\n    }).length;\n  }\n\n  getConnectedPeerCount() {\n    return Array.from(this.peers.values()).filter(peerConnection =>\n      peerConnection.getStatus() === 'connected'\n    ).length;\n  }\n\n  getConnectedPeers() {\n    return Array.from(this.peers.values()).filter(peerConnection =>\n      peerConnection.getStatus() === 'connected'\n    );\n  }\n\n  getPeers() {\n    return Array.from(this.peers.entries()).map(([peerId, peerConnection]) => ({\n      peerId,\n      status: peerConnection.getStatus(),\n      isInitiator: peerConnection.isInitiator,\n      connectionStartTime: peerConnection.connectionStartTime\n    }));\n  }\n\n  hasPeer(peerId) {\n    return this.peers.has(peerId);\n  }\n\n  getPeer(peerId) {\n    return this.peers.get(peerId);\n  }\n\n  sendMessage(content) {\n    if (!content || typeof content !== 'string') {\n      this.debug.error('Invalid message content:', content);\n      return 0;\n    }\n\n    // Use gossip protocol to broadcast messages throughout the mesh network\n    this.debug.log(`Broadcasting message via gossip protocol: \"${content}\"`);\n    const messageId = this.mesh.gossipManager.broadcastMessage(content, 'chat');\n\n    if (messageId) {\n      // Return the number of directly connected peers for UI feedback\n      // (the message will propagate to the entire network via gossip)\n      const connectedCount = this.getConnectedPeerCount();\n      this.debug.log(`Message broadcasted via gossip to ${connectedCount} directly connected peer(s), will propagate to entire network`);\n      return connectedCount;\n    } else {\n      this.debug.error('Failed to broadcast message via gossip protocol');\n      return 0;\n    }\n  }\n\n  /**\n     * Send a message directly to a specific peer via data channel\n     * @param {string} peerId - The peer ID to send to\n     * @param {Object} message - The message object to send\n     * @returns {boolean} - True if message was sent successfully\n     */\n  sendDirectMessage(peerId, message) {\n    const peerConnection = this.peers.get(peerId);\n    if (!peerConnection) {\n      this.debug.warn(`Cannot send direct message to ${peerId?.substring(0, 8)}: peer not connected`);\n      return false;\n    }\n\n    try {\n      this.debug.log(`\uD83D\uDCE4 Sending direct message to ${peerId?.substring(0, 8)}:`, message);\n      peerConnection.sendMessage(message);\n      return true;\n    } catch (error) {\n      this.debug.error(`Failed to send direct message to ${peerId?.substring(0, 8)}:`, error);\n      return false;\n    }\n  }\n\n  async handleIceCandidate(candidate, fromPeerId) {\n    this.debug.log('Handling ICE candidate from', fromPeerId);\n\n    const peerConnection = this.peers.get(fromPeerId);\n    if (peerConnection) {\n      try {\n        await peerConnection.handleIceCandidate(candidate);\n      } catch (error) {\n        this.debug.error('Failed to add ICE candidate:', error);\n      }\n    } else {\n      // No peer connection exists yet - buffer the candidate for when it's created\n      this.debug.log('Buffering ICE candidate for', fromPeerId, '(no peer connection yet)');\n      if (!this.pendingIceCandidates.has(fromPeerId)) {\n        this.pendingIceCandidates.set(fromPeerId, []);\n      }\n      this.pendingIceCandidates.get(fromPeerId).push(candidate);\n    }\n  }\n\n  async processPendingIceCandidates(peerId) {\n    const candidates = this.pendingIceCandidates.get(peerId);\n    if (candidates && candidates.length > 0) {\n      this.debug.log(`Processing ${candidates.length} buffered ICE candidates for`, peerId);\n      const peerConnection = this.peers.get(peerId);\n\n      if (peerConnection) {\n        for (const candidate of candidates) {\n          try {\n            await peerConnection.handleIceCandidate(candidate);\n          } catch (error) {\n            this.debug.error('Failed to add buffered ICE candidate:', error);\n          }\n        }\n\n        // Clear the buffer after processing\n        this.pendingIceCandidates.delete(peerId);\n      }\n    }\n  }\n\n  cleanup() {\n    // Stop periodic cleanup\n    this.stopPeriodicCleanup();\n\n    this.peers.clear();\n    this.connectionAttempts.clear();\n    this.pendingIceCandidates.clear();\n    this.disconnectionInProgress.clear();\n    this.cleanupInProgress.clear();\n    this.lastConnectionAttempt.clear();\n  }\n\n  /**\n     * Start periodic cleanup of stale peer connections\n     */\n  startPeriodicCleanup() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n\n    // Run cleanup every 30 seconds - environment-aware timer\n    if (environmentDetector.isBrowser) {\n      this.cleanupInterval = window.setInterval(() => {\n        this.cleanupStalePeers();\n      }, 30000);\n    } else {\n      this.cleanupInterval = setInterval(() => {\n        this.cleanupStalePeers();\n      }, 30000);\n    }\n  }\n\n  /**\n     * Stop periodic cleanup\n     */\n  stopPeriodicCleanup() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n  }\n\n  /**\n     * Clean up peers that are in non-viable states for too long\n     */\n  cleanupStalePeers() {\n    const now = Date.now();\n    const STALE_THRESHOLD = 60000; // 60 seconds\n    const DISCONNECTED_THRESHOLD = 5000; // 5 seconds for disconnected peers\n    const peersToCleanup = [];\n\n    this.peers.forEach((peerConnection, peerId) => {\n      const status = peerConnection.getStatus();\n      const connectionAge = now - peerConnection.connectionStartTime;\n\n      // Immediately clean up disconnected peers\n      if (status === 'disconnected' && connectionAge > DISCONNECTED_THRESHOLD) {\n        this.debug.log(`Disconnected peer detected: ${peerId.substring(0, 8)}... (status: ${status}, age: ${Math.round(connectionAge / 1000)}s)`);\n        peersToCleanup.push(peerId);\n      } else if (connectionAge > STALE_THRESHOLD) {\n        if (status === 'connecting' || status === 'channel-connecting' ||\n                    status === 'failed' || status === 'closed') {\n          this.debug.log(`Stale peer detected: ${peerId.substring(0, 8)}... (status: ${status}, age: ${Math.round(connectionAge / 1000)}s)`);\n          peersToCleanup.push(peerId);\n        }\n      }\n    });\n\n    if (peersToCleanup.length > 0) {\n      this.debug.log(`Cleaning up ${peersToCleanup.length} stale peer(s)`);\n      peersToCleanup.forEach(peerId => {\n        this.cleanupFailedConnection(peerId);\n      });\n    }\n  }\n\n  /**\n     * Force cleanup of peers that are not in connected state (for debugging)\n     */\n  forceCleanupInvalidPeers() {\n    this.debug.log('Force cleaning up peers not in connected state...');\n    const peersToRemove = [];\n\n    this.peers.forEach((peerConnection, peerId) => {\n      const status = peerConnection.getStatus();\n      if (status !== 'connected') {\n        this.debug.log(`Found peer ${peerId.substring(0, 8)}... in invalid state: ${status}`);\n        peersToRemove.push(peerId);\n      }\n    });\n\n    peersToRemove.forEach(peerId => {\n      this.debug.log(`Force removing peer ${peerId.substring(0, 8)}...`);\n      this.cleanupFailedConnection(peerId);\n    });\n\n    if (peersToRemove.length > 0) {\n      this.debug.log(`Force cleaned up ${peersToRemove.length} invalid peers`);\n      this.emit('peersUpdated');\n    }\n\n    return peersToRemove.length;\n  }\n\n  /**\n     * Get a summary of all peer states for debugging\n     */\n  getPeerStateSummary() {\n    const summary = {\n      total: this.peers.size,\n      connected: 0,\n      connecting: 0,\n      channelConnecting: 0,\n      failed: 0,\n      disconnected: 0,\n      closed: 0,\n      other: 0,\n      stale: this.getStalePeerCount()\n    };\n\n    this.peers.forEach((peerConnection) => {\n      const status = peerConnection.getStatus();\n      switch (status) {\n        case 'connected':\n          summary.connected++;\n          break;\n        case 'connecting':\n          summary.connecting++;\n          break;\n        case 'channel-connecting':\n          summary.channelConnecting++;\n          break;\n        case 'failed':\n          summary.failed++;\n          break;\n        case 'disconnected':\n          summary.disconnected++;\n          break;\n        case 'closed':\n          summary.closed++;\n          break;\n        default:\n          summary.other++;\n      }\n    });\n\n    return summary;\n  }\n\n  getDetailedPeerStatus() {\n    const peerStatuses = {};\n    this.peers.forEach((peerConnection, peerId) => {\n      peerStatuses[peerId.substring(0, 8) + '...'] = {\n        status: peerConnection.getStatus(),\n        isInitiator: peerConnection.isInitiator,\n        dataChannelReady: peerConnection.dataChannelReady,\n        connectionStartTime: peerConnection.connectionStartTime,\n        connectionState: peerConnection.connection?.connectionState,\n        iceConnectionState: peerConnection.connection?.iceConnectionState\n      };\n    });\n    return peerStatuses;\n  }\n\n  // Get all peer connections\n  getAllConnections() {\n    return Array.from(this.peers.values());\n  }\n\n  /**\n     * Route incoming messages based on their type\n     */\n  handleIncomingMessage(message, fromPeerId) {\n    if (!message || typeof message !== 'object') {\n      this.debug.warn('Received invalid message from', fromPeerId?.substring(0, 8));\n      return;\n    }\n\n    // Define message types that should be filtered from peer-readable messages\n    // These messages are processed but not emitted as regular messages to UI/applications\n    const filteredMessageTypes = new Set([\n      'signaling-relay',\n      'peer-announce-relay', \n      'bootstrap-keepalive',\n      'client-peer-announcement',\n      'cross-bootstrap-signaling'\n    ]);\n\n    // Check if this message type should be filtered from peer-readable messages\n    const isFilteredMessage = filteredMessageTypes.has(message.type);\n    if (isFilteredMessage) {\n      this.debug.log(`\uD83D\uDD07 FILTER: Processing filtered message type '${message.type}' from ${fromPeerId?.substring(0, 8)} (not emitted to UI)`);\n    }\n\n    // Route based on message type\n    switch (message.type) {\n      case 'gossip':\n        // Gossip protocol messages (async call, but we don't wait for it)\n        this.mesh.gossipManager.handleGossipMessage(message, fromPeerId).catch(error => {\n          this.debug.error('Error handling gossip message:', error);\n        });\n        break;\n\n      case 'eviction':\n        // Handle eviction notices\n        this.handleEvictionMessage(message, fromPeerId);\n        break;\n\n      case 'dht':\n        // WebDHT messages\n        if (this.mesh.webDHT) {\n          this.mesh.webDHT.handleMessage(message, fromPeerId);\n        }\n        break;\n\n      case 'renegotiation-offer':\n        // Handle renegotiation offers from peers\n        this.handleRenegotiationOffer(message, fromPeerId);\n        break;\n\n      case 'renegotiation-answer':\n        // Handle renegotiation answers from peers\n        this.handleRenegotiationAnswer(message, fromPeerId);\n        break;\n\n      case 'signaling':\n        // Handle wrapped signaling messages sent via mesh\n        this.debug.log(`\uD83D\uDD04 MESH SIGNALING: Received ${message.data?.type} from ${fromPeerId?.substring(0, 8)}...`);\n        if (message.data && message.data.type) {\n          // Unwrap and handle the signaling message\n          const signalingMessage = {\n            type: message.data.type,\n            data: message.data.data,\n            fromPeerId: message.fromPeerId || fromPeerId,\n            targetPeerId: this.mesh.peerId,\n            timestamp: message.timestamp\n          };\n\n          // Route to signaling handler\n          this.mesh.signalingHandler.handleSignalingMessage(signalingMessage);\n        }\n        break;\n\n      case 'signaling-relay':\n        // Process signaling relay messages but don't emit as peer-readable\n        this.debug.log(`\uD83D\uDD07 FILTER: Processing signaling-relay from ${fromPeerId?.substring(0, 8)} (filtered from UI)`);\n        // Handle the signaling relay internally - extract and process the actual signaling message\n        if (message.data && message.targetPeerId === this.mesh.peerId) {\n          this.mesh.signalingHandler.handleSignalingMessage({\n            type: message.data.type,\n            data: message.data.data,\n            fromPeerId: message.fromPeerId || fromPeerId,\n            targetPeerId: message.targetPeerId,\n            timestamp: message.timestamp\n          });\n        }\n        return; // Early return to prevent fallback to gossip handler\n\n      case 'peer-announce-relay':\n        // Process peer announce relay messages but don't emit as peer-readable\n        this.debug.log(`\uD83D\uDD07 FILTER: Processing peer-announce-relay from ${fromPeerId?.substring(0, 8)} (filtered from UI)`);\n        // Handle the peer announcement internally\n        if (message.data && this.mesh.signalingHandler) {\n          this.mesh.signalingHandler.handlePeerAnnouncement(message.data, fromPeerId);\n        }\n        return; // Early return to prevent fallback to gossip handler\n\n      case 'bootstrap-keepalive':\n        // Process bootstrap keepalive messages but don't emit as peer-readable\n        this.debug.log(`\uD83D\uDD07 FILTER: Processing bootstrap-keepalive from ${fromPeerId?.substring(0, 8)} (filtered from UI)`);\n        // Handle keepalive internally - update peer discovery timestamps\n        if (this.mesh.peerDiscovery) {\n          this.mesh.peerDiscovery.updateDiscoveryTimestamp(fromPeerId);\n        }\n        return; // Early return to prevent fallback to gossip handler\n\n      case 'client-peer-announcement':\n        // Process client peer announcement messages but don't emit as peer-readable\n        this.debug.log(`\uD83D\uDD07 FILTER: Processing client-peer-announcement from ${fromPeerId?.substring(0, 8)} (filtered from UI)`);\n        // Handle client peer announcement internally\n        if (message.clientPeerId && this.mesh.signalingHandler) {\n          this.mesh.signalingHandler.handlePeerAnnouncement(message.clientPeerId);\n        }\n        return; // Early return to prevent fallback to gossip handler\n\n      case 'cross-bootstrap-signaling':\n        // Process cross-bootstrap signaling messages but don't emit as peer-readable\n        this.debug.log(`\uD83D\uDD07 FILTER: Processing cross-bootstrap-signaling from ${fromPeerId?.substring(0, 8)} (filtered from UI)`);\n        // Handle cross-bootstrap signaling internally\n        if (message.originalMessage && message.targetPeerId === this.mesh.peerId && this.mesh.signalingHandler) {\n          // Extract and process the wrapped signaling message\n          this.mesh.signalingHandler.handleSignalingMessage({\n            type: message.originalMessage.type,\n            data: message.originalMessage.data,\n            fromPeerId: message.originalMessage.fromPeerId || fromPeerId,\n            targetPeerId: message.targetPeerId,\n            timestamp: message.originalMessage.timestamp || message.timestamp\n          });\n        }\n        return; // Early return to prevent fallback to gossip handler\n\n      default:\n        // For non-filtered message types, check if they should be emitted\n        if (!isFilteredMessage) {\n          // Unknown message type - try gossip as fallback for backward compatibility\n          this.debug.warn(`Unknown message type '${message.type}' from ${fromPeerId?.substring(0, 8)}, trying gossip handler`);\n          this.mesh.gossipManager.handleGossipMessage(message, fromPeerId).catch(error => {\n            this.debug.error('Error handling unknown message as gossip:', error);\n          });\n        } else {\n          // This is a filtered message type that doesn't have a specific handler\n          this.debug.log(`\uD83D\uDD07 FILTER: Filtered message type '${message.type}' processed but not emitted`);\n        }\n        break;\n    }\n  }\n\n  /**\n     * Handle eviction messages\n     */\n  handleEvictionMessage(message, fromPeerId) {\n    this.debug.log(`Received eviction notice from ${fromPeerId?.substring(0, 8)}: ${message.reason}`);\n\n    // Emit eviction event for UI notification\n    this.mesh.emit('peerEvicted', {\n      peerId: fromPeerId,\n      reason: message.reason,\n      initiatedByPeer: true\n    });\n\n    // Close the connection gracefully\n    const peerConnection = this.peers.get(fromPeerId);\n    if (peerConnection) {\n      peerConnection.close();\n      this.peers.delete(fromPeerId);\n    }\n  }\n\n  /**\n   * Perform a single renegotiation with conflict prevention\n   * @private\n   */\n  async _performRenegotiation(peerConnection, event) {\n    const peerId = event.peerId;\n    \n    // Mark this renegotiation as active\n    this.activeRenegotiations.add(peerId);\n    \n    try {\n      this.debug.log(`\uD83D\uDD04 ACTIVE: Starting renegotiation for ${peerId.substring(0, 8)}... (${this.activeRenegotiations.size} active)`);\n\n      // Check connection state - allow renegotiation for stable connections or those stuck in \"have-local-offer\"\n      const signalingState = peerConnection.connection.signalingState;\n      if (signalingState !== 'stable' && signalingState !== 'have-local-offer') {\n        this.debug.log(`Skipping renegotiation for ${peerId.substring(0, 8)}... - connection in unsupported state (${signalingState})`);\n        return;\n      }\n\n      // Additional check for connection state\n      if (peerConnection.connection.connectionState !== 'connected') {\n        this.debug.log(`Skipping renegotiation for ${peerId.substring(0, 8)}... - not connected (${peerConnection.connection.connectionState})`);\n        return;\n      }\n\n      this.debug.log(`\uD83D\uDD04 Creating renegotiation offer for ${peerId.substring(0, 8)}... (signaling state: ${signalingState})`);\n\n      // Create new offer for renegotiation\n      const offer = await peerConnection.connection.createOffer();\n\n      this.debug.log('\uD83D\uDD0D RENEGOTIATION OFFER SDP DEBUG:');\n      this.debug.log(`   SDP length: ${offer.sdp.length}`);\n      this.debug.log(`   Contains video: ${offer.sdp.includes('m=video')}`);\n      this.debug.log(`   Contains audio: ${offer.sdp.includes('m=audio')}`);\n\n      await peerConnection.connection.setLocalDescription(offer);\n\n      // Send the renegotiation offer\n      await this.mesh.sendSignalingMessage({\n        type: 'renegotiation-offer',\n        data: offer\n      }, peerId);\n\n      this.debug.log(`\u2705 ACTIVE: Sent renegotiation offer to ${peerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`\u274C ACTIVE: Failed to renegotiate with ${peerId.substring(0, 8)}...`, error);\n    } finally {\n      // Always clean up and process queue\n      this.activeRenegotiations.delete(peerId);\n      this.debug.log(`\uD83D\uDD04 ACTIVE: Completed renegotiation for ${peerId.substring(0, 8)}... (${this.activeRenegotiations.size} active)`);\n      \n      // Process next queued renegotiation\n      this._processRenegotiationQueue();\n    }\n  }\n\n  /**\n   * Process the next renegotiation in the queue\n   * @private\n   */\n  _processRenegotiationQueue() {\n    if (this.activeRenegotiations.size >= this.maxConcurrentRenegotiations || this.renegotiationQueue.size === 0) {\n      return;\n    }\n\n    // Get next queued renegotiation\n    const [nextPeerId, nextEvent] = this.renegotiationQueue.entries().next().value;\n    this.renegotiationQueue.delete(nextPeerId);\n\n    const peerConnection = this.peers.get(nextPeerId);\n    if (peerConnection) {\n      this.debug.log(`\uD83D\uDD04 QUEUE: Processing queued renegotiation for ${nextPeerId.substring(0, 8)}...`);\n      this._performRenegotiation(peerConnection, nextEvent);\n    }\n  }\n\n  /**\n   * Handle renegotiation offers from peers\n   */\n  async handleRenegotiationOffer(message, fromPeerId) {\n    this.debug.log(`\uD83D\uDD04 Handling renegotiation offer via mesh from ${fromPeerId.substring(0, 8)}...`);\n\n    // Find the existing peer connection\n    const peerConnection = this.peers.get(fromPeerId);\n    if (!peerConnection) {\n      this.debug.error(`No peer connection found for renegotiation from ${fromPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    try {\n      // Handle the renegotiation offer and get the answer\n      const answer = await peerConnection.handleOffer(message.data);\n      this.debug.log(`\u2705 Renegotiation offer processed, sending answer to ${fromPeerId.substring(0, 8)}...`);\n\n      // Send the answer back to complete the renegotiation handshake\n      await this.mesh.sendSignalingMessage({\n        type: 'renegotiation-answer',\n        data: answer\n      }, fromPeerId);\n\n      this.debug.log(`\u2705 Renegotiation completed via mesh with ${fromPeerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`\u274C Failed to handle renegotiation offer via mesh from ${fromPeerId.substring(0, 8)}...`, error);\n    }\n  }\n\n  async handleRenegotiationAnswer(message, fromPeerId) {\n    this.debug.log(`\uD83D\uDD04 Handling renegotiation answer via mesh from ${fromPeerId.substring(0, 8)}...`);\n\n    // Find the existing peer connection\n    const peerConnection = this.peers.get(fromPeerId);\n    if (!peerConnection) {\n      this.debug.error(`No peer connection found for renegotiation answer from ${fromPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    try {\n      // Handle the renegotiation answer\n      await peerConnection.handleAnswer(message.data);\n      this.debug.log(`\u2705 Renegotiation answer processed from ${fromPeerId.substring(0, 8)}... - renegotiation complete`);\n    } catch (error) {\n      this.debug.error(`\u274C Failed to handle renegotiation answer via mesh from ${fromPeerId.substring(0, 8)}...`, error);\n    }\n  }\n\n  /**\n   * Monitor and fix stuck connections that remain in \"have-local-offer\" state\n   * This is called periodically to detect and fix connections that get stuck\n   */\n  monitorAndFixStuckConnections() {\n    if (!this.mesh.connected) return;\n\n    const stuckConnections = [];\n\n    for (const [peerId, peerConnection] of this.peers) {\n      if (peerConnection.connection?.signalingState === 'have-local-offer') {\n        const connectionAge = Date.now() - peerConnection.connectionStartTime;\n\n        // If connection has been stuck in \"have-local-offer\" for more than 2 seconds, fix it\n        if (connectionAge > 2000) {\n          stuckConnections.push(peerId);\n        }\n      }\n    }\n\n    if (stuckConnections.length > 0) {\n      this.debug.log(`\uD83D\uDEA8 STUCK MONITOR: Found ${stuckConnections.length} stuck connections - forcing recovery`);\n\n      for (const peerId of stuckConnections) {\n        this.forceConnectionRecovery(peerId).catch(error => {\n          this.debug.error(`Failed to recover stuck connection for ${peerId}:`, error);\n        });\n      }\n    }\n  }\n\n  /**\n   * Force recovery of a stuck connection by completely recreating it\n   */\n  async forceConnectionRecovery(peerId) {\n    const peerConnection = this.getPeer(peerId);\n    if (!peerConnection) {\n      this.debug.error(`Cannot recover - peer ${peerId} not found`);\n      return null;\n    }\n\n    this.debug.log(`\uD83D\uDD04 FORCE RECOVERY: Completely recreating connection for ${peerId.substring(0, 8)}...`);\n\n    try {\n      // Preserve the current media stream\n      const currentLocalStream = peerConnection.getLocalStream();\n\n      // Close the stuck connection\n      peerConnection.close();\n\n      // Remove from peers map\n      this.peers.delete(peerId);\n\n      // Create a completely fresh connection\n      const freshConnection = await this.connectToPeer(peerId, false, {\n        localStream: currentLocalStream\n      });\n\n      if (freshConnection && currentLocalStream) {\n        // Apply the media stream to the fresh connection\n        await freshConnection.setLocalStream(currentLocalStream);\n        this.debug.log(`\u2705 FORCE RECOVERY: Fresh connection created with media for ${peerId.substring(0, 8)}...`);\n      }\n\n      return freshConnection;\n    } catch (error) {\n      this.debug.error(`\u274C FORCE RECOVERY: Failed to recreate connection for ${peerId.substring(0, 8)}...`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start monitoring for stuck connections\n   */\n  startStuckConnectionMonitoring() {\n    // Check every 2 seconds for stuck connections - much more responsive\n    setInterval(() => {\n      this.monitorAndFixStuckConnections();\n    }, 2000);\n\n    this.debug.log('\uD83D\uDD0D Started stuck connection monitoring');\n  }\n\n  /**\n   * Forward a received stream to all other connected peers (except the sender)\n   * This implements media forwarding through the mesh topology\n   * @param {MediaStream} stream - The stream to forward\n   * @param {string} sourcePeerId - The peer ID that sent the stream (don't forward back to them)\n   * @private\n   */\n  async _forwardStreamToOtherPeers(stream, sourcePeerId) {\n    if (!stream || !sourcePeerId) {\n      this.debug.warn('Cannot forward stream - invalid parameters');\n      return;\n    }\n\n    this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Forwarding stream from ${sourcePeerId.substring(0, 8)}... to other connected peers`);\n\n    // Get the original source peer ID from the stream metadata\n    const originalSourcePeerId = stream._peerPigeonSourcePeerId || sourcePeerId;\n\n    // Count how many peers we're forwarding to\n    let forwardCount = 0;\n\n    // Forward to all connected peers except the source and the original sender\n    for (const [peerId, connection] of this.peers) {\n      // Skip the peer who sent us the stream\n      if (peerId === sourcePeerId) {\n        this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Skipping source peer ${peerId.substring(0, 8)}...`);\n        continue;\n      }\n\n      // Skip the original peer who created the stream (to prevent loops)\n      if (peerId === originalSourcePeerId) {\n        this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Skipping original stream creator ${peerId.substring(0, 8)}...`);\n        continue;\n      }\n\n      // Only forward to connected peers\n      if (connection.getStatus() !== 'connected') {\n        this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Skipping disconnected peer ${peerId.substring(0, 8)}...`);\n        continue;\n      }\n\n      try {\n        this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Setting forwarded stream for peer ${peerId.substring(0, 8)}...`);\n\n        // CRITICAL: Clone the stream to avoid conflicts\n        const forwardedStream = stream.clone();\n\n        // Mark the forwarded stream with original source information\n        Object.defineProperty(forwardedStream, '_peerPigeonSourcePeerId', {\n          value: originalSourcePeerId,\n          writable: false,\n          enumerable: false,\n          configurable: false\n        });\n\n        Object.defineProperty(forwardedStream, '_peerPigeonOrigin', {\n          value: 'forwarded',\n          writable: false,\n          enumerable: false,\n          configurable: false\n        });\n\n        // Set the cloned stream as the local stream for this connection\n        await connection.setLocalStream(forwardedStream);\n\n        forwardCount++;\n        this.debug.log(`\u2705 FORWARD STREAM: Successfully forwarded stream to peer ${peerId.substring(0, 8)}...`);\n      } catch (error) {\n        this.debug.error(`\u274C FORWARD STREAM: Failed to forward stream to peer ${peerId.substring(0, 8)}...`, error);\n      }\n    }\n\n    this.debug.log(`\uD83D\uDD04 FORWARD STREAM: Forwarded stream from ${sourcePeerId.substring(0, 8)}... to ${forwardCount} peer(s)`);\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { PeerConnection } from './PeerConnection.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Handles WebRTC signaling messages (offers, answers, ICE candidates)\n */\nexport class SignalingHandler extends EventEmitter {\n  constructor(mesh, connectionManager) {\n    super();\n    this.debug = DebugLogger.create('SignalingHandler');\n    this.mesh = mesh;\n    this.connectionManager = connectionManager;\n  }\n\n  async handleSignalingMessage(message) {\n    const { type, data, fromPeerId, targetPeerId } = message;\n\n    // CRITICAL DEBUG: Log all incoming signaling messages for answer tracking\n    if (type === 'answer' || type === 'renegotiation-answer') {\n      console.log('\uD83D\uDEA8 SIGNALING CRITICAL:', type, 'from', fromPeerId?.substring(0, 8), 'to', this.mesh.peerId?.substring(0, 8));\n      this.debug.log('\uD83D\uDD0D SIGNALING DEBUG: Received answer message:', {\n        type,\n        fromPeerId: fromPeerId?.substring(0, 8) + '...',\n        targetPeerId: targetPeerId?.substring(0, 8) + '...',\n        ourPeerId: this.mesh.peerId?.substring(0, 8) + '...',\n        hasData: !!data,\n        dataType: data?.type\n      });\n    }\n\n    if (fromPeerId === this.mesh.peerId) {\n      if (type === 'answer' || type === 'renegotiation-answer') {\n        console.log('\uD83D\uDEA8 REJECTING:', type, '- from our own peer ID');\n        this.debug.log('\uD83D\uDD0D SIGNALING DEBUG: Rejecting answer - from our own peer ID');\n      }\n      return;\n    }\n\n    if (targetPeerId && targetPeerId !== this.mesh.peerId) {\n      if (type === 'answer' || type === 'renegotiation-answer') {\n        console.log('\uD83D\uDEA8 REJECTING:', type, '- target mismatch, target:', targetPeerId?.substring(0, 8), 'us:', this.mesh.peerId?.substring(0, 8));\n        this.debug.log('\uD83D\uDD0D SIGNALING DEBUG: Rejecting answer - target mismatch:', {\n          targetPeerId: targetPeerId?.substring(0, 8) + '...',\n          ourPeerId: this.mesh.peerId?.substring(0, 8) + '...'\n        });\n      }\n      return;\n    }\n\n    // Ignore cleanup messages - they are handled by the server, not as peer signaling\n    if (type === 'cleanup' || type === 'cleanup-all') {\n      this.debug.log('Ignoring cleanup message:', { type, fromPeerId });\n      return;\n    }\n\n    this.debug.log('Processing signaling message:', { type, fromPeerId, targetPeerId });\n\n    switch (type) {\n      case 'announce':\n        this.handlePeerAnnouncement(fromPeerId);\n        break;\n      case 'peer-discovered':\n        // Handle peer discovery messages from the signaling server\n        if (data && data.peerId) {\n          this.handlePeerAnnouncement(data.peerId);\n        }\n        break;\n      case 'goodbye':\n        this.handlePeerGoodbye(fromPeerId);\n        break;\n      case 'offer':\n        await this.handleOffer(data, fromPeerId);\n        break;\n      case 'renegotiation-offer':\n        await this.handleRenegotiationOffer(data, fromPeerId);\n        break;\n      case 'answer':\n        console.log('\uD83D\uDEA8 SWITCH: Reached answer case for', fromPeerId?.substring(0, 8));\n        this.debug.log('\uD83D\uDD0D SIGNALING DEBUG: Reached answer case in switch statement');\n        await this.handleAnswer(data, fromPeerId);\n        break;\n      case 'renegotiation-answer':\n        console.log('\uD83D\uDEA8 SWITCH: Reached renegotiation-answer case for', fromPeerId?.substring(0, 8));\n        await this.handleRenegotiationAnswer(data, fromPeerId);\n        break;\n      case 'ice-restart-offer':\n        await this.handleIceRestartOffer(data, fromPeerId);\n        break;\n      case 'ice-restart-answer':\n        await this.handleIceRestartAnswer(data, fromPeerId);\n        break;\n      case 'ice-candidate':\n        await this.connectionManager.handleIceCandidate(data, fromPeerId);\n        break;\n      case 'connection-rejected':\n        this.handleConnectionRejected(data, fromPeerId);\n        break;\n    }\n  }\n\n  handlePeerAnnouncement(fromPeerId) {\n    // Prevent duplicate announcements - only announce if we haven't seen this peer before\n    if (this.mesh.peerDiscovery.hasPeer(fromPeerId)) {\n      this.debug.log(`Peer ${fromPeerId.substring(0, 8)}... already known, skipping announcement`);\n      return;\n    }\n\n    this.mesh.emit('statusChanged', { type: 'info', message: `Peer ${fromPeerId.substring(0, 8)}... announced` });\n    this.debug.log(`Adding discovered peer: ${fromPeerId.substring(0, 8)}... to PeerDiscovery`);\n    this.debug.log(`Current peer count: ${this.connectionManager.getConnectedPeerCount()}/${this.mesh.maxPeers}`);\n    this.debug.log(`All discovered peers: ${Array.from(this.mesh.peerDiscovery.discoveredPeers.keys()).map(p => p.substring(0, 8)).join(', ')}`);\n    this.mesh.peerDiscovery.addDiscoveredPeer(fromPeerId);\n  }\n\n  handlePeerGoodbye(fromPeerId) {\n    this.mesh.emit('statusChanged', { type: 'info', message: `Peer ${fromPeerId.substring(0, 8)}... left the network` });\n    this.mesh.peerDiscovery.removeDiscoveredPeer(fromPeerId);\n    this.connectionManager.disconnectPeer(fromPeerId, 'left network');\n  }\n\n  async handleOffer(offer, fromPeerId) {\n    this.debug.log('Handling offer from', fromPeerId);\n\n    // Validate offer data structure before proceeding\n    if (!offer || typeof offer !== 'object') {\n      this.debug.error(`Invalid offer data from ${fromPeerId}:`, offer);\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid offer data from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    if (!offer.type || offer.type !== 'offer') {\n      this.debug.error(`Invalid offer type from ${fromPeerId}:`, offer.type);\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid offer type from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    if (!offer.sdp || typeof offer.sdp !== 'string' || offer.sdp.length < 10) {\n      this.debug.error(`Invalid offer SDP from ${fromPeerId}:`, offer.sdp?.substring(0, 100) || 'undefined');\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid offer SDP from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    // INITIATOR LOGIC: Use deterministic peer ID comparison to prevent race conditions\n    // Only accept offers if we should NOT be the initiator (i.e., the other peer should initiate)\n    const shouldWeInitiate = this.mesh.peerId > fromPeerId;\n    if (shouldWeInitiate) {\n      this.debug.log(`\uD83D\uDD04 INITIATOR LOGIC: Rejecting offer from ${fromPeerId.substring(0, 8)}... because we should be the initiator (our ID: ${this.mesh.peerId.substring(0, 8)}... > their ID)`);\n      \n      // Send a polite rejection so they know we expect to be the initiator\n      try {\n        await this.mesh.sendSignalingMessage({\n          type: 'connection-rejected',\n          data: {\n            reason: 'initiator_role_conflict',\n            details: 'Peer should wait for us to initiate based on peer ID comparison',\n            shouldInitiate: false\n          }\n        }, fromPeerId);\n      } catch (error) {\n        this.debug.warn('Failed to send initiator rejection:', error);\n      }\n      return;\n    }\n\n    this.debug.log(`\uD83D\uDD04 INITIATOR LOGIC: Accepting offer from ${fromPeerId.substring(0, 8)}... because they should be the initiator (their ID: ${fromPeerId.substring(0, 8)}... > our ID: ${this.mesh.peerId.substring(0, 8)}...)`);\n\n    // If we already have a connection or are connecting, handle gracefully\n    if (this.connectionManager.hasPeer(fromPeerId)) {\n      const existingPeer = this.connectionManager.getPeer(fromPeerId);\n      const existingStatus = existingPeer.getStatus();\n\n      // If connection is already established and working, don't interfere\n      if (existingStatus === 'connected') {\n        this.debug.log(`Connection already established with ${fromPeerId}, ignoring duplicate offer`);\n        return;\n      }\n\n      // IMPROVED RACE CONDITION HANDLING:\n      // Instead of ignoring offers based on initiator flags, resolve race conditions intelligently\n      const weShouldInitiate = this.mesh.peerId > fromPeerId;\n      this.debug.log(`\uD83D\uDD04 INITIATOR LOGIC: ${this.mesh.peerId.substring(0, 8)}... vs ${fromPeerId.substring(0, 8)}... \u2192 weShouldInitiate: ${weShouldInitiate}`);\n      this.debug.log(`\uD83D\uDD04 EXISTING PEER: isInitiator: ${existingPeer.isInitiator}, status: ${existingStatus}`);\n\n      // If both peers are trying to initiate (mutual initiation race condition)\n      if (weShouldInitiate && existingPeer.isInitiator) {\n        this.debug.log(`\uD83D\uDD04 RACE CONDITION: Both peers trying to initiate! We should initiate (${this.mesh.peerId.substring(0, 8)}... > ${fromPeerId.substring(0, 8)}...) but received offer.`);\n\n        // CRITICAL FIX: Accept the incoming offer if our connection is stuck in \"have-local-offer\"\n        // This completes the SDP handshake that was blocked by the race condition\n        const ourSignalingState = existingPeer.connection?.signalingState;\n        if (ourSignalingState === 'have-local-offer') {\n          this.debug.log(`\u2705 RACE RESOLUTION: Our connection stuck in \"${ourSignalingState}\" - accepting their offer to complete handshake`);\n          this.connectionManager.cleanupRaceCondition(fromPeerId);\n        } else {\n          this.debug.log(`\u274C RACE RESOLUTION: Our connection in \"${ourSignalingState}\" - ignoring their offer as we should initiate`);\n          return;\n        }\n      } else if (!weShouldInitiate && existingPeer.isInitiator) {\n        this.debug.log(`\uD83D\uDD04 INITIATOR CORRECTION: We incorrectly initiated to ${fromPeerId.substring(0, 8)}..., backing down for their offer`);\n        // Cleanup our outgoing attempt and accept the incoming offer\n        if (existingStatus === 'connecting' || existingStatus === 'new') {\n          this.debug.log(`\u2705 Cleaning up our incorrect connection attempt to ${fromPeerId.substring(0, 8)}...`);\n          this.connectionManager.cleanupRaceCondition(fromPeerId);\n        } else {\n          this.debug.log('Connection in progress, not cleaning up');\n          return;\n        }\n      } else {\n        this.debug.log('Already processing incoming connection from', fromPeerId);\n        return;\n      }\n    }\n\n    // Check if we're already attempting to connect to this peer\n    if (this.connectionManager.connectionAttempts.has(fromPeerId)) {\n      this.debug.log('Already attempting connection to', fromPeerId, 'accepting incoming offer');\n      this.connectionManager.connectionAttempts.delete(fromPeerId);\n    }\n\n    // CRITICAL: Check capacity again right before accepting to prevent race conditions\n    const currentCount = this.connectionManager.getConnectedPeerCount();\n    const totalPeerCount = this.connectionManager.peers.size;\n    let canAccept = this.mesh.canAcceptMorePeers();\n    let evictPeerId = null;\n\n    this.debug.log(`Capacity check for ${fromPeerId.substring(0, 8)}...: ${currentCount}/${this.mesh.maxPeers} connected, ${totalPeerCount} total peers, canAccept: ${canAccept}`);\n\n    if (!canAccept) {\n      this.debug.log(`At capacity (${currentCount}/${this.mesh.maxPeers} connected, ${totalPeerCount} total) - checking eviction and cleanup options`);\n\n      // First try: Check if we should evict a peer for this new connection\n      if (this.mesh.evictionStrategy) {\n        evictPeerId = this.mesh.evictionManager.shouldEvictForPeer(fromPeerId);\n        if (evictPeerId) {\n          this.debug.log(`Will evict ${evictPeerId.substring(0, 8)}... for incoming connection from ${fromPeerId.substring(0, 8)}...`);\n          canAccept = true; // We can accept because we'll evict\n        } else {\n          this.debug.log(`No suitable peer found for eviction for ${fromPeerId.substring(0, 8)}...`);\n        }\n      } else {\n        this.debug.log(`Eviction strategy disabled - cannot evict for ${fromPeerId.substring(0, 8)}...`);\n      }\n\n      // Second try: Clean up stale peers to make room\n      if (!canAccept) {\n        const stalePeerCount = this.connectionManager.getStalePeerCount();\n        if (stalePeerCount > 0) {\n          this.debug.log(`No eviction candidate, attempting to clean up ${stalePeerCount} stale peer(s) to make room for ${fromPeerId.substring(0, 8)}...`);\n          this.connectionManager.cleanupStalePeers();\n          canAccept = this.mesh.canAcceptMorePeers();\n          if (canAccept) {\n            this.debug.log(`Successfully made room after cleanup for ${fromPeerId.substring(0, 8)}...`);\n          }\n        }\n      }\n\n      // Final rejection if no options worked\n      if (!canAccept) {\n        const reason = `max_peers_reached (${currentCount}/${this.mesh.maxPeers} connected, ${this.connectionManager.peers.size} total, no eviction candidate)`;\n        this.debug.log(`Rejecting offer from ${fromPeerId.substring(0, 8)}...: ${reason}`);\n\n        try {\n          await this.mesh.sendSignalingMessage({\n            type: 'connection-rejected',\n            data: {\n              reason: 'max_peers_reached',\n              details: reason,\n              currentCount,\n              maxPeers: this.mesh.maxPeers\n            }\n          }, fromPeerId);\n          this.debug.log(`Sent connection rejection to ${fromPeerId.substring(0, 8)}...`);\n        } catch (error) {\n          this.debug.error('Failed to send connection rejection:', error);\n        }\n        return;\n      }\n    }\n\n    // Perform eviction if we determined one was needed\n    if (evictPeerId) {\n      this.mesh.emit('statusChanged', { type: 'info', message: `Evicting ${evictPeerId.substring(0, 8)}... for incoming connection from ${fromPeerId.substring(0, 8)}...` });\n      await this.mesh.evictionManager.evictPeer(evictPeerId, 'incoming closer peer');\n    }\n    try {\n      // SECURITY: NO automatic media sharing - all media must be manually invoked\n      const options = {\n        localStream: null, // Always null - media must be manually added later\n        // ALWAYS enable both audio and video transceivers for maximum compatibility\n        // This allows peers to receive media even if they don't have media when connecting\n        enableAudio: true,\n        enableVideo: true\n        // allowRemoteStreams defaults to false - streams only invoked when user explicitly enables them\n      };\n\n      this.debug.log(`Creating answer connection for ${fromPeerId.substring(0, 8)}... (no automatic media sharing)`);\n      this.debug.log(`\uD83D\uDD04 RECEIVER SETUP: Creating PeerConnection(${fromPeerId.substring(0, 8)}..., isInitiator=false)`);\n\n      const peerConnection = new PeerConnection(fromPeerId, false, options);\n\n      // Set up event handlers BEFORE creating connection to catch all events\n      this.connectionManager.setupPeerConnectionHandlers(peerConnection);\n      this.connectionManager.peers.set(fromPeerId, peerConnection);\n\n      await peerConnection.createConnection();\n\n      this.debug.log(`Processing offer from ${fromPeerId.substring(0, 8)}...`, {\n        type: offer.type,\n        sdpLength: offer.sdp?.length || 0,\n        hasAudio: offer.sdp?.includes('m=audio') || false,\n        hasVideo: offer.sdp?.includes('m=video') || false\n      });\n\n      // Handle the offer using PeerConnection's method\n      const answer = await peerConnection.handleOffer(offer);\n\n      this.debug.log(`Answer created for ${fromPeerId.substring(0, 8)}...`, {\n        type: answer.type,\n        sdpLength: answer.sdp?.length || 0,\n        hasAudio: answer.sdp?.includes('m=audio') || false,\n        hasVideo: answer.sdp?.includes('m=video') || false\n      });\n\n      this.debug.log('Sending answer to', fromPeerId);\n\n      // ENHANCED DEBUGGING: Log the exact answer being sent\n      this.debug.log(`\uD83D\uDD04 ANSWER SEND DEBUG: Sending answer to ${fromPeerId.substring(0, 8)}...`);\n      this.debug.log(`\uD83D\uDD04 ANSWER SEND DEBUG: Answer type: ${answer.type}`);\n      this.debug.log(`\uD83D\uDD04 ANSWER SEND DEBUG: Answer SDP length: ${answer.sdp?.length}`);\n      this.debug.log(`\uD83D\uDD04 ANSWER SEND DEBUG: Target peer ID: ${fromPeerId}`);\n\n      // Send answer via signaling\n      await this.mesh.sendSignalingMessage({\n        type: 'answer',\n        data: answer,\n        timestamp: Date.now()\n      }, fromPeerId);\n\n      this.debug.log(`\u2705 ANSWER SEND DEBUG: Answer successfully sent to ${fromPeerId.substring(0, 8)}...`);\n      this.mesh.emit('statusChanged', { type: 'info', message: `Answer sent to ${fromPeerId.substring(0, 8)}...` });\n      // Clear connection attempt since we're now processing the connection\n      this.mesh.peerDiscovery.clearConnectionAttempt(fromPeerId);\n    } catch (error) {\n      this.debug.error('Failed to handle offer from', fromPeerId, ':', error);\n\n      // If it's a state error, handle gracefully\n      if (error.message.includes('state:')) {\n        this.debug.log(`Offer ignored for ${fromPeerId.substring(0, 8)}... - connection state issue (likely race condition)`);\n        this.mesh.emit('statusChanged', { type: 'info', message: `Offer skipped for ${fromPeerId.substring(0, 8)}... (connection state conflict)` });\n      } else {\n        this.mesh.emit('statusChanged', { type: 'error', message: `Failed to handle offer from ${fromPeerId.substring(0, 8)}...: ${error.message}` });\n        this.connectionManager.cleanupFailedConnection(fromPeerId);\n      }\n    }\n  }\n\n  async handleRenegotiationOffer(offer, fromPeerId) {\n    this.debug.log(`\uD83D\uDD04 Handling renegotiation offer via signaling from ${fromPeerId.substring(0, 8)}...`);\n\n    // Find the existing peer connection\n    const peerConnection = this.connectionManager.getPeer(fromPeerId);\n    if (!peerConnection) {\n      this.debug.error(`No peer connection found for renegotiation from ${fromPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    try {\n      // Handle the renegotiation offer and get answer\n      const answer = await peerConnection.handleOffer(offer);\n\n      // CRITICAL FIX: Send the answer back as 'renegotiation-answer', not regular 'answer'\n      // This ensures the initiator receives the correct message type for renegotiation completion\n      await this.mesh.sendSignalingMessage({\n        type: 'renegotiation-answer',\n        data: answer,\n        timestamp: Date.now()\n      }, fromPeerId);\n\n      this.debug.log(`\u2705 Renegotiation completed via signaling with ${fromPeerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`\u274C Failed to handle renegotiation offer via signaling from ${fromPeerId.substring(0, 8)}...`, error);\n    }\n  }\n\n  async handleAnswer(answer, fromPeerId) {\n    this.debug.log('\uD83D\uDD04 ANSWER RECEIVE DEBUG: Handling answer from', fromPeerId);\n    this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Our peer ID: ${this.mesh.peerId.substring(0, 8)}...`);\n    this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Answer from: ${fromPeerId.substring(0, 8)}...`);\n\n    // Validate answer data structure before proceeding\n    if (!answer || typeof answer !== 'object') {\n      this.debug.error(`Invalid answer data from ${fromPeerId}:`, answer);\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid answer data from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    if (!answer.type || answer.type !== 'answer') {\n      this.debug.error(`Invalid answer type from ${fromPeerId}:`, answer.type);\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid answer type from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    if (!answer.sdp || typeof answer.sdp !== 'string' || answer.sdp.length < 10) {\n      this.debug.error(`Invalid answer SDP from ${fromPeerId}:`, answer.sdp?.substring(0, 100) || 'undefined');\n      this.mesh.emit('statusChanged', { type: 'error', message: `Invalid answer SDP from ${fromPeerId.substring(0, 8)}...` });\n      return;\n    }\n\n    // CRITICAL DEBUG: Check if we have a peer connection for this answer\n    const peerConnection = this.connectionManager.getPeer(fromPeerId);\n    this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Found peer connection: ${!!peerConnection}`);\n    if (peerConnection) {\n      this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Peer connection state: ${peerConnection.connection?.signalingState}`);\n      this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Is initiator: ${peerConnection.isInitiator}`);\n    }\n\n    if (peerConnection) {\n      try {\n        this.debug.log(`\uD83D\uDD04 ANSWER RECEIVE DEBUG: Processing answer from ${fromPeerId.substring(0, 8)}...`);\n        await peerConnection.handleAnswer(answer);\n        this.debug.log(`\u2705 ANSWER RECEIVE DEBUG: Answer processed successfully from ${fromPeerId.substring(0, 8)}...`);\n        this.mesh.emit('statusChanged', { type: 'info', message: `Answer processed from ${fromPeerId.substring(0, 8)}...` });\n      } catch (error) {\n        this.debug.error('\u274C ANSWER RECEIVE DEBUG: Failed to handle answer:', error);\n\n        // If it's a state error (connection already stable), don't treat as failure\n        if (error.message.includes('state:') || error.message.includes('stable')) {\n          this.debug.log(`Answer ignored for ${fromPeerId.substring(0, 8)}... - connection state issue (likely race condition resolved)`);\n          this.mesh.emit('statusChanged', { type: 'info', message: `Answer skipped for ${fromPeerId.substring(0, 8)}... (connection already stable)` });\n        } else {\n          this.mesh.emit('statusChanged', { type: 'error', message: `Failed to handle answer from ${fromPeerId.substring(0, 8)}...: ${error.message}` });\n        }\n      }\n    } else {\n      this.debug.log('\u274C ANSWER RECEIVE DEBUG: No peer connection found for answer from', fromPeerId);\n    }\n  }\n\n  handleConnectionRejected(data, fromPeerId) {\n    this.debug.log(`Connection rejected by ${fromPeerId.substring(0, 8)}...: ${data.reason} (${data.details})`);\n    this.mesh.emit('statusChanged', {\n      type: 'info',\n      message: `Connection rejected by ${fromPeerId.substring(0, 8)}... (${data.reason})`\n    });\n\n    // Clean up any pending connection attempt\n    this.connectionManager.connectionAttempts.delete(fromPeerId);\n\n    // Remove the peer connection if it exists and is not connected\n    const peerConnection = this.connectionManager.getPeer(fromPeerId);\n    if (peerConnection && peerConnection.getStatus() !== 'connected') {\n      peerConnection.close();\n      this.connectionManager.peers.delete(fromPeerId);\n    }\n\n    // Clear any discovery connection attempt tracking\n    this.mesh.peerDiscovery.clearConnectionAttempt(fromPeerId);\n\n    // If we have no connections, immediately try other peers more aggressively\n    const connectedCount = this.connectionManager.getConnectedPeerCount();\n    if (connectedCount === 0) {\n      this.debug.log(`Connection rejected and peer is isolated (${connectedCount} connections) - trying alternative peers immediately`);\n\n      // Immediately try to connect to other discovered peers\n      const discoveredPeers = Array.from(this.mesh.peerDiscovery.getDiscoveredPeers());\n      const availablePeers = discoveredPeers.filter(peer =>\n        peer.peerId !== fromPeerId &&\n                !this.connectionManager.hasPeer(peer.peerId) &&\n                !this.mesh.peerDiscovery.isAttemptingConnection(peer.peerId)\n      );\n\n      if (availablePeers.length > 0) {\n        // Sort by XOR distance and try the closest available peer\n        const sortedByDistance = availablePeers.sort((a, b) => {\n          const distA = this.mesh.peerDiscovery.calculateXorDistance(this.mesh.peerId, a.peerId);\n          const distB = this.mesh.peerDiscovery.calculateXorDistance(this.mesh.peerId, b.peerId);\n          return distA < distB ? -1 : 1;\n        });\n\n        const nextPeer = sortedByDistance[0];\n        this.debug.log(`Immediately attempting connection to next closest peer: ${nextPeer.peerId.substring(0, 8)}...`);\n        this.connectionManager.connectToPeer(nextPeer.peerId);\n      }\n    } else {\n      // Regular mesh optimization for non-isolated peers\n      setTimeout(() => {\n        this.mesh.peerDiscovery.optimizeMeshConnections(this.connectionManager.peers);\n      }, 1000);\n    }\n  }\n\n  async handleRenegotiationAnswer(answer, fromPeerId) {\n    console.log('\uD83D\uDEA8 RENEGOTIATION ANSWER: IMMEDIATE PROCESSING from', fromPeerId?.substring(0, 8), 'to', this.mesh.peerId?.substring(0, 8));\n    this.debug.log(`\uD83D\uDD04 CRITICAL FIX: IMMEDIATE renegotiation answer from ${fromPeerId.substring(0, 8)}...`);\n\n    // AGGRESSIVE FIX: Find connection immediately and apply answer\n    const peerConnection = this.connectionManager.getPeer(fromPeerId);\n    if (!peerConnection) {\n      this.debug.error(`\u274C CRITICAL: No peer connection for answer from ${fromPeerId.substring(0, 8)}... - CONNECTION LOST`);\n      return;\n    }\n\n    // CHECK CONNECTION STATE BEFORE APPLYING ANSWER\n    const currentState = peerConnection.connection?.signalingState;\n    this.debug.log(`\uFFFD CRITICAL: Connection state before answer: ${currentState}`);\n\n    if (currentState !== 'have-local-offer') {\n      this.debug.log(`\u26A0\uFE0F CRITICAL: Connection not waiting for answer (state: ${currentState}) - applying anyway`);\n    }\n\n    try {\n      // IMMEDIATE ANSWER APPLICATION - NO DELAYS\n      this.debug.log(`\uD83D\uDD04 CRITICAL: APPLYING ANSWER IMMEDIATELY from ${fromPeerId.substring(0, 8)}...`);\n      await peerConnection.handleAnswer(answer);\n\n      // VERIFY STATE CHANGE\n      const newState = peerConnection.connection?.signalingState;\n      this.debug.log(`\u2705 CRITICAL: Answer applied - state changed from ${currentState} to ${newState}`);\n\n      if (newState === 'stable') {\n        this.debug.log(`\uD83C\uDF89 SUCCESS: Connection with ${fromPeerId.substring(0, 8)}... is now STABLE - media should work!`);\n      } else {\n        this.debug.error(`\u274C CRITICAL: Connection still not stable after answer - state: ${newState}`);\n      }\n\n    } catch (error) {\n      this.debug.error(`\u274C CRITICAL: FAILED to apply renegotiation answer from ${fromPeerId.substring(0, 8)}...`, error);\n\n      // EMERGENCY FIX: Force connection recovery\n      this.debug.log(`\uD83C\uDD98 EMERGENCY: Forcing connection recovery for ${fromPeerId.substring(0, 8)}...`);\n      try {\n        await this.connectionManager.connectToPeer(fromPeerId, false, { emergency: true });\n      } catch (recoveryError) {\n        this.debug.error(`\u274C EMERGENCY: Recovery failed for ${fromPeerId.substring(0, 8)}...`, recoveryError);\n      }\n    }\n  }\n\n  /**\n   * Handle ICE restart offers sent over the mesh\n   */\n  async handleIceRestartOffer(data, fromPeerId) {\n    this.debug.log(`Received ICE restart offer from ${fromPeerId.substring(0, 8)}...`);\n\n    const peerConnection = this.connectionManager.peers.get(fromPeerId);\n    if (!peerConnection) {\n      this.debug.warn(`No peer connection found for ICE restart offer from ${fromPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    try {\n      await peerConnection.handleIceRestartOffer(data.offer);\n      this.debug.log(`Successfully handled ICE restart offer from ${fromPeerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`Failed to handle ICE restart offer from ${fromPeerId.substring(0, 8)}...:`, error);\n    }\n  }\n\n  /**\n   * Handle ICE restart answers sent over the mesh\n   */\n  async handleIceRestartAnswer(data, fromPeerId) {\n    this.debug.log(`Received ICE restart answer from ${fromPeerId.substring(0, 8)}...`);\n\n    const peerConnection = this.connectionManager.peers.get(fromPeerId);\n    if (!peerConnection) {\n      this.debug.warn(`No peer connection found for ICE restart answer from ${fromPeerId.substring(0, 8)}...`);\n      return;\n    }\n\n    try {\n      await peerConnection.handleIceRestartAnswer(data.answer);\n      this.debug.log(`Successfully handled ICE restart answer from ${fromPeerId.substring(0, 8)}...`);\n    } catch (error) {\n      this.debug.error(`Failed to handle ICE restart answer from ${fromPeerId.substring(0, 8)}...:`, error);\n    }\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Simple eviction manager for mesh topology optimization\n * Evicts farthest peers when at capacity to maintain optimal XOR distance topology\n */\nexport class EvictionManager extends EventEmitter {\n  constructor(mesh, connectionManager) {\n    super();\n    this.debug = DebugLogger.create('EvictionManager');\n    this.mesh = mesh;\n    this.connectionManager = connectionManager;\n  }\n\n  shouldEvictForPeer(newPeerId) {\n    // Only evict for mesh topology optimization\n    if (!this.mesh.evictionStrategy) {\n      this.debug.log('Eviction disabled - evictionStrategy is false');\n      return null;\n    }\n\n    // Check total peer count (including connecting peers) to prevent race conditions\n    const totalPeerCount = this.connectionManager.peers.size;\n    const connectedCount = this.connectionManager.getConnectedPeerCount();\n    \n    // STRICT RULE: Never evict if we're under max capacity, unless we're completely isolated\n    if (totalPeerCount < this.mesh.maxPeers) {\n      this.debug.log(`No eviction needed: ${totalPeerCount}/${this.mesh.maxPeers} peers (connected: ${connectedCount})`);\n      return null;\n    }\n\n    // Special case: if we have 0 connected peers (isolated), be aggressive about making room\n    if (connectedCount === 0) {\n      this.debug.log(`Isolated peer scenario: finding any peer to evict for ${newPeerId.substring(0, 8)}...`);\n      // Find any peer to evict (even connecting ones) to make room for this connection\n      const anyPeerId = Array.from(this.connectionManager.peers.keys())[0];\n      if (anyPeerId) {\n        this.debug.log(`Will evict any peer ${anyPeerId.substring(0, 8)}... to escape isolation for ${newPeerId.substring(0, 8)}...`);\n        return anyPeerId;\n      }\n    }\n\n    // If XOR routing is enabled, use distance-based eviction\n    if (this.mesh.xorRouting) {\n      const newPeerDistance = this.calculateXorDistance(this.mesh.peerId, newPeerId);\n      const farthestPeerId = this.findFarthestPeer();\n\n      if (!farthestPeerId) {\n        this.debug.log('No eviction candidate found (no peers to evict)');\n        return null;\n      }\n\n      const farthestDistance = this.calculateXorDistance(this.mesh.peerId, farthestPeerId);\n\n      this.debug.log(`Eviction check: new peer ${newPeerId.substring(0, 8)}... (distance: ${newPeerDistance.toString(16).substring(0, 8)}) vs farthest ${farthestPeerId.substring(0, 8)}... (distance: ${farthestDistance.toString(16).substring(0, 8)})`);\n\n      // STRICT RULE: Only evict if we're at max capacity AND the new peer is closer\n      // Removed the aggressive eviction condition that could evict when under capacity\n      const shouldEvict = newPeerDistance < farthestDistance;\n\n      if (shouldEvict) {\n        this.debug.log(`Will evict ${farthestPeerId.substring(0, 8)}... for closer peer ${newPeerId.substring(0, 8)}... (${totalPeerCount}/${this.mesh.maxPeers} peers)`);\n        return farthestPeerId;\n      }\n\n      this.debug.log(`Not evicting for ${newPeerId.substring(0, 8)}... - new peer is not closer (${totalPeerCount}/${this.mesh.maxPeers} peers)`);\n      return null;\n    } else {\n      // If XOR routing is disabled, use simple FIFO eviction - evict oldest peer\n      this.debug.log(`XOR routing disabled - using FIFO eviction for ${newPeerId.substring(0, 8)}...`);\n      const oldestPeerId = this.findOldestPeer();\n      if (oldestPeerId) {\n        this.debug.log(`Will evict oldest peer ${oldestPeerId.substring(0, 8)}... for new peer ${newPeerId.substring(0, 8)}... (${totalPeerCount}/${this.mesh.maxPeers} peers)`);\n        return oldestPeerId;\n      }\n\n      this.debug.log('No eviction candidate found (no peers to evict)');\n      return null;\n    }\n  }\n\n  async evictPeer(peerId, reason = 'topology optimization') {\n    const peerConnection = this.connectionManager.getPeer(peerId);\n    if (!peerConnection) {\n      this.debug.log(`Cannot evict ${peerId.substring(0, 8)}... - peer not found`);\n      return;\n    }\n\n    this.debug.log(`Evicting ${peerId.substring(0, 8)}... (${reason})`);\n\n    // Send eviction notice\n    try {\n      peerConnection.sendMessage({\n        type: 'eviction',\n        reason,\n        from: this.mesh.peerId\n      });\n    } catch (error) {\n      this.debug.log('Failed to send eviction notice:', error.message);\n    }\n\n    // Close connection and clean up\n    peerConnection.close();\n    this.connectionManager.peers.delete(peerId);\n    this.mesh.peerDiscovery.clearConnectionAttempt(peerId);\n\n    this.mesh.emit('peerDisconnected', { peerId, reason: `evicted: ${reason}` });\n    this.connectionManager.emit('peersUpdated');\n  }\n\n  handleEvictionNotice(message, fromPeerId) {\n    this.debug.log(`Evicted by ${fromPeerId.substring(0, 8)}... (${message.reason})`);\n\n    // Clean up the connection\n    this.connectionManager.peers.delete(fromPeerId);\n    this.mesh.peerDiscovery.clearConnectionAttempt(fromPeerId);\n\n    this.mesh.emit('peerEvicted', { fromPeerId, reason: message.reason });\n    this.connectionManager.emit('peersUpdated');\n\n    // The evicted peer will naturally discover other peers and connect to those it's closer to\n    // No complex reconnection logic needed - let peer discovery handle it\n  }\n\n  calculateXorDistance(peerId1, peerId2) {\n    let distance = 0n;\n    for (let i = 0; i < Math.min(peerId1.length, peerId2.length); i += 2) {\n      const byte1 = parseInt(peerId1.substr(i, 2), 16);\n      const byte2 = parseInt(peerId2.substr(i, 2), 16);\n      const xor = byte1 ^ byte2;\n      distance = (distance << 8n) | BigInt(xor);\n    }\n    return distance;\n  }\n\n  findFarthestPeer() {\n    if (this.connectionManager.peers.size === 0) {\n      this.debug.log('No peers available for eviction');\n      return null;\n    }\n\n    let farthestPeer = null;\n    let maxDistance = 0n;\n    let candidateCount = 0;\n\n    this.connectionManager.peers.forEach((peerConnection, peerId) => {\n      const status = peerConnection.getStatus();\n      // LOOSENED: Accept more peer states as eviction candidates\n      if (status === 'connected' ||\n                status === 'channel-connecting' ||\n                status === 'connecting' ||\n                status === 'channel-open') {\n        candidateCount++;\n        const distance = this.calculateXorDistance(this.mesh.peerId, peerId);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          farthestPeer = peerId;\n        }\n      }\n    });\n\n    // FALLBACK: If no candidates found with strict criteria, try ANY peer\n    if (!farthestPeer && this.connectionManager.peers.size > 0) {\n      this.debug.log('No eviction candidates with connected/connecting status, trying any peer...');\n      this.connectionManager.peers.forEach((peerConnection, peerId) => {\n        candidateCount++;\n        const distance = this.calculateXorDistance(this.mesh.peerId, peerId);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          farthestPeer = peerId;\n        }\n      });\n    }\n\n    if (farthestPeer) {\n      this.debug.log(`Found farthest peer for eviction: ${farthestPeer.substring(0, 8)}... (distance: ${maxDistance.toString(16).substring(0, 8)}, ${candidateCount} candidate peers)`);\n    } else {\n      this.debug.log(`No peers available for eviction (${candidateCount} candidate peers)`);\n    }\n\n    return farthestPeer;\n  }\n\n  findOldestPeer() {\n    if (this.connectionManager.peers.size === 0) {\n      this.debug.log('No peers available for FIFO eviction');\n      return null;\n    }\n\n    let oldestPeer = null;\n    let oldestTime = Date.now();\n    let candidateCount = 0;\n\n    this.connectionManager.peers.forEach((peerConnection, peerId) => {\n      const status = peerConnection.getStatus();\n      // LOOSENED: Accept more peer states as eviction candidates\n      if (status === 'connected' ||\n                status === 'channel-connecting' ||\n                status === 'connecting' ||\n                status === 'channel-open') {\n        candidateCount++;\n        const connectionTime = peerConnection.connectionStartTime || Date.now();\n        if (connectionTime < oldestTime) {\n          oldestTime = connectionTime;\n          oldestPeer = peerId;\n        }\n      }\n    });\n\n    // FALLBACK: If no candidates found with strict criteria, try ANY peer\n    if (!oldestPeer && this.connectionManager.peers.size > 0) {\n      this.debug.log('No FIFO eviction candidates with connected/connecting status, trying any peer...');\n      this.connectionManager.peers.forEach((peerConnection, peerId) => {\n        candidateCount++;\n        const connectionTime = peerConnection.connectionStartTime || Date.now();\n        if (connectionTime < oldestTime) {\n          oldestTime = connectionTime;\n          oldestPeer = peerId;\n        }\n      });\n    }\n\n    if (oldestPeer) {\n      this.debug.log(`Found oldest peer for eviction: ${oldestPeer.substring(0, 8)}... (connected at: ${new Date(oldestTime).toLocaleTimeString()}, ${candidateCount} candidates)`);\n    } else {\n      this.debug.log(`No peers available for FIFO eviction (${candidateCount} candidates)`);\n    }\n\n    return oldestPeer;\n  }\n\n  disconnectExcessPeers() {\n    if (this.connectionManager.peers.size <= this.mesh.maxPeers) return;\n\n    const peerEntries = Array.from(this.connectionManager.peers.entries())\n      .filter(([_, peerConnection]) => peerConnection.connectionStartTime)\n      .sort((a, b) => a[1].connectionStartTime - b[1].connectionStartTime);\n\n    const toDisconnect = peerEntries.slice(0, this.connectionManager.peers.size - this.mesh.maxPeers);\n\n    toDisconnect.forEach(([peerId, peerConnection]) => {\n      this.debug.log(`Disconnecting ${peerId.substring(0, 8)}... (over max peers limit)`);\n      peerConnection.close();\n      this.connectionManager.peers.delete(peerId);\n      this.mesh.peerDiscovery.clearConnectionAttempt(peerId);\n      this.mesh.emit('peerDisconnected', { peerId, reason: 'over max peers limit' });\n    });\n\n    this.connectionManager.emit('peersUpdated');\n  }\n\n  clearEvictionTracking(_peerId) {\n    // No eviction tracking in simplified system\n  }\n\n  cleanup() {\n    // Simple cleanup - no complex state to manage\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Manages mesh optimization, connection strategies, and peer discovery optimization\n */\nexport class MeshOptimizer extends EventEmitter {\n  constructor(mesh, connectionManager, evictionManager) {\n    super();\n    this.debug = DebugLogger.create('MeshOptimizer');\n    this.mesh = mesh;\n    this.connectionManager = connectionManager;\n    this.evictionManager = evictionManager;\n  }\n\n  handleOptimizeConnections(unconnectedPeers) {\n    if (!this.mesh.autoDiscovery) return;\n\n    // For small mesh sizes, optimize if under capacity. For larger meshes, only optimize if significantly under capacity.\n    const currentConnected = this.connectionManager.getConnectedPeerCount();\n\n    // CRITICAL FIX: If we have no connections and there are available peers, we should connect\n    // This handles the case where a peer with a small ID needs to connect to maintain mesh connectivity\n    const hasNoConnections = currentConnected === 0;\n    const belowMinimum = currentConnected < this.mesh.minPeers;\n\n    if (hasNoConnections && unconnectedPeers.length > 0) {\n      this.debug.log(`Peer has no connections but found ${unconnectedPeers.length} unconnected peers - forcing connection attempt`);\n      // Force connection to the closest peer by XOR distance\n      const sortedByDistance = unconnectedPeers.sort((a, b) => {\n        const distA = this.calculateXorDistance(this.mesh.peerId, a);\n        const distB = this.calculateXorDistance(this.mesh.peerId, b);\n        return distA < distB ? -1 : 1;\n      });\n\n      const targetPeer = sortedByDistance[0];\n      this.debug.log(`Forcing connection to closest peer: ${targetPeer.substring(0, 8)}... (no connections, mesh connectivity required)`);\n      this.connectionManager.connectToPeer(targetPeer);\n      return;\n    }\n\n    if (belowMinimum && unconnectedPeers.length > 0) {\n      this.debug.log(`Below minimum peers (${currentConnected}/${this.mesh.minPeers}) - connecting to additional peers`);\n      const needed = Math.min(this.mesh.minPeers - currentConnected, unconnectedPeers.length);\n\n      // Sort by XOR distance and connect to closest peers\n      const sortedByDistance = unconnectedPeers.sort((a, b) => {\n        const distA = this.calculateXorDistance(this.mesh.peerId, a);\n        const distB = this.calculateXorDistance(this.mesh.peerId, b);\n        return distA < distB ? -1 : 1;\n      });\n\n      for (let i = 0; i < needed; i++) {\n        const targetPeer = sortedByDistance[i];\n        this.debug.log(`Connecting to reach minimum: ${targetPeer.substring(0, 8)}...`);\n        this.connectionManager.connectToPeer(targetPeer);\n      }\n      return;\n    }\n\n    // Normal optimization logic\n    if (this.mesh.maxPeers <= 3) {\n      // For small meshes, always try to reach max capacity\n      if (currentConnected >= this.mesh.maxPeers) {\n        this.debug.log(`Skipping optimization - already at max capacity ${currentConnected}/${this.mesh.maxPeers}`);\n        return;\n      }\n    } else {\n      // For larger meshes, only optimize if below 70% capacity\n      const targetThreshold = Math.floor(this.mesh.maxPeers * 0.7);\n      if (currentConnected >= targetThreshold) {\n        this.debug.log(`Skipping optimization - ${currentConnected}/${this.mesh.maxPeers} peers connected (threshold: ${targetThreshold})`);\n        return;\n      }\n    }\n\n    const availableSlots = this.mesh.maxPeers - currentConnected;\n    const peersToConnect = unconnectedPeers.slice(0, Math.min(availableSlots, 1)); // Only connect to 1 peer at a time\n\n    this.debug.log(`Optimizing connections carefully: ${availableSlots} slots available, connecting to ${peersToConnect.length} peer(s)`);\n\n    peersToConnect.forEach((peerId, _index) => {\n      if (this.mesh.peerDiscovery.shouldInitiateConnection(peerId)) {\n        this.debug.log(`Initiating immediate connection to ${peerId.substring(0, 8)}... in optimization`);\n        // Double-check conditions before connecting\n        if (this.connectionManager.canAcceptMorePeers() &&\n                    !this.connectionManager.hasPeer(peerId) &&\n                    !this.mesh.peerDiscovery.isAttemptingConnection(peerId)) {\n          this.connectionManager.connectToPeer(peerId);\n        } else {\n          this.debug.log(`Skipping connection to ${peerId.substring(0, 8)}... - conditions changed`);\n        }\n      } else {\n        this.debug.log(`Not initiating connection to ${peerId.substring(0, 8)}... (should not initiate)`);\n      }\n    });\n  }\n\n  calculateXorDistance(peerId1, peerId2) {\n    let distance = 0n;\n    for (let i = 0; i < Math.min(peerId1.length, peerId2.length); i += 2) {\n      const byte1 = parseInt(peerId1.substr(i, 2), 16);\n      const byte2 = parseInt(peerId2.substr(i, 2), 16);\n      const xor = byte1 ^ byte2;\n      distance = (distance << 8n) | BigInt(xor);\n    }\n    return distance;\n  }\n\n  // Method to force connection attempts to all discovered peers\n  forceConnectToAllPeers() {\n    const discoveredPeers = this.mesh.getDiscoveredPeers();\n    let connectionAttempts = 0;\n\n    this.debug.log(`Forcing connections to ${discoveredPeers.length} discovered peers...`);\n\n    discoveredPeers.forEach(peer => {\n      if (!this.connectionManager.hasPeer(peer.peerId) && this.connectionManager.canAcceptMorePeers()) {\n        this.debug.log(`Force connecting to ${peer.peerId.substring(0, 8)}...`);\n        this.connectionManager.connectToPeer(peer.peerId);\n        connectionAttempts++;\n      }\n    });\n\n    this.debug.log(`Initiated ${connectionAttempts} forced connection attempts`);\n    return connectionAttempts;\n  }\n\n  // Debug method to help diagnose connectivity issues\n  debugConnectivity() {\n    const connectedPeers = this.connectionManager.getConnectedPeerCount();\n    const discoveredPeers = this.mesh.getDiscoveredPeers();\n    const totalPeers = this.connectionManager.peers.size;\n\n    this.debug.log('=== CONNECTIVITY DEBUG ===');\n    this.debug.log(`My Peer ID: ${this.mesh.peerId}`);\n    this.debug.log(`Connected Peers: ${connectedPeers}/${this.mesh.maxPeers}`);\n    this.debug.log(`Total Peer Objects: ${totalPeers}`);\n    this.debug.log(`Discovered Peers: ${discoveredPeers.length}`);\n\n    this.debug.log('\\nPeer Details:');\n    this.connectionManager.peers.forEach((peerConnection, peerId) => {\n      const status = peerConnection.getStatus();\n      const dataChannelReady = peerConnection.dataChannelReady;\n      const connectionState = peerConnection.connection?.connectionState || 'unknown';\n      const dataChannelState = peerConnection.dataChannel?.readyState || 'unknown';\n\n      this.debug.log(`  ${peerId.substring(0, 8)}... - Status: ${status}, WebRTC: ${connectionState}, DataChannel: ${dataChannelState}, Ready: ${dataChannelReady}`);\n    });\n\n    this.debug.log('\\nDiscovered Peers:');\n    discoveredPeers.forEach(peer => {\n      const shouldInitiate = this.mesh.peerId < peer.peerId;\n      const isConnected = this.connectionManager.hasPeer(peer.peerId);\n      this.debug.log(`  ${peer.peerId.substring(0, 8)}... - ShouldInitiate: ${shouldInitiate}, IsConnected: ${isConnected}`);\n    });\n\n    this.debug.log('\\nConnection Attempts:');\n    this.connectionManager.connectionAttempts.forEach((attempts, peerId) => {\n      this.debug.log(`  ${peerId.substring(0, 8)}... - Attempts: ${attempts}/${this.connectionManager.maxConnectionAttempts}`);\n    });\n\n    this.debug.log('\\nEviction Status:');\n    this.debug.log(`  Eviction Strategy: ${this.mesh.evictionStrategy ? 'enabled' : 'disabled'}`);\n    this.debug.log(`  XOR Routing: ${this.mesh.xorRouting ? 'enabled' : 'disabled'}`);\n\n    this.debug.log('=== END DEBUG ===\\n');\n\n    return {\n      connectedPeers,\n      totalPeers,\n      discoveredPeers: discoveredPeers.length,\n      evictionEnabled: this.mesh.evictionStrategy,\n      xorRouting: this.mesh.xorRouting,\n      peerStatuses: Array.from(this.connectionManager.peers.entries()).map(([peerId, conn]) => ({\n        peerId: peerId.substring(0, 8),\n        status: conn.getStatus(),\n        dataChannelReady: conn.dataChannelReady\n      }))\n    };\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Manages cleanup operations for signaling data and peer connections\n */\nexport class CleanupManager extends EventEmitter {\n  constructor(mesh) {\n    super();\n    this.debug = DebugLogger.create('CleanupManager');\n    this.mesh = mesh;\n    this.cleanupInProgress = new Set();\n  }\n\n  async cleanupSignalingData(peerId) {\n    // Prevent duplicate cleanup calls\n    if (this.cleanupInProgress.has(peerId)) {\n      this.debug.log('Cleanup already in progress for', peerId);\n      return;\n    }\n\n    this.cleanupInProgress.add(peerId);\n\n    try {\n      this.debug.log('Cleaning up signaling data for', peerId);\n\n      const response = await this.mesh.signalingClient.sendSignalingMessage({\n        type: 'cleanup',\n        data: {\n          peerId: this.mesh.peerId,\n          targetPeerId: peerId,\n          timestamp: Date.now(),\n          reason: 'connection_established'\n        },\n        targetPeerId: peerId\n      });\n\n      // Only log if something was actually cleaned up\n      if (response.cleaned && (response.cleaned.signaling > 0 || response.cleaned.discovery > 0)) {\n        this.debug.log('Signaling cleanup completed for', peerId, response);\n        this.mesh.emit('statusChanged', { type: 'info', message: `Cleaned up signaling data with ${peerId.substring(0, 8)}...` });\n      }\n    } catch (error) {\n      this.debug.error('Failed to cleanup signaling data for', peerId, error);\n      // Don't show error to user as this is background cleanup\n    } finally {\n      this.cleanupInProgress.delete(peerId);\n    }\n  }\n\n  async cleanupAllSignalingData() {\n    if (this.mesh.signalingClient && this.mesh.peerId) {\n      try {\n        const response = await this.mesh.signalingClient.sendSignalingMessage({\n          type: 'cleanup-all',\n          data: {\n            peerId: this.mesh.peerId,\n            timestamp: Date.now(),\n            reason: 'peer_cleanup'\n          }\n        });\n\n        // Only log if something was actually cleaned\n        if (response.cleaned > 0) {\n          this.debug.log(`Cleaned up ${response.cleaned} stale signaling items`);\n        }\n      } catch (error) {\n        this.debug.log('Failed to cleanup all signaling data:', error.message);\n      }\n    }\n  }\n\n  cleanupAllSignalingDataSync() {\n    if (this.mesh.signalingClient && this.mesh.connected && this.mesh.peerId) {\n      try {\n        // Send cleanup message via WebSocket synchronously\n        this.mesh.signalingClient.sendSignalingMessage({\n          type: 'cleanup-all',\n          data: {\n            peerId: this.mesh.peerId,\n            timestamp: Date.now(),\n            reason: 'browser_unload'\n          }\n        }).catch(error => {\n          this.debug.log('Failed to send cleanup-all message:', error.message);\n        });\n        this.debug.log('Cleanup-all message sent via WebSocket');\n      } catch (error) {\n        this.debug.log('Failed to send cleanup-all message:', error.message);\n      }\n    }\n  }\n\n  // Manual cleanup method for already-connected mesh networks\n  async cleanupStaleSignalingData() {\n    if (!this.mesh.signalingClient || !this.mesh.connected) {\n      this.debug.log('Cannot cleanup - not connected to signaling server');\n      return;\n    }\n\n    this.debug.log('Manually cleaning up stale signaling data for all connected peers...');\n\n    try {\n      // Clean up signaling data for each connected peer\n      const cleanupPromises = [];\n\n      // Use safer iteration to avoid race conditions\n      if (this.mesh.connectionManager && this.mesh.connectionManager.peers) {\n        const peerEntries = Array.from(this.mesh.connectionManager.peers.entries());\n\n        for (const [peerId, peerConnection] of peerEntries) {\n          try {\n            if (peerConnection && peerConnection.getStatus && peerConnection.getStatus() === 'connected') {\n              cleanupPromises.push(this.cleanupSignalingData(peerId));\n            }\n          } catch (error) {\n            this.debug.log(`Error checking peer ${peerId} status during cleanup:`, error.message);\n          }\n        }\n      }\n\n      // Wait for all peer-specific cleanups to complete\n      if (cleanupPromises.length > 0) {\n        await Promise.allSettled(cleanupPromises);\n      }\n\n      // Then do a comprehensive cleanup\n      await this.cleanupAllSignalingData();\n\n      this.debug.log('Manual cleanup completed for all connected peers');\n      this.mesh.emit('statusChanged', { type: 'info', message: 'Cleaned up stale signaling data' });\n    } catch (error) {\n      this.debug.error('Manual cleanup failed:', error);\n      this.mesh.emit('statusChanged', { type: 'error', message: 'Failed to cleanup signaling data' });\n    }\n  }\n\n  sendGoodbyeMessageSync() {\n    if (this.mesh.signalingClient && this.mesh.connected) {\n      try {\n        // For WebSocket, send goodbye message synchronously\n        this.mesh.signalingClient.sendGoodbyeMessage();\n        this.debug.log('Goodbye message sent via WebSocket');\n      } catch (error) {\n        this.debug.log('Failed to send goodbye message:', error.message);\n      }\n    }\n  }\n\n  async sendGoodbyeMessage() {\n    if (this.mesh.signalingClient && this.mesh.connected) {\n      try {\n        await this.mesh.signalingClient.sendSignalingMessage({\n          type: 'goodbye',\n          data: { peerId: this.mesh.peerId, timestamp: Date.now() }\n        });\n      } catch (error) {\n        this.debug.log('Failed to send goodbye message:', error.message);\n      }\n    }\n  }\n\n  setupUnloadHandlers() {\n    // Handle page unload/refresh - ONLY clean up ALL peer data on actual unload\n    if (typeof window !== 'undefined') {\n      const handleUnload = () => {\n        this.debug.log('Page unloading - cleaning up ALL peer data');\n        this.sendGoodbyeMessageSync();\n        this.cleanupAllSignalingDataSync();\n      };\n\n      // Only trigger cleanup on actual page unload scenarios\n      // DO NOT cleanup on focus loss or visibility change (breaks multi-tab usage)\n      window.addEventListener('beforeunload', handleUnload);\n      window.addEventListener('unload', handleUnload);\n      window.addEventListener('pagehide', handleUnload);\n    }\n  }\n\n  cleanup() {\n    this.cleanupInProgress.clear();\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Manages storage operations, URL handling, and configuration persistence\n */\nexport class StorageManager extends EventEmitter {\n  constructor(mesh) {\n    super();\n    this.debug = DebugLogger.create('StorageManager');\n    this.mesh = mesh;\n  }\n\n  loadSignalingUrlFromStorage() {\n    // Use environment-aware storage detection\n    if (environmentDetector.hasLocalStorage) {\n      const savedUrl = localStorage.getItem('pigon-signaling-url');\n      if (savedUrl) {\n        this.mesh.signalingUrl = savedUrl;\n        this.mesh.emit('statusChanged', { type: 'urlLoaded', signalingUrl: savedUrl });\n        return savedUrl;\n      }\n    } else if (environmentDetector.isNodeJS) {\n      // In Node.js, we could potentially use file-based storage\n      this.debug.log('Local storage not available in Node.js environment');\n    }\n    return null;\n  }\n\n  saveSignalingUrlToStorage(url) {\n    if (environmentDetector.hasLocalStorage && url) {\n      localStorage.setItem('pigon-signaling-url', url);\n    } else if (environmentDetector.isNodeJS) {\n      // In Node.js, we could potentially save to a config file\n      this.debug.log('Storage not implemented for Node.js environment');\n    }\n  }\n\n  loadSignalingUrlFromQuery() {\n    // Only works in browser and NativeScript environments with location/URL support\n    if (!environmentDetector.isBrowser && !environmentDetector.isNativeScript) return this.loadSignalingUrlFromStorage();\n\n    // Check if we have URL search capabilities\n    if (typeof URLSearchParams === 'undefined' ||\n        (environmentDetector.isBrowser && typeof window === 'undefined') ||\n        (environmentDetector.isBrowser && typeof window.location === 'undefined')) {\n      return this.loadSignalingUrlFromStorage();\n    }\n\n    let searchParams;\n    if (environmentDetector.isBrowser) {\n      searchParams = new URLSearchParams(window.location.search);\n    } else if (environmentDetector.isNativeScript) {\n      // NativeScript might not have window.location, fallback to storage\n      return this.loadSignalingUrlFromStorage();\n    }\n\n    const signalingUrl = searchParams?.get('api') || searchParams?.get('url') || searchParams?.get('signaling');\n\n    if (signalingUrl) {\n      // Only emit event if URL is different from current one\n      const currentUrl = this.mesh.signalingUrl;\n      this.mesh.signalingUrl = signalingUrl;\n      this.saveSignalingUrlToStorage(signalingUrl);\n\n      if (currentUrl !== signalingUrl) {\n        this.mesh.emit('statusChanged', { type: 'urlLoaded', signalingUrl });\n      }\n      return signalingUrl;\n    }\n\n    // Fallback to localStorage if no URL in query params\n    return this.loadSignalingUrlFromStorage();\n  }\n\n  validatePeerId(peerId) {\n    return typeof peerId === 'string' && /^[a-fA-F0-9]{40}$/.test(peerId);\n  }\n\n  saveSettings(settings) {\n    if (environmentDetector.hasLocalStorage) {\n      localStorage.setItem('pigon-settings', JSON.stringify(settings));\n    }\n  }\n\n  loadSettings() {\n    if (environmentDetector.hasLocalStorage) {\n      const saved = localStorage.getItem('pigon-settings');\n      if (saved) {\n        try {\n          return JSON.parse(saved);\n        } catch (error) {\n          this.debug.error('Failed to parse saved settings:', error);\n        }\n      }\n    }\n    return {};\n  }\n\n  clearStorage() {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.removeItem('pigon-signaling-url');\n      localStorage.removeItem('pigon-settings');\n    }\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Manages gossip protocol for message propagation across the mesh network\n * Ensures all peers receive messages even if not directly connected\n */\nexport class GossipManager extends EventEmitter {\n  constructor(mesh, connectionManager) {\n    super();\n    this.mesh = mesh;\n    this.connectionManager = connectionManager;\n    this.debug = DebugLogger.create('GossipManager');\n\n    // Track message history to prevent infinite loops\n    this.seenMessages = new Map(); // messageId -> { timestamp, ttl }\n    this.messageHistory = new Map(); // messageId -> message content\n\n    // Track key exchanges to prevent duplicates (separate from general message deduplication)\n    this.processedKeyExchanges = new Map(); // \"peerId:keyType\" -> timestamp\n\n    // Configuration\n    this.maxTTL = 10; // Maximum hops before message expires\n    this.messageExpiryTime = 5 * 60 * 1000; // 5 minutes\n    this.cleanupInterval = 60 * 1000; // 1 minute\n    this.cleanupTimer = null; // Track cleanup timer for proper cleanup\n\n    this.startCleanupTimer();\n  }\n\n  /**\n     * Broadcast a message to all peers in the network using gossip protocol\n     */\n  async broadcastMessage(content, messageType = 'chat') {\n    // Validate content\n    if (content === undefined || content === null) {\n      this.debug.error('Cannot broadcast message with undefined/null content');\n      return null;\n    }\n\n    if (messageType === 'chat' && (typeof content !== 'string' || content.trim().length === 0)) {\n      this.debug.error('Cannot broadcast empty chat message');\n      return null;\n    }\n\n    if (messageType === 'encrypted' && (typeof content !== 'object' || !content.encrypted)) {\n      this.debug.error('Cannot broadcast invalid encrypted message');\n      return null;\n    }\n\n    const messageId = await this.generateMessageId();\n    const message = {\n      id: messageId,\n      type: 'gossip',\n      subtype: messageType,\n      content,\n      from: this.mesh.peerId,\n      networkName: this.mesh.networkName, // Include network namespace\n      timestamp: Date.now(),\n      ttl: this.maxTTL,\n      path: [this.mesh.peerId] // Track propagation path\n    };\n\n    this.debug.log(`Broadcasting ${messageType} message: ${messageId.substring(0, 8)}... content: \"${content}\"`);\n\n    // Store our own message\n    this.seenMessages.set(messageId, {\n      timestamp: Date.now(),\n      ttl: this.maxTTL\n    });\n    this.messageHistory.set(messageId, message);\n\n    // Send to all connected peers\n    this.propagateMessage(message);\n\n    // Emit locally if it's a chat or encrypted message\n    if (messageType === 'chat' || messageType === 'encrypted') {\n      this.emit('messageReceived', {\n        from: this.mesh.peerId,\n        content,\n        timestamp: message.timestamp,\n        messageId,\n        encrypted: messageType === 'encrypted'\n      });\n    }\n\n    return messageId;\n  }\n\n  /**\n     * Send a direct message to a specific peer using gossip routing (DM)\n     * @param {string} targetPeerId - The destination peer's ID\n     * @param {string|object} content - The message content\n     * @param {string} subtype - Message subtype (default: 'dm')\n     * @returns {string|null} The message ID if sent, or null on error\n     */\n  async sendDirectMessage(targetPeerId, content, subtype = 'dm') {\n    if (!targetPeerId || typeof targetPeerId !== 'string') {\n      this.debug.error('Invalid targetPeerId for direct message');\n      return null;\n    }\n\n    // Validate peer ID format (40-character hex string)\n    if (!/^[a-fA-F0-9]{40}$/.test(targetPeerId)) {\n      this.debug.error('Invalid peer ID format for direct message:', targetPeerId);\n      return null;\n    }\n\n    const messageId = await this.generateMessageId();\n    const message = {\n      id: messageId,\n      type: 'gossip',\n      subtype,\n      content,\n      from: this.mesh.peerId,\n      to: targetPeerId,\n      networkName: this.mesh.networkName, // Include network namespace\n      timestamp: Date.now(),\n      ttl: this.maxTTL,\n      path: [this.mesh.peerId]\n    };\n    // Store our own message\n    this.seenMessages.set(messageId, {\n      timestamp: Date.now(),\n      ttl: this.maxTTL\n    });\n    this.messageHistory.set(messageId, message);\n    // Route to closest peer\n    this.propagateMessage(message);\n    return messageId;\n  }\n\n  /**\n     * Handle incoming gossip message from a peer\n     */\n  async handleGossipMessage(message, fromPeerId) {\n    this.debug.log(`\uD83D\uDD25\uD83D\uDD25\uD83D\uDD25 GOSSIP MESSAGE RECEIVED! From: ${fromPeerId?.substring(0, 8)}...`);\n    this.debug.log('\uD83D\uDD25\uD83D\uDD25\uD83D\uDD25 Message:', message);\n\n    const { id: messageId, ttl, from: originPeerId, subtype, content, timestamp, path, to, networkName } = message;\n\n    // Validate message structure\n    if (!messageId || !originPeerId || !subtype || content === undefined) {\n      this.debug.error('Invalid gossip message structure:', message);\n      return;\n    }\n\n    // Filter messages by network namespace\n    const messageNetwork = networkName || 'global';\n    const currentNetwork = this.mesh.networkName;\n    \n    if (messageNetwork !== currentNetwork) {\n      this.debug.log(`Filtering gossip message from different network: ${messageNetwork} (current: ${currentNetwork})`);\n      return;\n    }\n\n    // Check if we've already seen this message\n    if (this.seenMessages.has(messageId)) {\n      this.debug.log(`Ignoring duplicate message: ${messageId.substring(0, 8)}...`);\n      return;\n    }\n\n    // Check TTL\n    if (ttl <= 0) {\n      this.debug.log(`Message expired: ${messageId.substring(0, 8)}...`);\n      return;\n    }\n\n    // Check for loops (our peer ID in path)\n    if (path && path.includes(this.mesh.peerId)) {\n      this.debug.log(`Preventing message loop: ${messageId.substring(0, 8)}...`);\n      return;\n    }\n\n    this.debug.log(`Received gossip message: ${messageId.substring(0, 8)}... from ${fromPeerId.substring(0, 8)}... (TTL: ${ttl}, content: \"${content}\")`);\n\n    // Store message to prevent duplicates\n    this.seenMessages.set(messageId, {\n      timestamp: Date.now(),\n      ttl\n    });\n    this.messageHistory.set(messageId, message);\n\n    // Handle crypto-related messages first\n    if (this.mesh.enableCrypto && this.mesh.cryptoManager) {\n      const handled = await this._handleCryptoMessage(message, fromPeerId, originPeerId);\n      if (handled) {\n        return; // Don't propagate crypto messages further\n      }\n    }\n\n    // Handle encrypted content decryption\n    let processedContent = content;\n    let isEncrypted = false;\n\n    if (this.mesh.enableCrypto && this.mesh.cryptoManager &&\n            content && typeof content === 'object' && content.encrypted) {\n      try {\n        processedContent = await this.mesh.decryptMessage(content);\n        isEncrypted = true;\n        this.debug.log(`\uD83D\uDD10 Decrypted message from ${originPeerId.substring(0, 8)}...`);\n      } catch (error) {\n        this.debug.error('Failed to decrypt message:', error);\n        // Continue with original content\n        processedContent = content;\n      }\n    }\n\n    // Emit the message locally\n    if (subtype === 'chat') {\n      // Validate chat content (handle both encrypted objects and plain strings)\n      if (isEncrypted || (typeof processedContent === 'string' && processedContent.trim().length > 0)) {\n        this.emit('messageReceived', {\n          from: originPeerId,\n          content: processedContent,\n          timestamp,\n          messageId,\n          hops: this.maxTTL - ttl,\n          direct: false, // Flag to indicate this was a gossip message\n          encrypted: isEncrypted\n        });\n      } else {\n        this.debug.warn('Ignoring gossip chat message with invalid content:', processedContent);\n        return;\n      }\n    } else if (subtype === 'encrypted') {\n      // Handle encrypted broadcast messages\n      this.emit('messageReceived', {\n        from: originPeerId,\n        content: processedContent,\n        timestamp,\n        messageId,\n        hops: this.maxTTL - ttl,\n        direct: false,\n        encrypted: true\n      });\n    } else if (subtype === 'peer-announcement') {\n      this.handlePeerAnnouncement(content, originPeerId);\n    } else if (subtype === 'mediaEvent') {\n      // Handle media streaming events\n      this.handleMediaEvent(content, originPeerId);\n    } else if (subtype === 'dm') {\n      // Direct message logic\n      if (typeof to === 'string' && typeof this.mesh.peerId === 'string' && to.trim().toLowerCase() === this.mesh.peerId.trim().toLowerCase()) {\n        // This peer is the target - check if this message type should be filtered\n        \n        this.debug.log(`\uD83D\uDD0D DM DEBUG: Received DM from ${originPeerId?.substring(0, 8)}, content type: ${typeof processedContent}`);\n        if (typeof processedContent === 'object' && processedContent) {\n          this.debug.log(`\uD83D\uDD0D DM DEBUG: Content object has type: ${processedContent.type}`);\n        }\n        \n        // Define message types that should be filtered from peer-readable messages\n        // These messages are processed but not emitted as regular messages to UI/applications\n        const filteredMessageTypes = new Set([\n          'signaling-relay',\n          'peer-announce-relay', \n          'bootstrap-keepalive'\n        ]);\n\n        // Parse the content to check message type\n        let messageType = null;\n        let shouldFilter = false;\n        \n        // Check if content is already an object with type property\n        if (typeof processedContent === 'object' && processedContent && processedContent.type) {\n          messageType = processedContent.type;\n          shouldFilter = filteredMessageTypes.has(messageType);\n        } else if (typeof processedContent === 'string') {\n          // Try to parse as JSON if it's a string\n          try {\n            const parsedContent = JSON.parse(processedContent);\n            messageType = parsedContent.type;\n            shouldFilter = filteredMessageTypes.has(messageType);\n          } catch (e) {\n            // Not JSON or doesn't have type - treat as regular message\n          }\n        }\n\n        this.debug.log(`\uD83D\uDD0D DM DEBUG: messageType=${messageType}, shouldFilter=${shouldFilter}`);\n\n        if (shouldFilter) {\n          this.debug.log(`\uD83D\uDD07 FILTER: Processing filtered DM type '${messageType}' from ${originPeerId?.substring(0, 8)} (not emitted to UI)`);\n          \n          // Process the filtered message internally but don't emit to UI\n          if (messageType === 'signaling-relay' && typeof processedContent === 'object') {\n            // Handle signaling relay\n            if (processedContent.signalingMessage && this.mesh.signalingHandler) {\n              this.mesh.signalingHandler.handleSignalingMessage({\n                type: processedContent.signalingMessage.type,\n                data: processedContent.signalingMessage.data,\n                fromPeerId: processedContent.signalingMessage.fromPeerId || originPeerId,\n                targetPeerId: processedContent.targetPeerId,\n                timestamp: processedContent.timestamp\n              });\n            }\n          } else if (messageType === 'peer-announce-relay' && typeof processedContent === 'object') {\n            // Handle peer announce relay\n            if (processedContent.data && this.mesh.signalingHandler) {\n              this.mesh.signalingHandler.handlePeerAnnouncement(processedContent.data, originPeerId);\n            }\n          } else if (messageType === 'bootstrap-keepalive') {\n            // Handle bootstrap keepalive - content can be object or string\n            if (this.mesh.peerDiscovery) {\n              // For bootstrap keepalive from a specific source, use the 'from' field as the peer ID\n              const keepalivePeerId = (typeof processedContent === 'object' && processedContent.from)\n                ? processedContent.from\n                : originPeerId;\n              this.mesh.peerDiscovery.updateDiscoveryTimestamp(keepalivePeerId);\n            }\n          }\n          \n          // Do NOT emit to UI and do NOT relay further\n          return;\n        }\n\n        // This is a regular (non-filtered) direct message - emit to UI\n        this.emit('messageReceived', {\n          from: originPeerId,\n          content: processedContent,\n          timestamp,\n          messageId,\n          hops: this.maxTTL - ttl,\n          direct: true, // Flag to indicate this was a direct message\n          encrypted: isEncrypted\n        });\n        // Do NOT relay further if we are the recipient\n        return;\n      } else {\n        // Not the target, relay silently (do not emit)\n      }\n    } else if (subtype === 'dht-routing') {\n      // DHT routing message - check if we're the target\n      if (typeof to === 'string' && typeof this.mesh.peerId === 'string' && to.trim().toLowerCase() === this.mesh.peerId.trim().toLowerCase()) {\n        this.debug.log(`DHT: Received routed message for us from ${originPeerId.substring(0, 8)}`);\n        // We are the target, deliver the DHT message locally\n        if (this.mesh.webDHT && content) {\n          // Simulate receiving the message from the original sender\n          this.mesh.webDHT.handleMessage(content, originPeerId);\n        }\n        // Do NOT relay further since we are the recipient\n        return;\n      } else {\n        this.debug.log(`DHT: Routing message for ${to?.substring(0, 8)} (not us)`);\n        // Not the target, continue routing\n      }\n    }\n    // Propagate to other peers with decremented TTL\n    const updatedMessage = {\n      ...message,\n      ttl: ttl - 1,\n      path: [...(path || []), this.mesh.peerId]\n    };\n\n    this.propagateMessage(updatedMessage, fromPeerId);\n  }\n\n  /**\n     * Handle peer announcements received via gossip\n     */\n  handlePeerAnnouncement(announcementData, originPeerId) {\n    const { peerId: announcedPeerId } = announcementData;\n\n    this.debug.log(`Gossip peer announcement: ${announcedPeerId.substring(0, 8)}... via ${originPeerId.substring(0, 8)}...`);\n\n    // Add to discovered peers if we don't know about them\n    if (!this.mesh.peerDiscovery.hasPeer(announcedPeerId) &&\n            announcedPeerId !== this.mesh.peerId) {\n      this.mesh.emit('statusChanged', {\n        type: 'info',\n        message: `Discovered peer ${announcedPeerId.substring(0, 8)}... via gossip`\n      });\n\n      this.mesh.peerDiscovery.addDiscoveredPeer(announcedPeerId);\n    }\n  }\n\n  /**\n   * Handle media streaming events received via gossip\n   */\n  handleMediaEvent(eventData, originPeerId) {\n    const { event, peerId, hasVideo, hasAudio, timestamp } = eventData;\n\n    this.debug.log(`Media event gossip: ${event} from ${peerId.substring(0, 8)}... via ${originPeerId.substring(0, 8)}...`);\n\n    // Don't process our own events\n    if (peerId === this.mesh.peerId) {\n      return;\n    }\n\n    // Emit the media event for the UI to handle\n    if (event === 'streamStarted') {\n      this.mesh.emit('remoteStreamAnnouncement', {\n        peerId,\n        hasVideo,\n        hasAudio,\n        timestamp,\n        event: 'started'\n      });\n    } else if (event === 'streamStopped') {\n      this.mesh.emit('remoteStreamAnnouncement', {\n        peerId,\n        timestamp,\n        event: 'stopped'\n      });\n    }\n  }\n\n  /**\n     * Broadcast peer announcement via gossip when we connect\n     */\n  async announcePeer(peerId = this.mesh.peerId) {\n    const announcementData = {\n      peerId,\n      timestamp: Date.now()\n    };\n\n    this.debug.log(`Gossiping peer announcement for: ${peerId.substring(0, 8)}...`);\n    await this.broadcastMessage(announcementData, 'peer-announcement');\n  }\n\n  /**\n     * Propagate message to ALL peers that can receive messages - ignore connection states!\n     */\n  propagateMessage(message, excludePeerId = null) {\n    // DM and DHT routing: route to closest peer(s) for messages with specific targets\n    if ((message.subtype === 'dm' || message.subtype === 'dht-routing') && message.to) {\n      const targetId = message.to;\n      const allPeers = Array.from(this.connectionManager.peers.values());\n      const capablePeers = allPeers.filter(peerConnection => {\n        return peerConnection.dataChannel && peerConnection.dataChannel.readyState === 'open';\n      });\n      // Improved XOR distance for 40-char hex peer IDs\n      function xorDistance(a, b) {\n        if (!a || !b) return Number.MAX_SAFE_INTEGER;\n        let dist = 0n;\n        for (let i = 0; i < 40; i += 8) {\n          const aChunk = a.substring(i, i + 8);\n          const bChunk = b.substring(i, i + 8);\n          dist = (dist << 32n) + (BigInt('0x' + aChunk) ^ BigInt('0x' + bChunk));\n        }\n        return dist;\n      }\n      let minDist = null;\n      let closestPeers = [];\n      capablePeers.forEach(peerConnection => {\n        if (peerConnection.peerId === excludePeerId || message.ttl <= 0) return;\n        const dist = xorDistance(peerConnection.peerId, targetId);\n        if (minDist === null || dist < minDist) {\n          minDist = dist;\n          closestPeers = [peerConnection];\n        } else if (dist === minDist) {\n          closestPeers.push(peerConnection);\n        }\n      });\n      if (closestPeers.length > 0) {\n        closestPeers.forEach(peer => {\n          try {\n            peer.sendMessage(message);\n            const routingType = message.subtype === 'dht-routing' ? 'DHT' : 'DM';\n            this.debug.log(`${routingType} routed to closest peer: ${peer.peerId.substring(0, 8)}...`);\n          } catch (error) {\n            this.debug.error(`${message.subtype} routing failed:`, error);\n          }\n        });\n      } else {\n        // Fallback: relay to all capable peers except sender\n        capablePeers.forEach(peerConnection => {\n          if (peerConnection.peerId === excludePeerId || message.ttl <= 0) return;\n          try {\n            peerConnection.sendMessage(message);\n            const routingType = message.subtype === 'dht-routing' ? 'DHT' : 'DM';\n            this.debug.log(`${routingType} fallback relay to: ${peerConnection.peerId.substring(0, 8)}...`);\n          } catch (error) {\n            this.debug.error(`${message.subtype} fallback relay failed:`, error);\n          }\n        });\n      }\n      return;\n    }\n    // AGGRESSIVE: Get ALL peers regardless of status - we only care if we can send a message\n    const allPeers = Array.from(this.connectionManager.peers.values());\n    const capablePeers = allPeers.filter(peerConnection => {\n      // ONLY requirement: does the peer have an open data channel?\n      return peerConnection.dataChannel &&\n                   peerConnection.dataChannel.readyState === 'open';\n    });\n\n    let propagatedTo = 0;\n\n    this.debug.log(`\uD83D\uDE80 AGGRESSIVE GOSSIP: Found ${capablePeers.length}/${allPeers.length} peers with open data channels`);\n    this.debug.log(`Message: ${message.id.substring(0, 8)}..., TTL: ${message.ttl}, Exclude: ${excludePeerId?.substring(0, 8) || 'none'}`);\n\n    // Debug: show state of ALL peers\n    allPeers.forEach(peerConnection => {\n      const status = peerConnection.getStatus();\n      const dataChannelState = peerConnection.dataChannel?.readyState || 'none';\n      const canSend = peerConnection.dataChannel && peerConnection.dataChannel.readyState === 'open';\n      const isExcluded = peerConnection.peerId === excludePeerId;\n      this.debug.log(`  ${peerConnection.peerId.substring(0, 8)}... - Status: ${status}, DataChannel: ${dataChannelState}, CanSend: ${canSend}, Excluded: ${isExcluded}`);\n    });\n\n    capablePeers.forEach(peerConnection => {\n      const peerId = peerConnection.peerId;\n\n      // Don't send back to sender or if TTL expired\n      if (peerId === excludePeerId || message.ttl <= 0) {\n        return;\n      }\n\n      try {\n        peerConnection.sendMessage(message);\n        propagatedTo++;\n        this.debug.log(`\u2705 GOSSIP SUCCESS: Sent to ${peerId.substring(0, 8)}...`);\n      } catch (error) {\n        this.debug.error(`\u274C GOSSIP FAILED: Could not send to ${peerId.substring(0, 8)}...`, error);\n      }\n    });\n\n    this.debug.log(`\uD83C\uDFAF GOSSIP RESULT: Propagated to ${propagatedTo}/${capablePeers.length} capable peers`);\n\n    if (propagatedTo === 0 && allPeers.length > 0) {\n      this.debug.error(`\uD83D\uDEA8 GOSSIP FAILURE: NO PROPAGATION! ${allPeers.length} total peers, ${capablePeers.length} with data channels`);\n    }\n  }\n\n  /**\n     * Get message statistics\n     */\n  getStats() {\n    return {\n      seenMessages: this.seenMessages.size,\n      storedMessages: this.messageHistory.size,\n      maxTTL: this.maxTTL,\n      messageExpiryTime: this.messageExpiryTime\n    };\n  }\n\n  /**\n     * Generate unique message ID\n     */\n  async generateMessageId() {\n    const array = new Uint8Array(16);\n    \n    // Environment-aware random value generation\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      // Browser environment\n      crypto.getRandomValues(array);\n    } else if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      // Node.js environment\n      try {\n        const crypto = await import('crypto');\n        const randomBytes = crypto.randomBytes(16);\n        array.set(randomBytes);\n      } catch (e) {\n        console.warn('Could not use Node.js crypto, falling back to Math.random');\n        // Fallback to Math.random\n        for (let i = 0; i < array.length; i++) {\n          array[i] = Math.floor(Math.random() * 256);\n        }\n      }\n    } else {\n      // Fallback to Math.random for other environments\n      for (let i = 0; i < array.length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    \n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n     * Clean up expired messages\n     */\n  startCleanupTimer() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    if (environmentDetector.isBrowser) {\n      this.cleanupTimer = window.setInterval(() => {\n        this.cleanupExpiredMessages();\n      }, this.cleanupInterval);\n    } else {\n      this.cleanupTimer = setInterval(() => {\n        this.cleanupExpiredMessages();\n      }, this.cleanupInterval);\n    }\n  }\n\n  /**\n     * Stop cleanup timer\n     */\n  stopCleanupTimer() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n\n  cleanupExpiredMessages() {\n    const now = Date.now();\n    let cleaned = 0;\n    let keyExchangesCleaned = 0;\n\n    // Clean up seen messages\n    this.seenMessages.forEach((data, messageId) => {\n      if (now - data.timestamp > this.messageExpiryTime) {\n        this.seenMessages.delete(messageId);\n        this.messageHistory.delete(messageId);\n        cleaned++;\n      }\n    });\n\n    // Clean up old key exchange tracking (keep for shorter time - 1 minute)\n    this.processedKeyExchanges.forEach((timestamp, keyExchangeId) => {\n      if (now - timestamp > 60000) { // 1 minute\n        this.processedKeyExchanges.delete(keyExchangeId);\n        keyExchangesCleaned++;\n      }\n    });\n\n    if (cleaned > 0) {\n      this.debug.log(`Cleaned up ${cleaned} expired gossip messages`);\n    }\n    if (keyExchangesCleaned > 0) {\n      this.debug.log(`Cleaned up ${keyExchangesCleaned} old key exchange tracking entries`);\n    }\n  }\n\n  /**\n     * Cleanup method\n     */\n  cleanup() {\n    this.stopCleanupTimer();\n    this.seenMessages.clear();\n    this.messageHistory.clear();\n    this.processedKeyExchanges.clear();\n  }\n\n  /**\n     * Handle crypto-related messages (key exchange, etc.)\n     * @private\n     */\n  async _handleCryptoMessage(message, fromPeerId, originPeerId) {\n    const { subtype, content } = message;\n\n    // Handle key exchange messages\n    if (subtype === 'key_exchange' || subtype === 'key_exchange_response') {\n      if (content && (content.type === 'key_exchange' || content.type === 'key_exchange_response') && content.publicKey) {\n        \n        // Create a unique identifier for this key exchange to prevent duplicates\n        const keyExchangeId = `${originPeerId}:${content.type}:${content.timestamp || Date.now()}`;\n        \n        // Check if we've already processed this key exchange\n        if (this.processedKeyExchanges.has(keyExchangeId)) {\n          this.debug.log(`\uD83D\uDD10 Ignoring duplicate ${content.type} from peer ${originPeerId.substring(0, 8)}... (already processed)`);\n          return true; // Mark as handled to prevent further propagation\n        }\n        \n        // Also check for recent key exchanges from the same peer (within last 5 seconds)\n        const recentKeyExchangePattern = `${originPeerId}:${content.type}:`;\n        const now = Date.now();\n        let foundRecent = false;\n        \n        for (const [existingId, timestamp] of this.processedKeyExchanges.entries()) {\n          if (existingId.startsWith(recentKeyExchangePattern) && (now - timestamp) < 5000) {\n            foundRecent = true;\n            break;\n          }\n        }\n        \n        if (foundRecent) {\n          this.debug.log(`\uD83D\uDD10 Ignoring recent duplicate ${content.type} from peer ${originPeerId.substring(0, 8)}... (processed recently)`);\n          return true;\n        }\n\n        this.debug.log(`\uD83D\uDD10 Processing ${content.type} from peer ${originPeerId.substring(0, 8)}...`);\n        \n        // Mark this key exchange as processed\n        this.processedKeyExchanges.set(keyExchangeId, now);\n\n        // Use the mesh's key exchange handler which properly handles both pub and epub keys\n        this.mesh._handleKeyExchange(content, originPeerId);\n\n        // Don't propagate key exchange messages further\n        return true; // Indicates message was handled and should not be processed further\n      }\n    }\n\n    return false; // Message was not handled by crypto processing\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\nexport class MediaManager extends EventEmitter {\n  constructor() {\n    super();\n    this.debug = DebugLogger.create('MediaManager');\n    this.localStream = null;\n    this.isVideoEnabled = false;\n    this.isAudioEnabled = false;\n    this.devices = {\n      cameras: [],\n      microphones: [],\n      speakers: []\n    };\n\n    this.constraints = {\n      video: {\n        width: { ideal: 640 },\n        height: { ideal: 480 },\n        frameRate: { ideal: 30 }\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true\n      }\n    };\n  }\n\n  /**\n     * Initialize media devices and permissions\n     */\n  async init() {\n    // Check if media APIs are available\n    if (!environmentDetector.hasGetUserMedia) {\n      this.debug.warn('getUserMedia not available in this environment');\n      this.emit('error', { type: 'init', error: new Error('getUserMedia not supported') });\n      return false;\n    }\n\n    try {\n      // Enumerate available devices\n      await this.enumerateDevices();\n      return true;\n    } catch (error) {\n      this.debug.error('Failed to initialize media manager:', error);\n      this.emit('error', { type: 'init', error });\n      return false;\n    }\n  }\n\n  /**\n     * Get available media devices\n     */\n  async enumerateDevices() {\n    // Only available in browser and NativeScript environments with media device support\n    if ((!environmentDetector.isBrowser && !environmentDetector.isNativeScript) ||\n        typeof navigator === 'undefined' ||\n        typeof navigator.mediaDevices === 'undefined') {\n      this.debug.warn('Media device enumeration not available in this environment');\n      return;\n    }\n\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n\n      this.devices.cameras = devices.filter(device => device.kind === 'videoinput');\n      this.devices.microphones = devices.filter(device => device.kind === 'audioinput');\n      this.devices.speakers = devices.filter(device => device.kind === 'audiooutput');\n\n      this.emit('devicesUpdated', this.devices);\n      return this.devices;\n    } catch (error) {\n      this.debug.error('Failed to enumerate devices:', error);\n      this.emit('error', { type: 'enumerate', error });\n      throw error;\n    }\n  }\n\n  /**\n     * Start local media stream with specified constraints\n     */\n  async startLocalStream(options = {}) {\n    const { video = false, audio = false, deviceIds = {} } = options;\n\n    try {\n      // Stop existing stream first\n      if (this.localStream) {\n        this.stopLocalStream();\n      }\n\n      const constraints = {};\n\n      if (video) {\n        constraints.video = { ...this.constraints.video };\n        if (deviceIds.camera) {\n          constraints.video.deviceId = { exact: deviceIds.camera };\n        }\n      }\n\n      if (audio) {\n        constraints.audio = { ...this.constraints.audio };\n        if (deviceIds.microphone) {\n          constraints.audio.deviceId = { exact: deviceIds.microphone };\n        }\n      }\n\n      if (!video && !audio) {\n        throw new Error('At least one of video or audio must be enabled');\n      }\n\n      this.localStream = await navigator.mediaDevices.getUserMedia(constraints);\n      this.isVideoEnabled = video;\n      this.isAudioEnabled = audio;\n\n      // Mark stream as local origin to prevent confusion with remote streams\n      this.markStreamAsLocal(this.localStream);\n\n      this.debug.log('Local media stream started:', {\n        video: this.isVideoEnabled,\n        audio: this.isAudioEnabled,\n        tracks: this.localStream.getTracks().map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          label: track.label\n        }))\n      });\n\n      this.emit('localStreamStarted', {\n        stream: this.localStream,\n        video: this.isVideoEnabled,\n        audio: this.isAudioEnabled\n      });\n\n      return this.localStream;\n    } catch (error) {\n      this.debug.error('Failed to start local media stream:', error);\n      this.emit('error', { type: 'getUserMedia', error });\n      throw error;\n    }\n  }\n\n  /**\n     * Stop local media stream\n     */\n  stopLocalStream() {\n    if (this.localStream) {\n      this.debug.log('Stopping local media stream');\n      this.localStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.localStream = null;\n      this.isVideoEnabled = false;\n      this.isAudioEnabled = false;\n\n      this.emit('localStreamStopped');\n    }\n  }\n\n  /**\n     * Toggle video track on/off\n     */\n  toggleVideo() {\n    if (this.localStream) {\n      const videoTrack = this.localStream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n        this.emit('videoToggled', { enabled: videoTrack.enabled });\n        return videoTrack.enabled;\n      }\n    }\n    return false;\n  }\n\n  /**\n     * Toggle audio track on/off\n     */\n  toggleAudio() {\n    if (this.localStream) {\n      const audioTrack = this.localStream.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        this.emit('audioToggled', { enabled: audioTrack.enabled });\n        return audioTrack.enabled;\n      }\n    }\n    return false;\n  }\n\n  /**\n     * Get current media state\n     */\n  getMediaState() {\n    const state = {\n      hasLocalStream: !!this.localStream,\n      videoEnabled: false,\n      audioEnabled: false,\n      devices: this.devices\n    };\n\n    if (this.localStream) {\n      const videoTrack = this.localStream.getVideoTracks()[0];\n      const audioTrack = this.localStream.getAudioTracks()[0];\n\n      state.videoEnabled = videoTrack ? videoTrack.enabled : false;\n      state.audioEnabled = audioTrack ? audioTrack.enabled : false;\n    }\n\n    return state;\n  }\n\n  /**\n     * Check if browser supports required APIs\n     */\n  static checkSupport() {\n    const support = {\n      getUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),\n      enumerateDevices: !!(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices),\n      webRTC: !!(window.RTCPeerConnection)\n    };\n\n    support.fullSupport = support.getUserMedia && support.enumerateDevices && support.webRTC;\n    return support;\n  }\n\n  /**\n     * Get media permissions status\n     */\n  async getPermissions() {\n    try {\n      const permissions = {};\n\n      if (navigator.permissions) {\n        permissions.camera = await navigator.permissions.query({ name: 'camera' });\n        permissions.microphone = await navigator.permissions.query({ name: 'microphone' });\n      }\n\n      return permissions;\n    } catch (error) {\n      this.debug.warn('Could not check media permissions:', error);\n      return {};\n    }\n  }\n\n  /**\n     * Mark stream as local origin to prevent confusion with remote streams\n     */\n  markStreamAsLocal(stream) {\n    if (!stream) return;\n\n    try {\n      Object.defineProperty(stream, '_peerPigeonOrigin', {\n        value: 'local',\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n\n      this.debug.log(`\uD83D\uDD12 Stream ${stream.id} marked as local origin in MediaManager`);\n    } catch (error) {\n      this.debug.warn('Could not mark stream as local origin:', error);\n    }\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * SimpleWebDHT - Efficient Distributed Hash Table for millions of WebR    const targetPeers = this.findClosestPeers(keyHash, replicationFactor);\n    \n    const spaceInfo = options.space ? ` (${options.space} space, RF=${replicationFactor})` : '';\n    this.debug.log(`GET: Querying ${targetPeers.length} peers for ${key} in network ${this.mesh.networkName}${spaceInfo}`);\n\n    // Query peers in parallelers\n * \n * Design principles:\n * 1. SIMPLE: Minimal complexity, maximum reliability\n * 2. EFFICIENT: Optimized for millions of peers with O(log N) operations\n * 3. SCALABLE: Consistent hashing with automatic load balancing\n * 4. RELIABLE: Gossip-based replication with eventual consistency\n * \n * Key features:\n * - Consistent hashing for efficient key distribution\n * - Minimal routing table (only closest peers)\n * - Gossip-based replication (fire-and-forget)\n * - Automatic peer discovery and failure handling\n * - No complex Kademlia routing - just simple consistent hashing\n */\nexport class WebDHT extends EventEmitter {\n  constructor(mesh) {\n    super();\n    this.debug = DebugLogger.create('SimpleWebDHT');\n    this.mesh = mesh;\n    this.peerId = mesh.peerId;\n\n    // Simple local storage\n    this.storage = new Map();\n    \n    // Minimal routing: just track closest peers for efficient forwarding\n    this.closestPeers = new Set();\n    \n    // Simple replication factor\n    this.replicationFactor = 3;\n    \n    // Hash ring position for this peer\n    this.hashPosition = this.hashPeerId(this.peerId);\n    \n    this.debug.log(`SimpleWebDHT initialized for peer ${this.peerId.substring(0, 8)} at position ${this.hashPosition.toString(16).substring(0, 8)}`);\n    \n    this.setupMessageHandling();\n    this.startMaintenance();\n  }\n\n  /**\n   * Calculate replication factor based on storage space and network size\n   * @param {string} space - Storage space type (private, public, frozen)\n   * @param {number} totalPeers - Total number of connected peers\n   * @returns {number} Appropriate replication factor\n   */\n  getReplicationFactor(space, totalPeers = null) {\n    const peerCount = totalPeers || Array.from(this.mesh.connectionManager.peers.keys())\n      .filter(peerId => this.mesh.connectionManager.peers.get(peerId).getStatus() === 'connected').length;\n    \n    if (peerCount === 0) return 0;\n    \n    switch(space) {\n      case 'private':\n        // Private data: minimal replication (only owner can decrypt)\n        return Math.min(3, peerCount);\n      \n      case 'public':\n        // Public data: moderate replication for good availability\n        // 30% of peers, minimum 3, maximum 7\n        return Math.max(3, Math.min(Math.ceil(peerCount * 0.3), 7));\n      \n      case 'frozen':\n        // Frozen data: high replication for immutability and permanence\n        // 50% of peers, minimum 5, maximum 10\n        return Math.max(5, Math.min(Math.ceil(peerCount * 0.5), 10));\n      \n      default:\n        // Default: use base replication factor\n        return Math.min(this.replicationFactor, peerCount);\n    }\n  }\n\n  /**\n   * Simple hash function for consistent hashing\n   */\n  async hash(data) {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(typeof data === 'string' ? data : JSON.stringify(data));\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    const hashArray = new Uint8Array(hashBuffer);\n    \n    // Convert to number for position on hash ring\n    let hash = 0;\n    for (let i = 0; i < 4; i++) {\n      hash = (hash * 256 + hashArray[i]) >>> 0;\n    }\n    return hash;\n  }\n\n  /**\n   * Hash peer ID to position on ring\n   */\n  hashPeerId(peerId) {\n    // Simple deterministic hash of peer ID\n    let hash = 0;\n    for (let i = 0; i < peerId.length; i++) {\n      hash = ((hash << 5) - hash + peerId.charCodeAt(i)) >>> 0;\n    }\n    return hash;\n  }\n\n  /**\n   * Calculate distance between two positions on hash ring\n   */\n  ringDistance(pos1, pos2) {\n    const diff = Math.abs(pos1 - pos2);\n    const maxUint32 = 0xFFFFFFFF;\n    return Math.min(diff, maxUint32 - diff);\n  }\n\n  /**\n   * Find closest peers to a hash position\n   */\n  findClosestPeers(targetHash, count = this.replicationFactor) {\n    const connectedPeers = Array.from(this.mesh.connectionManager.peers.keys())\n      .filter(peerId => this.mesh.connectionManager.peers.get(peerId).getStatus() === 'connected');\n    \n    if (connectedPeers.length === 0) {\n      return [];\n    }\n\n    // Calculate distances and sort\n    const peersWithDistance = connectedPeers.map(peerId => ({\n      peerId,\n      distance: this.ringDistance(targetHash, this.hashPeerId(peerId))\n    }));\n\n    peersWithDistance.sort((a, b) => a.distance - b.distance);\n    \n    return peersWithDistance.slice(0, count).map(p => p.peerId);\n  }\n\n  /**\n   * Store key-value pair with network namespace support\n   * @param {string} key - Storage key\n   * @param {*} value - Value to store\n   * @param {Object} options - Storage options\n   * @param {string} options.space - Storage space (private, public, frozen) for replication strategy\n   */\n  async put(key, value, options = {}) {\n    // Add network namespace to the key to ensure network isolation\n    const namespacedKey = `${this.mesh.networkName}:${key}`;\n    const keyHash = await this.hash(namespacedKey);\n    \n    const storeData = {\n      key: namespacedKey,\n      originalKey: key, // Store original key for retrieval\n      value,\n      networkName: this.mesh.networkName,\n      timestamp: Date.now(),\n      publisher: this.peerId,\n      space: options.space // Track space for replication info\n    };\n\n    // Always store locally first\n    this.storage.set(namespacedKey, storeData);\n    this.debug.log(`PUT: Stored ${key} locally in network ${this.mesh.networkName}`);\n\n    // Determine replication factor based on storage space\n    const replicationFactor = options.space \n      ? this.getReplicationFactor(options.space)\n      : this.replicationFactor;\n    \n    // Find closest peers for replication\n    const targetPeers = this.findClosestPeers(keyHash, replicationFactor);\n    \n    this.debug.log(`PUT: Replicating ${key} to ${targetPeers.length} peers`);\n    \n    // Simple fire-and-forget replication\n    const replicationPromises = targetPeers.map(async (peerId) => {\n      if (peerId !== this.peerId) {\n        try {\n          this.sendMessage(peerId, 'dht_store', storeData);\n          // Add small delay to ensure message is sent\n          await new Promise(resolve => setTimeout(resolve, 50));\n          return { peerId, success: true };\n        } catch (error) {\n          this.debug.warn(`Replication to ${peerId.substring(0, 8)} failed:`, error.message);\n          return { peerId, success: false, error: error.message };\n        }\n      }\n      return { peerId, success: true };\n    });\n\n    // Wait for all sends to complete\n    await Promise.allSettled(replicationPromises);\n    \n    const spaceInfo = options.space ? ` (${options.space} space, RF=${replicationFactor})` : '';\n    this.debug.log(`PUT: ${key} replicated to ${targetPeers.length} peers in network ${this.mesh.networkName}${spaceInfo}`);\n    \n    return true;\n  }\n\n  /**\n   * Retrieve value by key with network namespace support\n   * @param {string} key - Storage key\n   * @param {Object} options - Retrieval options\n   * @param {boolean} options.forceRefresh - Force refresh from network\n   * @param {string} options.space - Storage space for space-aware replication\n   */\n  async get(key, options = {}) {\n    const forceRefresh = options.forceRefresh || false;\n    const namespacedKey = `${this.mesh.networkName}:${key}`;\n    \n    // Check local storage first (unless force refresh)\n    if (!forceRefresh && this.storage.has(namespacedKey)) {\n      const data = this.storage.get(namespacedKey);\n      this.debug.log(`GET: Found ${key} locally in network ${this.mesh.networkName}`);\n      return data.value;\n    }\n\n    // If not found locally or force refresh, query the network\n    const keyHash = await this.hash(namespacedKey);\n    \n    // Use space-aware replication factor for querying\n    const replicationFactor = options.space \n      ? this.getReplicationFactor(options.space)\n      : this.replicationFactor;\n    \n    const targetPeers = this.findClosestPeers(keyHash, replicationFactor);\n    \n    this.debug.log(`GET: Querying ${targetPeers.length} peers for ${key} in network ${this.mesh.networkName}`);\n\n    // Query peers in parallel\n    const queryPromises = targetPeers.map(async (peerId) => {\n      if (peerId === this.peerId) return null;\n      \n      try {\n        this.debug.log(`GET: Querying peer ${peerId.substring(0, 8)} for ${key}`);\n        const result = await this.queryPeer(peerId, namespacedKey);\n        this.debug.log(`GET: Peer ${peerId.substring(0, 8)} response for ${key}:`, result ? 'found' : 'not found');\n        return result;\n      } catch (error) {\n        this.debug.warn(`Query to ${peerId.substring(0, 8)} failed:`, error.message);\n        return null;\n      }\n    });\n\n    const results = await Promise.allSettled(queryPromises);\n    \n    // Find the first successful result\n    for (const result of results) {\n      if (result.status === 'fulfilled' && result.value) {\n        const data = result.value;\n        \n        // Cache locally for future use\n        this.storage.set(namespacedKey, data);\n        \n        this.debug.log(`GET: Found ${key} from network ${this.mesh.networkName}`);\n        return data.value;\n      }\n    }\n\n    this.debug.log(`GET: ${key} not found after querying ${targetPeers.length} peers`);\n    return null;\n  }\n\n  /**\n   * Query a specific peer for a key\n   */\n  async queryPeer(peerId, key) {\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random().toString(36).substring(7);\n      \n      // Set timeout for query\n      const timeout = setTimeout(() => {\n        this.responseHandlers.delete(requestId);\n        reject(new Error('Query timeout'));\n      }, 5000);\n\n      // Store response handler\n      this.responseHandlers.set(requestId, (response) => {\n        clearTimeout(timeout);\n        this.responseHandlers.delete(requestId);\n        \n        if (response.found) {\n          resolve(response.data);\n        } else {\n          resolve(null);\n        }\n      });\n\n      // Send query\n      this.sendMessage(peerId, 'dht_query', { key, requestId });\n    });\n  }\n\n  /**\n   * Send message to peer through connection manager\n   */\n  sendMessage(peerId, type, data) {\n    const message = {\n      type: 'dht',\n      messageType: type,\n      data,\n      from: this.peerId,\n      timestamp: Date.now()\n    };\n\n    const peer = this.mesh.connectionManager.peers.get(peerId);\n    if (peer && peer.getStatus() === 'connected') {\n      peer.sendMessage(message);\n    } else {\n      throw new Error(`Peer ${peerId} not connected`);\n    }\n  }\n\n  /**\n   * Setup message handling\n   */\n  setupMessageHandling() {\n    this.responseHandlers = new Map();\n  }\n\n  /**\n   * Handle incoming DHT message\n   */\n  async handleMessage(message, fromPeerId) {\n    const { messageType, data } = message;\n\n    switch (messageType) {\n      case 'dht_store':\n        this.handleStore(data, fromPeerId);\n        break;\n        \n      case 'dht_query':\n        await this.handleQuery(data, fromPeerId);\n        break;\n        \n      case 'dht_query_response':\n        this.handleQueryResponse(data);\n        break;\n        \n      default:\n        this.debug.warn(`Unknown DHT message type: ${messageType}`);\n    }\n  }\n\n  /**\n   * Handle store request from peer with network filtering\n   */\n  handleStore(data, fromPeerId) {\n    const { key, value, timestamp, publisher, networkName, space } = data;\n    \n    // Filter by network namespace\n    const messageNetwork = networkName || 'global';\n    if (messageNetwork !== this.mesh.networkName) {\n      this.debug.log(`Filtering DHT store from different network: ${messageNetwork} (current: ${this.mesh.networkName})`);\n      return;\n    }\n    \n    try {\n      // Simple conflict resolution: latest timestamp wins\n      if (this.storage.has(key)) {\n        const existing = this.storage.get(key);\n        if (existing.timestamp >= timestamp) {\n          return; // Ignore older data\n        }\n      }\n\n      // Store the complete data with all fields including space\n      this.storage.set(key, { key, value, timestamp, publisher, space, networkName });\n      this.debug.log(`STORE: Received ${key} from ${fromPeerId.substring(0, 8)}`);\n    } catch (error) {\n      this.debug.warn(`Store failed for ${key}:`, error.message);\n    }\n  }\n\n  /**\n   * Handle query request from peer\n   */\n  async handleQuery(data, fromPeerId) {\n    const { key, requestId } = data;\n    \n    const response = {\n      requestId,\n      found: false,\n      data: null\n    };\n\n    if (this.storage.has(key)) {\n      response.found = true;\n      response.data = this.storage.get(key);\n    }\n\n    // Send response\n    this.sendMessage(fromPeerId, 'dht_query_response', response);\n  }\n\n  /**\n   * Handle query response\n   */\n  handleQueryResponse(data) {\n    const { requestId } = data;\n    const handler = this.responseHandlers.get(requestId);\n    \n    if (handler) {\n      handler(data);\n    }\n  }\n\n  /**\n   * Update closest peers for efficient routing\n   */\n  updateClosestPeers() {\n    const connectedPeers = Array.from(this.mesh.connectionManager.peers.keys())\n      .filter(peerId => this.mesh.connectionManager.peers.get(peerId).getStatus() === 'connected');\n\n    // Keep track of closest peers for efficient routing\n    const peersWithDistance = connectedPeers.map(peerId => ({\n      peerId,\n      distance: this.ringDistance(this.hashPosition, this.hashPeerId(peerId))\n    }));\n\n    peersWithDistance.sort((a, b) => a.distance - b.distance);\n    \n    // Keep top 10 closest peers for efficient routing\n    this.closestPeers = new Set(\n      peersWithDistance.slice(0, 10).map(p => p.peerId)\n    );\n  }\n\n  /**\n   * Periodic maintenance\n   */\n  startMaintenance() {\n    // Update routing table every 30 seconds\n    setInterval(() => {\n      this.updateClosestPeers();\n    }, 30000);\n\n    // Clean up old data every 5 minutes\n    setInterval(() => {\n      this.cleanupOldData();\n    }, 300000);\n  }\n\n  /**\n   * Clean up old data (optional TTL support)\n   */\n  cleanupOldData() {\n    const now = Date.now();\n    const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n    \n    for (const [key, data] of this.storage) {\n      if (now - data.timestamp > maxAge) {\n        this.storage.delete(key);\n        this.debug.log(`Cleaned up old data: ${key}`);\n      }\n    }\n  }\n\n  /**\n   * Get DHT statistics\n   */\n  getStats() {\n    return {\n      localKeys: this.storage.size,\n      connectedPeers: this.mesh.connectionManager.getConnectedPeerCount(),\n      closestPeers: this.closestPeers.size,\n      hashPosition: this.hashPosition.toString(16).substring(0, 8)\n    };\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n// Dynamic import for unsea to handle both Node.js and browser environments\nlet unsea = null;\n\nasync function initializeUnsea() {\n  if (unsea) return unsea;\n\n  try {\n    // Detect environment - prioritize Node.js detection for tests\n    const isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\n    const isBrowser = !isNode && typeof window !== 'undefined' && typeof document !== 'undefined';\n\n    if (isNode) {\n      // For Node.js environments (including tests), use npm package\n      unsea = await import('unsea');\n      console.log('\u2705 Loaded unsea from npm package (Node.js)');\n    } else if (isBrowser) {\n      // Check if we have the bundled version first (from browser bundle)\n      if ((typeof globalThis !== 'undefined' && globalThis.__PEERPIGEON_UNSEA__) ||\n          (typeof window !== 'undefined' && window.__PEERPIGEON_UNSEA__)) {\n        unsea = globalThis.__PEERPIGEON_UNSEA__ || window.__PEERPIGEON_UNSEA__;\n        console.log('\u2705 Using bundled unsea (self-contained)');\n      } else {\n        // Fallback to CDN sources for backwards compatibility\n        try {\n          unsea = await import('https://cdn.jsdelivr.net/npm/unsea@latest/+esm');\n          console.log('\u2705 Loaded unsea from jsDelivr CDN');\n        } catch (jsDelivrError) {\n          console.warn('Failed to load from jsDelivr, trying unpkg:', jsDelivrError);\n          try {\n            unsea = await import('https://unpkg.com/unsea@latest/dist/unsea.esm.js');\n            console.log('\u2705 Loaded unsea from unpkg CDN');\n          } catch (unpkgError) {\n            console.warn('Failed to load from unpkg, trying Skypack:', unpkgError);\n            unsea = await import('https://cdn.skypack.dev/unsea');\n            console.log('\u2705 Loaded unsea from Skypack CDN');\n          }\n        }\n      }\n    } else {\n      throw new Error('Unknown environment - cannot load unsea');\n    }\n\n    if (!unsea) {\n      throw new Error('Unsea not found after loading');\n    }\n\n    return unsea;\n  } catch (error) {\n    console.error('Failed to load unsea:', error);\n    throw error;\n  }\n}\n\nexport class CryptoManager extends EventEmitter {\n  constructor() {\n    super();\n    this.debug = DebugLogger.create('CryptoManager');\n    this.unsea = null;\n    this.keypair = null;\n    this.peerKeys = new Map(); // Store peer public keys\n    this.encryptionEnabled = false;\n    this.initialized = false;\n    this.groupKeys = new Map(); // Store group encryption keys\n    this.messageNonces = new Set(); // Prevent replay attacks\n    this.maxNonceAge = 300000; // 5 minutes\n    this.nonceCleanupInterval = null; // Track the cleanup interval\n\n    // Performance metrics\n    this.stats = {\n      messagesEncrypted: 0,\n      messagesDecrypted: 0,\n      encryptionTime: 0,\n      decryptionTime: 0,\n      keyExchanges: 0\n    };\n  }\n\n  /**\n     * Initialize the crypto manager\n     * @param {Object} options - Configuration options\n     * @param {string} options.alias - Optional user alias for persistent identity\n     * @param {string} options.password - Optional password for user account\n     * @param {boolean} options.generateKeypair - Whether to generate a new keypair if no credentials\n     * @param {string} options.peerId - Peer ID to use for automatic key storage\n     * @returns {Promise<Object>} The generated or loaded keypair\n     */\n  async init(options = {}) {\n    try {\n      this.unsea = await initializeUnsea();\n\n      if (options.alias && options.password) {\n        // Try to create or authenticate with persistent identity\n        await this.createOrAuthenticateUser(options.alias, options.password);\n      } else if (options.peerId) {\n        // Use peer ID for automatic persistent key storage\n        await this.initWithPeerId(options.peerId);\n      } else if (options.generateKeypair !== false) {\n        // Generate ephemeral keypair\n        this.keypair = await this.unsea.generateRandomPair();\n      }\n\n      if (this.keypair) {\n        this.encryptionEnabled = true;\n        this.initialized = true;\n        this.emit('cryptoReady', { publicKey: this.getPublicKey() });\n\n        // Start nonce cleanup\n        this.startNonceCleanup();\n      }\n\n      return this.keypair;\n    } catch (error) {\n      this.debug.error('CryptoManager initialization failed:', error);\n      this.emit('cryptoError', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Create or authenticate a persistent user account\n     */\n  async createOrAuthenticateUser(alias, password) {\n    try {\n      // For unsea, we'll generate a deterministic keypair from credentials\n      // Note: unsea doesn't have built-in user accounts like GUN\n      // We can simulate this by generating deterministic keys from password+alias\n\n      // Use unsea's key persistence if available (browser only)\n      if (typeof window !== 'undefined') {\n        try {\n          // Try to load existing keys\n          const existingKeys = await this.unsea.loadKeys(alias, password);\n          if (existingKeys) {\n            this.keypair = existingKeys;\n          } else {\n            // Generate new keys and save them\n            this.keypair = await this.unsea.generateRandomPair();\n            // PERFORMANCE: Defer key saving to prevent blocking WebRTC connection establishment\n            setTimeout(async () => {\n              try {\n                await this.unsea.saveKeys(alias, this.keypair, password);\n              } catch (saveError) {\n                this.debug.warn('Failed to save persistent keys:', saveError);\n              }\n            }, 0);\n          }\n        } catch (error) {\n          // Fallback to generating ephemeral keys\n          this.debug.warn('Failed to use persistent storage, generating ephemeral keys:', error);\n          this.keypair = await this.unsea.generateRandomPair();\n        }\n      } else {\n        // For Node.js, just generate ephemeral keys\n        this.keypair = await this.unsea.generateRandomPair();\n      }\n\n      this.emit('userAuthenticated', { alias, publicKey: this.getPublicKey() });\n    } catch (error) {\n      this.debug.error('User authentication failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Initialize with automatic key persistence using peer ID\n     * @param {string} peerId - The peer ID to use as storage alias\n     */\n  async initWithPeerId(peerId) {\n    try {\n      // Initialize unsea if not already done\n      if (!this.unsea) {\n        this.unsea = await initializeUnsea();\n      }\n\n      const keyAlias = `peerpigeon-${peerId}`;\n      this.debug.log(`\uD83D\uDD10 Initializing crypto with automatic key persistence for peer ${peerId.substring(0, 8)}...`);\n\n      // Try to load existing keys first with timeout\n      try {\n        const loadKeysPromise = this.unsea.loadKeys(keyAlias);\n        const timeoutPromise = new Promise((resolve, reject) => {\n          setTimeout(() => reject(new Error('LoadKeys timeout')), 5000);\n        });\n        \n        const existingKeys = await Promise.race([loadKeysPromise, timeoutPromise]);\n        if (existingKeys && existingKeys.pub && existingKeys.priv) {\n          this.keypair = existingKeys;\n          this.debug.log(`\uD83D\uDD10 Loaded existing keypair for peer ${peerId.substring(0, 8)}...`);\n          \n          // Mark as initialized and emit ready event\n          this.initialized = true;\n          this.encryptionEnabled = true;\n          this.emit('cryptoReady', {\n            hasKeypair: !!this.keypair,\n            publicKey: this.getPublicKey()\n          });\n          return;\n        }\n      } catch (error) {\n        this.debug.log(`\uD83D\uDD10 No existing keys found for peer ${peerId.substring(0, 8)}..., will generate new ones`);\n      }\n\n      // Generate new keys and save them with timeout\n      const generateKeysPromise = this.unsea.generateRandomPair();\n      const generateTimeoutPromise = new Promise((resolve, reject) => {\n        setTimeout(() => reject(new Error('GenerateKeys timeout')), 5000);\n      });\n      \n      this.keypair = await Promise.race([generateKeysPromise, generateTimeoutPromise]);\n      \n      // PERFORMANCE: Defer key saving to prevent blocking WebRTC connection establishment\n      setTimeout(async () => {\n        try {\n          await this.unsea.saveKeys(keyAlias, this.keypair);\n          this.debug.log(`\uD83D\uDD10 Generated and saved new keypair for peer ${peerId.substring(0, 8)}...`);\n        } catch (saveError) {\n          this.debug.warn(`\uD83D\uDD10 Failed to save keypair for peer ${peerId.substring(0, 8)}..., using ephemeral keys:`, saveError.message);\n          // Continue with ephemeral keys if storage fails\n        }\n      }, 0);\n\n      // Mark as initialized and emit ready event\n      this.initialized = true;\n      this.encryptionEnabled = true;\n      this.emit('cryptoReady', {\n        hasKeypair: !!this.keypair,\n        publicKey: this.getPublicKey()\n      });\n\n    } catch (error) {\n      this.debug.error('Failed to initialize crypto with peer ID:', error);\n      // Fallback to ephemeral keypair\n      if (this.unsea) {\n        this.keypair = await this.unsea.generateRandomPair();\n        this.debug.log('\uD83D\uDD10 Using ephemeral keypair as fallback');\n      } else {\n        throw error;\n      }\n    }\n\n    // Mark as initialized and emit ready event\n    this.initialized = true;\n    this.encryptionEnabled = true;\n    this.emit('cryptoReady', {\n      hasKeypair: !!this.keypair,\n      publicKey: this.getPublicKey()\n    });\n  }\n\n  /**\n     * Get the public key for sharing\n     * @returns {string} The public key\n     */\n  getPublicKey() {\n    // In unsea, the public key is likely in the 'pub' property\n    return this.keypair?.pub || this.keypair?.publicKey;\n  }\n\n  /**\n     * Get crypto status information\n     * @returns {Object} Status information\n     */\n  getStatus() {\n    // Convert group keys Map to object for UI consumption\n    const groups = {};\n    this.groupKeys.forEach((groupKey, groupId) => {\n      groups[groupId] = {\n        publicKey: groupKey.pub,\n        created: groupKey.created || Date.now() // Use stored creation time or fallback to current time\n      };\n    });\n\n    return {\n      initialized: this.initialized,\n      enabled: this.encryptionEnabled,\n      hasKeypair: !!this.keypair,\n      publicKey: this.getPublicKey(),\n      peerCount: this.peerKeys.size,\n      groupCount: this.groupKeys.size,\n      groups,\n      stats: { ...this.stats }\n    };\n  }\n\n  /**\n     * Store a peer's public keys (both pub and epub)\n     * @param {string} peerId - The peer ID\n     * @param {string|Object} publicKey - The peer's public key(s) - can be string (pub) or object with {pub, epub}\n     */\n  addPeerKey(peerId, publicKey) {\n    if (!publicKey) return false;\n\n    // Handle both string (just pub) and object (pub + epub) formats\n    let keyData;\n    if (typeof publicKey === 'string') {\n      keyData = { pub: publicKey, epub: null };\n    } else if (typeof publicKey === 'object' && (publicKey.pub || publicKey.epub)) {\n      keyData = publicKey;\n    } else {\n      return false;\n    }\n\n    // Check if we already have the same key for this peer to prevent duplicate key exchange events\n    const existingKey = this.peerKeys.get(peerId);\n    if (existingKey) {\n      // Compare both pub and epub keys to determine if this is actually a new key\n      const pubMatches = existingKey.pub === keyData.pub;\n      const epubMatches = existingKey.epub === keyData.epub;\n      \n      if (pubMatches && epubMatches) {\n        // This is a duplicate key exchange - don't emit event or increment stats\n        return false;\n      }\n    }\n\n    this.peerKeys.set(peerId, keyData);\n    this.stats.keyExchanges++;\n    this.emit('peerKeyAdded', { peerId, publicKey: keyData });\n    return true;\n  }\n\n  /**\n     * Remove a peer's public key\n     * @param {string} peerId - The peer ID\n     */\n  removePeerKey(peerId) {\n    const removed = this.peerKeys.delete(peerId);\n    if (removed) {\n      this.emit('peerKeyRemoved', { peerId });\n    }\n    return removed;\n  }\n\n  /**\n     * Encrypt a message for a specific peer\n     * @param {any} message - The message to encrypt\n     * @param {string} peerId - The target peer ID\n     * @returns {Promise<Object>} Encrypted message object\n     */\n  async encryptForPeer(message, peerId) {\n    if (!this.encryptionEnabled) {\n      return { encrypted: false, data: message };\n    }\n\n    const peerKeyData = this.peerKeys.get(peerId);\n    if (!peerKeyData) {\n      throw new Error(`No public key found for peer ${peerId}`);\n    }\n\n    // Check if we have the encryption public key (epub)\n    if (!peerKeyData.epub) {\n      throw new Error(`No encryption public key (epub) found for peer ${peerId}. Only regular public key (pub) available.`);\n    }\n\n    const startTime = Date.now();\n    try {\n      const nonce = await this.generateNonce();\n      const serialized = JSON.stringify(message);\n\n      // Create a keypair object for unsea with both pub and epub\n      const peerKeypair = {\n        pub: peerKeyData.pub,\n        epub: peerKeyData.epub\n      };\n      const encrypted = await this.unsea.encryptMessageWithMeta(serialized, peerKeypair);\n\n      const result = {\n        encrypted: true,\n        data: encrypted,\n        from: this.getPublicKey(),\n        nonce,\n        timestamp: Date.now()\n      };\n\n      this.stats.messagesEncrypted++;\n      this.stats.encryptionTime += Date.now() - startTime;\n\n      return result;\n    } catch (error) {\n      this.debug.error('Peer encryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Decrypt a message from a peer\n     * @param {Object} encryptedData - The encrypted message object\n     * @returns {Promise<any>} The decrypted message\n     */\n  async decryptFromPeer(encryptedData) {\n    if (!this.encryptionEnabled || !encryptedData.encrypted) {\n      return encryptedData.data || encryptedData;\n    }\n\n    // Check for replay attacks\n    if (encryptedData.nonce && this.messageNonces.has(encryptedData.nonce)) {\n      throw new Error('Replay attack detected: duplicate nonce');\n    }\n\n    const startTime = Date.now();\n    try {\n      // Use unsea's decryptMessageWithMeta - pass our ephemeral private key (epriv)\n      const decrypted = await this.unsea.decryptMessageWithMeta(encryptedData.data, this.keypair.epriv);\n      const parsed = JSON.parse(decrypted);\n\n      // Store nonce to prevent replay\n      if (encryptedData.nonce) {\n        this.messageNonces.add(encryptedData.nonce);\n      }\n\n      this.stats.messagesDecrypted++;\n      this.stats.decryptionTime += Date.now() - startTime;\n\n      return parsed;\n    } catch (error) {\n      this.debug.error('Peer decryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Sign data with our private key\n     * @param {any} data - The data to sign\n     * @returns {Promise<string>} The signature\n     */\n  async sign(data) {\n    if (!this.encryptionEnabled) return null;\n\n    try {\n      const serialized = typeof data === 'string' ? data : JSON.stringify(data);\n      return await this.unsea.signMessage(serialized, this.keypair.priv);\n    } catch (error) {\n      this.debug.error('Signing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Verify a signature\n     * @param {string} signature - The signature to verify\n     * @param {any} data - The original data\n     * @param {string} publicKey - The signer's public key\n     * @returns {Promise<boolean>} Whether the signature is valid\n     */\n  async verify(signature, data, publicKey) {\n    if (!this.encryptionEnabled) return true;\n\n    try {\n      const serialized = typeof data === 'string' ? data : JSON.stringify(data);\n      return await this.unsea.verifyMessage(serialized, signature, publicKey);\n    } catch (error) {\n      this.debug.error('Signature verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n     * Generate a shared group key\n     * @param {string} groupId - The group identifier\n     * @returns {Promise<Object>} The group key pair\n     */\n  async generateGroupKey(groupId) {\n    try {\n      const groupKey = await this.unsea.generateRandomPair();\n      // Add metadata to the group key\n      const groupKeyWithMeta = {\n        ...groupKey,\n        created: Date.now(),\n        groupId\n      };\n      this.groupKeys.set(groupId, groupKeyWithMeta);\n      this.emit('groupKeyGenerated', { groupId, publicKey: groupKey.pub });\n      return groupKeyWithMeta;\n    } catch (error) {\n      this.debug.error('Group key generation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Add an existing group key\n     * @param {string} groupId - The group identifier\n     * @param {Object} groupKey - The group key pair\n     */\n  addGroupKey(groupId, groupKey) {\n    this.groupKeys.set(groupId, groupKey);\n    this.emit('groupKeyAdded', { groupId, publicKey: groupKey.pub });\n  }\n\n  /**\n     * Encrypt a message for a group\n     * @param {any} message - The message to encrypt\n     * @param {string} groupId - The group identifier\n     * @returns {Promise<Object>} Encrypted message object\n     */\n  async encryptForGroup(message, groupId) {\n    if (!this.encryptionEnabled) {\n      return { encrypted: false, data: message };\n    }\n\n    const groupKey = this.groupKeys.get(groupId);\n    if (!groupKey) {\n      throw new Error(`No group key found for group ${groupId}`);\n    }\n\n    const startTime = Date.now();\n    try {\n      const nonce = await this.generateNonce();\n      const serialized = JSON.stringify(message);\n      const encrypted = await this.unsea.encryptMessageWithMeta(serialized, groupKey);\n\n      const result = {\n        encrypted: true,\n        group: true,\n        groupId,\n        data: encrypted,\n        from: this.getPublicKey(),\n        nonce,\n        timestamp: Date.now()\n      };\n\n      this.stats.messagesEncrypted++;\n      this.stats.encryptionTime += Date.now() - startTime;\n\n      return result;\n    } catch (error) {\n      this.debug.error('Group encryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Decrypt a group message\n     * @param {Object} encryptedData - The encrypted message object\n     * @returns {Promise<any>} The decrypted message\n     */\n  async decryptFromGroup(encryptedData) {\n    if (!this.encryptionEnabled || !encryptedData.encrypted || !encryptedData.group) {\n      return encryptedData.data || encryptedData;\n    }\n\n    const groupKey = this.groupKeys.get(encryptedData.groupId);\n    if (!groupKey) {\n      throw new Error(`No group key found for group ${encryptedData.groupId}`);\n    }\n\n    // Check for replay attacks\n    if (encryptedData.nonce && this.messageNonces.has(encryptedData.nonce)) {\n      throw new Error('Replay attack detected: duplicate nonce');\n    }\n\n    const startTime = Date.now();\n    try {\n      const decrypted = await this.unsea.decryptMessageWithMeta(encryptedData.data, groupKey.epriv);\n      const parsed = JSON.parse(decrypted);\n\n      // Store nonce to prevent replay\n      if (encryptedData.nonce) {\n        this.messageNonces.add(encryptedData.nonce);\n      }\n\n      this.stats.messagesDecrypted++;\n      this.stats.decryptionTime += Date.now() - startTime;\n\n      return parsed;\n    } catch (error) {\n      this.debug.error('Group decryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Generate a cryptographically secure nonce\n     * @returns {Promise<string>} A unique nonce\n     */\n  async generateNonce() {\n    // Generate a simple nonce using timestamp and random\n    const timestamp = Date.now().toString();\n    const random = Math.random().toString(36).substring(2);\n    const combined = `${timestamp}-${random}-${Math.floor(Math.random() * 1000000)}`;\n\n    // Use crypto.subtle to hash the combined string if available\n    if (typeof crypto !== 'undefined' && crypto.subtle) {\n      try {\n        const encoder = new TextEncoder();\n        const data = encoder.encode(combined);\n        const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('').substring(0, 16);\n      } catch (error) {\n        this.debug.warn('Could not use crypto.subtle for nonce generation:', error);\n      }\n    }\n\n    // Fallback to simple combined string\n    return combined;\n  }\n\n  /**\n     * Start periodic cleanup of old nonces\n     */\n  startNonceCleanup() {\n    // Store the interval ID for cleanup\n    this.nonceCleanupInterval = setInterval(() => {\n      try {\n        // Remove old nonces (this is a simplified approach)\n        // In a real implementation, you'd store nonces with timestamps\n        if (this.messageNonces.size > 1000) {\n          this.messageNonces.clear();\n        }\n      } catch (error) {\n        console.error('Error during nonce cleanup:', error);\n      }\n    }, 60000); // Clean up every minute\n  }\n\n  /**\n     * Export public key for sharing\n     * @returns {Object} Export data\n     */\n  exportPublicKey() {\n    if (!this.keypair) return null;\n\n    return {\n      pub: this.keypair.pub,\n      epub: this.keypair.epub,\n      algorithm: 'ECDSA',\n      created: Date.now()\n    };\n  }\n\n  /**\n     * Clear all stored keys and reset state\n     */\n  reset() {\n    // Clear the nonce cleanup interval\n    if (this.nonceCleanupInterval) {\n      clearInterval(this.nonceCleanupInterval);\n      this.nonceCleanupInterval = null;\n    }\n\n    this.keypair = null;\n    this.peerKeys.clear();\n    this.groupKeys.clear();\n    this.messageNonces.clear();\n    this.encryptionEnabled = false;\n    this.initialized = false;\n\n    // Reset stats\n    this.stats = {\n      messagesEncrypted: 0,\n      messagesDecrypted: 0,\n      encryptionTime: 0,\n      decryptionTime: 0,\n      keyExchanges: 0\n    };\n\n    this.emit('cryptoReset');\n  }\n\n  /**\n     * Test crypto functionality\n     * @returns {Promise<Object>} Test results\n     */\n  async runSelfTest() {\n    const results = {\n      keypairGeneration: false,\n      encryption: false,\n      decryption: false,\n      signing: false,\n      verification: false,\n      groupEncryption: false,\n      errors: []\n    };\n\n    // Check if crypto is properly initialized\n    if (!this.unsea) {\n      results.errors.push('Unsea library not loaded');\n      return results;\n    }\n\n    if (!this.initialized) {\n      results.errors.push('CryptoManager not initialized');\n      return results;\n    }\n\n    this.debug.log('\uD83D\uDD0D Debug: unsea object:', this.unsea);\n    this.debug.log('\uD83D\uDD0D Debug: available methods:', Object.keys(this.unsea));\n\n    try {\n      // Test keypair generation\n      this.debug.log('\uD83E\uDDEA Testing keypair generation...');\n      const testKeypair = await this.unsea.generateRandomPair();\n      this.debug.log('\uD83D\uDD0D Generated keypair:', testKeypair);\n      results.keypairGeneration = !!(testKeypair && (testKeypair.pub || testKeypair.publicKey));\n\n      // Test encryption/decryption - create two keypairs to simulate peer-to-peer encryption\n      this.debug.log('\uD83E\uDDEA Testing encryption...');\n      const testMessage = 'Hello, crypto world!';\n\n      // Create a second keypair to simulate a peer\n      const peerKeypair = await this.unsea.generateRandomPair();\n\n      // Encrypt from our keypair TO the peer keypair\n      const encrypted = await this.unsea.encryptMessageWithMeta(testMessage, peerKeypair);\n      this.debug.log('\uD83D\uDD0D Encrypted result:', encrypted);\n      results.encryption = !!encrypted;\n\n      this.debug.log('\uD83E\uDDEA Testing decryption...');\n      // Use the ephemeral private key (epriv) for decryption as shown in the example\n      const decrypted = await this.unsea.decryptMessageWithMeta(encrypted, peerKeypair.epriv);\n      this.debug.log('\uD83D\uDD0D Decrypted result:', decrypted);\n      results.decryption = decrypted === testMessage;\n\n      // Test signing/verification\n      this.debug.log('\uD83E\uDDEA Testing signing...');\n      const signature = await this.unsea.signMessage(testMessage, this.keypair.priv);\n      this.debug.log('\uD83D\uDD0D Signature:', signature);\n      results.signing = !!signature;\n\n      this.debug.log('\uD83E\uDDEA Testing verification...');\n      const verified = await this.unsea.verifyMessage(testMessage, signature, this.keypair.pub);\n      this.debug.log('\uD83D\uDD0D Verification result:', verified);\n      results.verification = verified === true;\n\n      // Test group encryption (same as regular encryption with different key)\n      this.debug.log('\uD83E\uDDEA Testing group encryption...');\n      const groupKey = await this.unsea.generateRandomPair();\n      const groupEncrypted = await this.unsea.encryptMessageWithMeta(testMessage, groupKey);\n      const groupDecrypted = await this.unsea.decryptMessageWithMeta(groupEncrypted, groupKey.epriv);\n      results.groupEncryption = groupDecrypted === testMessage;\n    } catch (error) {\n      this.debug.error('\uD83D\uDD0D Self-test error:', error);\n      results.errors.push(error.message);\n    }\n\n    this.debug.log('\uD83D\uDD0D Final test results:', results);\n    return results;\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\n\n/**\n * Lexical Storage Interface - GUN-like chaining API for DistributedStorageManager\n *\n * Usage:\n * const user = storage.get('users').get('alice');\n * await user.put({name: 'Alice', age: 30});\n * const name = await user.get('name').val();\n *\n * user.get('friends').set({bob: true, charlie: true});\n * user.get('friends').map().on((friend, key) => console.log(key, friend));\n */\nexport class LexicalStorageInterface extends EventEmitter {\n  constructor(distributedStorage, path = []) {\n    super();\n    this.debug = DebugLogger.create('LexicalStorageInterface');\n    this.storage = distributedStorage;\n    this.path = path.slice(); // Create a copy of the path\n    this.subscriptions = new Map();\n    this._isMap = false;\n  }\n\n  /**\n   * Navigate to a key (creates a new interface instance)\n   * @param {string} key - The key to navigate to\n   * @returns {LexicalStorageInterface} New interface for the key\n   */\n  get(key) {\n    const newInterface = new LexicalStorageInterface(this.storage, [...this.path, key]);\n    return newInterface;\n  }\n\n  /**\n   * Store data at the current path\n   * @param {any} value - Value to store\n   * @param {Object} options - Storage options\n   * @returns {Promise<LexicalStorageInterface>} This interface for chaining\n   */\n  async put(value, options = {}) {\n    const fullKey = this.path.join(':');\n\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      // For objects, store each property as a separate key\n      const promises = Object.entries(value).map(([prop, val]) => {\n        const propKey = `${fullKey}:${prop}`;\n        return this.storage.store(propKey, val, options);\n      });\n      await Promise.all(promises);\n\n      // Also store the object structure for reference\n      await this.storage.store(fullKey, { _keys: Object.keys(value), _type: 'object' }, options);\n    } else {\n      // For primitives, store directly\n      await this.storage.store(fullKey, value, options);\n    }\n\n    // Emit change event\n    this.emit('put', { key: fullKey, value });\n\n    return this;\n  }\n\n  /**\n   * Retrieve the current value\n   * @param {Object} options - Retrieval options\n   * @returns {Promise<any>} The stored value\n   */\n  async val(options = {}) {\n    const fullKey = this.path.join(':');\n    const value = await this.storage.retrieve(fullKey, options);\n\n    // If it's an object structure, reconstruct it\n    if (value && typeof value === 'object' && value._keys && value._type === 'object') {\n      const reconstructed = {};\n      const promises = value._keys.map(async (key) => {\n        const keyValue = await this.storage.retrieve(`${fullKey}:${key}`, options);\n        reconstructed[key] = keyValue;\n      });\n      await Promise.all(promises);\n      return reconstructed;\n    }\n\n    return value;\n  }\n\n  /**\n   * Set multiple key-value pairs (like GUN's set)\n   * @param {Object} obj - Object with key-value pairs to set\n   * @param {Object} options - Storage options\n   * @returns {Promise<LexicalStorageInterface>} This interface for chaining\n   */\n  async set(obj, options = {}) {\n    const fullKey = this.path.join(':');\n\n    // Store each entry with a unique ID\n    const promises = Object.entries(obj).map(([key, value]) => {\n      const setKey = `${fullKey}:${key}`;\n      return this.storage.store(setKey, value, options);\n    });\n\n    await Promise.all(promises);\n\n    // Update the set index\n    const existingSet = await this.storage.retrieve(`${fullKey}:_set`) || {};\n    const updatedSet = { ...existingSet, ...obj };\n    await this.storage.store(`${fullKey}:_set`, updatedSet, options);\n\n    // Emit set event\n    this.emit('set', { key: fullKey, values: obj });\n\n    return this;\n  }\n\n  /**\n   * Map over a set (like GUN's map)\n   * @returns {LexicalStorageInterface} New interface for mapping\n   */\n  map() {\n    const mapInterface = new LexicalStorageInterface(this.storage, this.path);\n    mapInterface._isMap = true;\n    return mapInterface;\n  }\n\n  /**\n   * Subscribe to changes (like GUN's on)\n   * @param {Function} callback - Callback for changes\n   * @returns {Function} Unsubscribe function\n   */\n  on(callback) {\n    const fullKey = this.path.join(':');\n\n    if (this._isMap) {\n      // For maps, listen to set changes\n      const setKey = `${fullKey}:_set`;\n\n      const handleChange = async () => {\n        const setData = await this.storage.retrieve(setKey);\n        if (setData) {\n          Object.entries(setData).forEach(([key, value]) => {\n            callback(value, key);\n          });\n        }\n      };\n\n      // Subscribe to the set key using storage's subscription mechanism\n      if (this.storage.subscribe) {\n        this.storage.subscribe(setKey).then(() => {\n          this.storage.on('dataUpdated', (event) => {\n            if (event.key === setKey) {\n              handleChange();\n            }\n          });\n        });\n      }\n\n      // Initial call\n      handleChange();\n\n      return () => {\n        if (this.storage.unsubscribe) {\n          this.storage.unsubscribe(setKey);\n        }\n      };\n    } else {\n      // For regular keys, listen to direct changes\n      if (this.storage.subscribe) {\n        this.storage.subscribe(fullKey).then((currentValue) => {\n          callback(currentValue, fullKey);\n        });\n\n        this.storage.on('dataUpdated', (event) => {\n          if (event.key === fullKey) {\n            this.storage.retrieve(fullKey).then(value => {\n              callback(value, fullKey);\n            });\n          }\n        });\n      }\n\n      return () => {\n        if (this.storage.unsubscribe) {\n          this.storage.unsubscribe(fullKey);\n        }\n      };\n    }\n  }\n\n  /**\n   * Once - listen for a single change\n   * @param {Function} callback - Callback for the change\n   * @returns {Promise} Promise that resolves with the value\n   */\n  async once(callback) {\n    return new Promise((resolve) => {\n      const unsubscribe = this.on((value, key) => {\n        if (callback) callback(value, key);\n        unsubscribe();\n        resolve(value);\n      });\n    });\n  }\n\n  /**\n   * Delete the current path\n   * @returns {Promise<boolean>} Success status\n   */\n  async delete() {\n    const fullKey = this.path.join(':');\n\n    // If it's an object, delete all its properties first\n    const value = await this.storage.retrieve(fullKey);\n    if (value && typeof value === 'object' && value._keys && value._type === 'object') {\n      const deletePromises = value._keys.map(key => {\n        const propKey = `${fullKey}:${key}`;\n        return this.storage.delete(propKey);\n      });\n      await Promise.all(deletePromises);\n    }\n\n    const result = await this.storage.delete(fullKey);\n\n    // Emit delete event\n    this.emit('delete', { key: fullKey });\n\n    return result;\n  }\n\n  /**\n   * Update with merge semantics\n   * @param {any} value - Value to merge\n   * @param {Object} options - Update options\n   * @returns {Promise<LexicalStorageInterface>} This interface for chaining\n   */\n  async update(value, options = {}) {\n    const fullKey = this.path.join(':');\n    const currentValue = await this.storage.retrieve(fullKey);\n\n    let mergedValue;\n    if (typeof value === 'object' && value !== null && !Array.isArray(value) &&\n        typeof currentValue === 'object' && currentValue !== null && !Array.isArray(currentValue)) {\n      // Handle object reconstruction first\n      if (currentValue._keys && currentValue._type === 'object') {\n        const reconstructed = {};\n        const promises = currentValue._keys.map(async (key) => {\n          const keyValue = await this.storage.retrieve(`${fullKey}:${key}`, options);\n          reconstructed[key] = keyValue;\n        });\n        await Promise.all(promises);\n        mergedValue = { ...reconstructed, ...value };\n      } else {\n        mergedValue = { ...currentValue, ...value };\n      }\n    } else {\n      mergedValue = value;\n    }\n\n    // Use put instead of update to ensure proper object decomposition\n    await this.put(mergedValue, options);\n\n    // Emit update event\n    this.emit('update', { key: fullKey, value: mergedValue });\n\n    return this;\n  }\n\n  /**\n   * Create a proxied interface that allows property access\n   * @returns {Proxy} Proxied interface\n   */\n  proxy() {\n    return new Proxy(this, {\n      get(target, prop) {\n        // If it's a method, return it bound\n        if (typeof target[prop] === 'function') {\n          return target[prop].bind(target);\n        }\n\n        // If it's a property access, create a new get() call\n        if (typeof prop === 'string' && !prop.startsWith('_') && prop !== 'constructor') {\n          return target.get(prop).proxy();\n        }\n\n        return target[prop];\n      }\n    });\n  }\n\n  /**\n   * Get the current path as a string\n   * @returns {string} The path\n   */\n  getPath() {\n    return this.path.join(':');\n  }\n\n  /**\n   * Check if a value exists at the current path\n   * @returns {Promise<boolean>} Whether the value exists\n   */\n  async exists() {\n    const fullKey = this.path.join(':');\n    const value = await this.storage.retrieve(fullKey);\n    return value !== null && value !== undefined;\n  }\n\n  /**\n   * Get all keys under the current path (for object-like structures)\n   * @returns {Promise<string[]>} Array of keys\n   */\n  async keys() {\n    const fullKey = this.path.join(':');\n    const value = await this.storage.retrieve(fullKey);\n\n    if (value && typeof value === 'object' && value._keys && value._type === 'object') {\n      return value._keys;\n    }\n\n    return [];\n  }\n}\n\n/**\n * Create a lexical interface for the distributed storage\n * @param {DistributedStorageManager} distributedStorage\n * @returns {Proxy} Proxied lexical interface\n */\nexport function createLexicalInterface(distributedStorage) {\n  const lexicalInterface = new LexicalStorageInterface(distributedStorage);\n  return lexicalInterface.proxy();\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport DebugLogger from './DebugLogger.js';\nimport { createLexicalInterface } from './LexicalStorageInterface.js';\n\n// Dynamic import for unsea to handle both Node.js and browser environments\nlet unsea = null;\n\nasync function initializeUnsea() {\n  if (unsea) return unsea;\n\n  try {\n    // Check if UnSEA is bundled (browser bundle case)\n    if (typeof window !== 'undefined' && window.__PEERPIGEON_UNSEA__) {\n      unsea = window.__PEERPIGEON_UNSEA__;\n      console.log('\u2705 Using bundled UnSEA crypto for storage');\n      return unsea;\n    }\n\n    // Check global scope for bundled version\n    if (typeof globalThis !== 'undefined' && globalThis.__PEERPIGEON_UNSEA__) {\n      unsea = globalThis.__PEERPIGEON_UNSEA__;\n      console.log('\u2705 Using bundled UnSEA crypto for storage');\n      return unsea;\n    }\n\n    // Detect environment - prioritize Node.js detection for tests\n    const isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\n\n    if (isNode) {\n      // For Node.js environments (including tests), use npm package\n      unsea = await import('unsea');\n      console.log('\u2705 Loaded unsea from npm package (Node.js) for storage');\n    } else {\n      // For browser environments without bundle, try CDN sources as fallback\n      try {\n        unsea = await import('https://cdn.jsdelivr.net/npm/unsea@latest/+esm');\n        console.log('\u2705 Loaded unsea from jsDelivr CDN for storage');\n      } catch (jsDelivrError) {\n        console.warn('Failed to load from jsDelivr, trying unpkg:', jsDelivrError);\n        try {\n          unsea = await import('https://unpkg.com/unsea@latest/dist/unsea.esm.js');\n          console.log('\u2705 Loaded unsea from unpkg CDN for storage');\n        } catch (unpkgError) {\n          console.warn('Failed to load from unpkg, trying Skypack:', unpkgError);\n          unsea = await import('https://cdn.skypack.dev/unsea');\n          console.log('\u2705 Loaded unsea from Skypack CDN for storage');\n        }\n      }\n    }\n\n    if (!unsea) {\n      throw new Error('Unsea not found after loading');\n    }\n\n    return unsea;\n  } catch (error) {\n    console.error('Failed to load unsea for storage:', error);\n    throw error;\n  }\n}\n\n/**\n * DistributedStorageManager - High-level distributed storage layer for PeerPigeon mesh\n *\n * Features:\n * - Encrypted storage using unsea directly\n * - Optional public/private data visibility with access control\n * - Optional immutability with CRDT support for collaborative editing\n * - Mutable layer for data originators\n * - Uses WebDHT as low-level storage backend (but is separate conceptually)\n * - Space separation for preventing data overwrites (Private, Public, Frozen)\n * \n * IMPORTANT: This is a HIGH-LEVEL storage system that provides encryption, \n * access control, and advanced features. It uses WebDHT as its storage backend\n * but they are separate concepts:\n * - WebDHT: Low-level distributed hash table for raw key-value storage\n * - DistributedStorageManager: High-level storage with encryption/access control\n */\nexport class DistributedStorageManager extends EventEmitter {\n  constructor(mesh) {\n    super();\n    this.debug = DebugLogger.create('DistributedStorageManager');\n    this.mesh = mesh;\n    \n    // IMPORTANT: DistributedStorageManager uses WebDHT as its storage backend\n    // but they are conceptually separate systems:\n    // - WebDHT: Low-level DHT for raw key-value storage across the mesh\n    // - DistributedStorageManager: High-level storage with encryption, access control, spaces\n    this.webDHT = mesh.webDHT; // Uses WebDHT as backend storage layer\n    this.cryptoManager = mesh.cryptoManager;\n\n    // Initialize unsea for encryption\n    this.unsea = null;\n    this.storageKeypair = null;\n    this.initializeCrypto();\n\n    // Storage configuration\n    this.config = {\n      encryptionEnabled: true,\n      defaultTTL: null, // No expiration by default\n      maxValueSize: 1024 * 1024, // 1MB default max size\n      enableCRDT: true,\n      conflictResolution: 'last-write-wins', // or 'crdt-merge'\n      spaceEnforcement: true // Enable space-based access control\n    };\n\n    // Storage spaces for data separation\n    this.spaces = {\n      PRIVATE: 'private', // Only owner can read/write, encrypted\n      PUBLIC: 'public', // Anyone can read, only owner can write\n      FROZEN: 'frozen' // Immutable once set, anyone can read\n    };\n\n    // Local storage for metadata and permissions\n    this.storageMetadata = new Map(); // keyId -> metadata\n    this.accessControl = new Map(); // keyId -> access control info\n    this.crdtStates = new Map(); // keyId -> CRDT state for collaborative data\n\n    // Track data ownership by space\n    this.ownedKeys = new Set(); // Keys owned by this peer\n    this.spaceOwnership = new Map(); // space:key -> owner mapping\n    this.keyToSpaceMapping = new Map(); // baseKey -> {space, storageKey} mapping for transparent access\n\n    // Track enabled state\n    this.enabled = true; // Enable by default\n\n    this.debug.log(`DistributedStorageManager initialized for peer ${this.mesh.peerId?.substring(0, 8)}...`);\n  }\n\n  /**\n   * Initialize unsea encryption for storage\n   * @private\n   */\n  async initializeCrypto() {\n    try {\n      this.unsea = await initializeUnsea();\n\n      // Generate a keypair for storage encryption\n      // Use the mesh's keypair if available, otherwise generate one\n      if (this.cryptoManager && this.cryptoManager.keypair) {\n        this.storageKeypair = this.cryptoManager.keypair;\n      } else {\n        this.storageKeypair = await this.unsea.generateRandomPair();\n      }\n\n      this.debug.log('\uD83D\uDCE6 Storage encryption initialized with unsea');\n    } catch (error) {\n      this.debug.warn('\uD83D\uDCE6 Failed to initialize storage encryption:', error);\n      // Disable encryption if unsea fails to load\n      this.config.encryptionEnabled = false;\n    }\n  }\n\n  /**\n   * Wait for crypto initialization to complete\n   * @returns {Promise<void>}\n   */\n  async waitForCrypto() {\n    if (this.unsea && this.storageKeypair) {\n      return;\n    }\n\n    // Wait up to 5 seconds for crypto to initialize\n    const timeout = 5000;\n    const start = Date.now();\n\n    while ((!this.unsea || !this.storageKeypair) && (Date.now() - start) < timeout) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  /**\n   * Resolve a key to its actual storage location across spaces\n   * @param {string} key - The storage key (base key only)\n   * @returns {Object} - {space, baseKey, keyId}\n   */\n  async resolveKey(key) {\n    // Use the key directly - NO PREFIX PARSING\n    const baseKey = key;\n    \n    // Generate keyId from baseKey (no prefixes)\n    const keyId = await this.webDHT.hash(baseKey);\n\n    // For bare keys, check if we have a mapping\n    const mapping = this.keyToSpaceMapping.get(baseKey);\n    if (mapping) {\n      return {\n        space: mapping.space,\n        baseKey,\n        keyId\n      };\n    }\n\n    // If no mapping exists, check if we have metadata for this key\n    if (this.storageMetadata.has(keyId)) {\n      const metadata = this.storageMetadata.get(keyId);\n      const space = metadata.space || this.spaces.PRIVATE;\n      // Update the mapping for future use\n      this.keyToSpaceMapping.set(baseKey, { space, storageKey: baseKey });\n      return {\n        space,\n        baseKey,\n        keyId\n      };\n    }\n\n    // Default to private space if no other information is available\n    const defaultSpace = this.spaces.PRIVATE;\n    this.keyToSpaceMapping.set(baseKey, { space: defaultSpace, storageKey: baseKey });\n    return {\n      space: defaultSpace,\n      baseKey,\n      keyId\n    };\n  }\n\n\n\n  /**\n   * Check if a peer can access a key in a specific space\n   * @param {string} space - The storage space\n   * @param {string} key - The storage key\n   * @param {string} peerId - The peer ID requesting access\n   * @param {string} operation - The operation (read, write)\n   * @returns {boolean} - Whether access is allowed\n   */\n  canAccessSpace(space, key, peerId, operation = 'read') {\n    if (!this.config.spaceEnforcement) {\n      return true; // Space enforcement disabled\n    }\n\n    const spaceKey = `${space}:${key}`;\n    const owner = this.spaceOwnership.get(spaceKey);\n\n    switch (space) {\n      case this.spaces.PRIVATE:\n        // Private: Only owner can read/write, or if no owner exists (initial write)\n        return !owner || owner === peerId;\n\n      case this.spaces.PUBLIC:\n        if (operation === 'read') {\n          return true; // Anyone can read public data\n        } else {\n          return !owner || owner === peerId; // Only owner can write, or initial write\n        }\n\n      case this.spaces.FROZEN:\n        if (operation === 'read') {\n          return true; // Anyone can read frozen data\n        } else {\n          // For frozen data, only the owner can write (both initial and updates)\n          return !owner || owner === peerId; // Only owner can write, or initial write\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Determine appropriate space and access control from options\n   * @param {Object} options - Storage options\n   * @returns {Object} - {space, isPublic, isImmutable}\n   */\n  determineSpaceFromOptions(options = {}) {\n    // Allow explicit space specification\n    if (options.space && Object.values(this.spaces).includes(options.space)) {\n      const space = options.space;\n      return {\n        space,\n        isPublic: space !== this.spaces.PRIVATE,\n        isImmutable: space === this.spaces.FROZEN\n      };\n    }\n\n    // Legacy compatibility - determine space from isPublic/isImmutable\n    if (options.isImmutable) {\n      return {\n        space: this.spaces.FROZEN,\n        isPublic: true,\n        isImmutable: true\n      };\n    } else if (options.isPublic) {\n      return {\n        space: this.spaces.PUBLIC,\n        isPublic: true,\n        isImmutable: false\n      };\n    } else {\n      return {\n        space: this.spaces.PRIVATE,\n        isPublic: false,\n        isImmutable: false\n      };\n    }\n  }\n\n  /**\n   * Find if a base key exists in a different space\n   * @param {string} baseKey - The base key to search for\n   * @param {string} excludeSpace - The space to exclude from search\n   * @returns {string|null} - The space where the key exists, or null if not found\n   */\n  findKeyInDifferentSpace(baseKey, excludeSpace) {\n    // Check our metadata to see if this baseKey exists in a different space\n    for (const metadata of this.storageMetadata.values()) {\n      if (metadata.baseKey === baseKey && metadata.space !== excludeSpace) {\n        return metadata.space;\n      }\n    }\n    \n    // Also check space ownership using baseKey directly\n    if (this.spaceOwnership.has(baseKey)) {\n      const mapping = this.keyToSpaceMapping.get(baseKey);\n      if (mapping && mapping.space !== excludeSpace) {\n        return mapping.space;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Check if the current peer has read access to a key with space awareness\n   * @param {string} keyId - The key ID\n   * @param {Object} metadata - The metadata object\n   * @param {string} space - The storage space\n   * @returns {boolean} - Whether access is allowed\n   */\n  hasReadAccessWithSpace(keyId, metadata, space) {\n    const accessControl = this.accessControl.get(keyId);\n\n    if (!accessControl && metadata) {\n      // Create access control from metadata\n      this.accessControl.set(keyId, {\n        isPublic: metadata.isPublic,\n        owner: metadata.owner,\n        allowedPeers: new Set(metadata.allowedPeers || []),\n        isImmutable: metadata.isImmutable,\n        space: metadata.space || space\n      });\n      return this.hasReadAccessWithSpace(keyId, metadata, space);\n    }\n\n    if (!accessControl) {\n      return false;\n    }\n\n    // Owner always has access\n    if (accessControl.owner === this.mesh.peerId) {\n      return true;\n    }\n\n    // Space-based access control\n    switch (space) {\n      case this.spaces.PRIVATE:\n        // Private: only owner and specifically allowed peers\n        return accessControl.allowedPeers.has(this.mesh.peerId);\n\n      case this.spaces.PUBLIC:\n      case this.spaces.FROZEN:\n        // Public and frozen: anyone can read\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Store data with encryption and access control\n   * @param {string} key - The storage key\n   * @param {any} value - The value to store\n   * @param {Object} options - Storage options\n   * @param {string} options.space - Storage space ('private', 'public', 'frozen')\n   * @param {boolean} options.isPublic - Whether data is publicly readable (legacy, use space instead)\n   * @param {boolean} options.isImmutable - Whether data is immutable (legacy, use frozen space instead)\n   * @param {boolean} options.enableCRDT - Whether to enable CRDT for collaborative editing (default: false)\n   * @param {number} options.ttl - Time to live in milliseconds\n   * @param {Array<string>} options.allowedPeers - Specific peers allowed to read private data\n   * @returns {Promise<boolean>} Success status\n   */\n  async store(key, value, options = {}) {\n    if (!this.enabled) {\n      return false;\n    }\n\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    // Wait for crypto initialization if encryption is enabled\n    if (this.config.encryptionEnabled) {\n      await this.waitForCrypto();\n    }\n\n    // Use the key directly - NO PREFIX PARSING\n    const spaceConfig = this.determineSpaceFromOptions(options);\n\n    // Use the base key directly - NO SPACE PREFIXES!\n    const baseKey = key;\n    const space = options.space || spaceConfig.space;\n    \n    // The stored key is just the base key - space info goes in metadata\n    const storageKey = baseKey;\n\n    // Check space access permissions\n    if (!this.canAccessSpace(space, baseKey, this.mesh.peerId, 'write')) {\n      throw new Error(`Write access denied for space \"${space}\" and key \"${baseKey}\"`);\n    }\n\n    const keyId = await this.webDHT.hash(storageKey);\n    const timestamp = Date.now();\n    this.debug.log(`\uD83D\uDCE6 Storing key: ${storageKey} in ${space} space, keyId: ${keyId.toString(16).substring(0, 8)}...`);\n\n    // Validate value size\n    const serializedValue = JSON.stringify(value);\n    if (serializedValue.length > this.config.maxValueSize) {\n      throw new Error(`Value size exceeds maximum allowed size of ${this.config.maxValueSize} bytes`);\n    }\n\n    // Create storage metadata with type and space information\n    const metadata = {\n      key: baseKey,  // Just the base key, no prefixes - space is its own attribute\n      baseKey,\n      space,\n      keyId,\n      owner: this.mesh.peerId,\n      isPublic: spaceConfig.isPublic,\n      isImmutable: spaceConfig.isImmutable,\n      enableCRDT: options.enableCRDT || false,\n      allowedPeers: options.allowedPeers || [],\n      createdAt: timestamp,\n      updatedAt: timestamp,\n      version: 1,\n      ttl: options.ttl || this.config.defaultTTL,\n      type: 'storage', // Mark this as storage data type\n      dataType: 'distributed-storage' // Specific storage system identifier\n    };\n\n    // Store metadata locally\n    this.storageMetadata.set(keyId, metadata);\n    this.ownedKeys.add(keyId);\n\n    // Track space ownership using just the base key\n    this.spaceOwnership.set(baseKey, this.mesh.peerId);\n\n    // Track base key to space mapping for transparent access\n    this.keyToSpaceMapping.set(baseKey, { space, storageKey });\n\n    // Set up access control\n    this.accessControl.set(keyId, {\n      isPublic: metadata.isPublic,\n      owner: metadata.owner,\n      allowedPeers: new Set(metadata.allowedPeers),\n      isImmutable: metadata.isImmutable,\n      space\n    });\n\n    // Initialize CRDT state if enabled\n    if (metadata.enableCRDT) {\n      this.crdtStates.set(keyId, {\n        vectorClock: { [this.mesh.peerId]: 1 },\n        operations: [],\n        lastMerged: timestamp\n      });\n    }\n\n    // Prepare the storage payload\n    let storagePayload = {\n      value,\n      metadata,\n      encrypted: false\n    };\n\n    // Only encrypt private space data\n    if (space === this.spaces.PRIVATE && this.config.encryptionEnabled && this.unsea && this.storageKeypair) {\n      try {\n        // For private data, encrypt with the owner's keypair so only the owner can decrypt\n        const encryptedValue = await this.unsea.encryptMessageWithMeta(serializedValue, this.storageKeypair);\n        storagePayload = {\n          value: encryptedValue,\n          metadata,\n          encrypted: true,\n          encryptedBy: this.mesh.peerId // Track who encrypted it\n        };\n        this.debug.log(`\uD83D\uDCE6 Encrypted private space storage data for key: ${storageKey} (owner-only access)`);\n      } catch (error) {\n        this.debug.warn(`Failed to encrypt private space storage data for key ${storageKey}:`, error);\n        // Fall back to unencrypted storage if encryption fails\n      }\n    } else {\n      this.debug.log(`\uD83D\uDCE6 Storing ${space} space data for key: ${storageKey}`);\n    }\n\n    // CRITICAL DEBUG: Log exactly what we're storing\n    this.debug.log(`\uD83D\uDCE6 STORING PAYLOAD STRUCTURE for key ${storageKey}:`, {\n      hasValue: !!storagePayload.value,\n      hasMetadata: !!storagePayload.metadata,\n      valueType: typeof storagePayload.value,\n      metadataType: typeof storagePayload.metadata,\n      metadataKeys: storagePayload.metadata ? Object.keys(storagePayload.metadata) : 'none',\n      encrypted: storagePayload.encrypted,\n      payloadKeys: Object.keys(storagePayload)\n    });\n\n    // Store in WebDHT with storage namespace prefix to separate from raw DHT data\n    // This maintains separation between low-level DHT operations and high-level storage\n    try {\n      this.debug.log(`\uD83D\uDCE6 Storing payload for key ${storageKey}:`, {\n        hasValue: !!storagePayload.value,\n        hasMetadata: !!storagePayload.metadata,\n        encrypted: storagePayload.encrypted,\n        space\n      });\n\n      // Store directly with clean key - NO PREFIXES, type information is in metadata\n      await this.webDHT.put(storageKey, storagePayload, {\n        ttl: metadata.ttl,\n        space: space // Pass space for space-aware replication\n      });\n\n      this.debug.log(`\uD83D\uDCE6 Stored ${space} space data for key: ${storageKey}`);\n\n      // Emit storage event\n      this.emit('dataStored', {\n        key: storageKey,\n        baseKey,\n        space,\n        keyId,\n        isPublic: metadata.isPublic,\n        isImmutable: metadata.isImmutable,\n        enableCRDT: metadata.enableCRDT\n      });\n\n      return true;\n    } catch (error) {\n      this.debug.error(`Failed to store data for key ${storageKey}:`, error);\n      // Clean up local metadata on failure\n      this.storageMetadata.delete(keyId);\n      this.ownedKeys.delete(keyId);\n      this.accessControl.delete(keyId);\n      this.crdtStates.delete(keyId);\n      this.spaceOwnership.delete(baseKey);\n      this.keyToSpaceMapping.delete(baseKey);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data with access control and decryption\n   * @param {string} key - The storage key (base key only, no prefixes)\n   * @param {Object} options - Retrieval options\n   * @param {string} options.space - Specific space to look in (optional)\n   * @param {boolean} options.forceRefresh - Force refresh from network\n   * @returns {Promise<any>} The stored value or null if not accessible\n   */\n  async retrieve(key, options = {}) {\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    // Wait for crypto initialization if encryption is enabled\n    if (this.config.encryptionEnabled) {\n      await this.waitForCrypto();\n    }\n\n    // Use the key directly - NO PREFIX STRIPPING\n    const baseKey = key;\n    \n    this.debug.log(`\uD83D\uDCE6 Retrieving data for base key: ${baseKey}`);\n\n    try {\n      // Get data from WebDHT using just the clean base key - NO PREFIXES\n      const webDHTPayload = await this.webDHT.get(baseKey, {\n        forceRefresh: options.forceRefresh,\n        space: options.space // Pass space for space-aware replication\n      });\n\n      this.debug.log(`\uD83D\uDCE6 Retrieved WebDHT payload for key ${baseKey}:`, {\n        payloadExists: !!webDHTPayload,\n        payloadType: typeof webDHTPayload,\n        keys: webDHTPayload ? Object.keys(webDHTPayload) : 'none'\n      });\n\n      if (!webDHTPayload || typeof webDHTPayload !== 'object') {\n        this.debug.log(`\uD83D\uDCE6 No data found for key: ${baseKey}`);\n        return null;\n      }\n\n      // Process the data using the metadata to determine space and access control\n      return await this.processRetrievedData(baseKey, webDHTPayload);\n    } catch (error) {\n      this.debug.error(`Failed to retrieve data for key ${baseKey}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Process retrieved data payload with decryption and access control\n   * @private\n   */\n  async processRetrievedData(baseKey, webDHTPayload) {\n    try {\n      // Generate keyId for this baseKey\n      const keyId = await this.webDHT.hash(baseKey);\n\n      // WebDHT returns the storage payload directly as {value, metadata, encrypted}\n      const storagePayload = webDHTPayload;\n\n      console.log(`\uD83D\uDCE6 CRITICAL DEBUG: WebDHT payload structure for ${baseKey}:`, {\n        webDHTKeys: Object.keys(webDHTPayload),\n        payloadType: typeof webDHTPayload,\n        directValue: !!webDHTPayload.value,\n        directMetadata: !!webDHTPayload.metadata,\n        directEncrypted: webDHTPayload.encrypted\n      });\n\n      if (!storagePayload || typeof storagePayload !== 'object') {\n        console.log(`\uD83D\uDCE6 CRITICAL: Invalid storage payload for key: ${baseKey}`);\n        this.debug.log(`\uD83D\uDCE6 Invalid storage payload for key: ${baseKey}`);\n        return null;\n      }\n\n      // Safely destructure the payload with detailed logging\n      const value = storagePayload.value;\n      const metadata = storagePayload.metadata;\n      const encrypted = storagePayload.encrypted || false;\n      const encryptedBy = storagePayload.encryptedBy;\n\n      if (!metadata) {\n        this.debug.warn(`\uD83D\uDCE6 Invalid storage payload for key ${baseKey}: missing metadata`);\n        return null;\n      }\n\n      // Validate this is actually storage data by checking metadata type\n      if (!metadata.type || metadata.type !== 'storage') {\n        this.debug.log(`\uD83D\uDCE6 Data for key ${baseKey} is not storage data (type: ${metadata.type || 'unknown'}) - ignoring`);\n        return null;\n      }\n\n      // Get space from metadata - this is where space info is stored!\n      const space = metadata.space;\n\n      this.debug.log('\uD83D\uDCE6 Payload components:', {\n        hasValue: value !== undefined,\n        valueType: typeof value,\n        hasMetadata: metadata !== undefined,\n        metadataType: typeof metadata,\n        encrypted,\n        space: space || 'unknown',\n        encryptedBy: encryptedBy?.substring(0, 8) + '...' || 'unknown'\n      });\n\n      // Check space access permissions using space from metadata\n      if (!this.canAccessSpace(space, baseKey, this.mesh.peerId, 'read')) {\n        this.debug.warn(`\uD83D\uDCE6 Access denied for key: ${baseKey} in space: ${space}`);\n        return null;\n      }\n\n      // Check access permissions using space-aware logic\n      if (!this.hasReadAccessWithSpace(keyId, metadata, space)) {\n        this.debug.warn(`\uD83D\uDCE6 Access denied for key: ${baseKey} in space: ${space}`);\n        return null;\n      }\n\n      // Decrypt if necessary\n      let finalValue = value;\n      if (encrypted && this.unsea && this.storageKeypair) {\n        // Only allow decryption if this peer is the owner (encrypted the data)\n        if (encryptedBy && encryptedBy !== this.mesh.peerId) {\n          this.debug.warn(`\uD83D\uDCE6 Cannot decrypt data for key ${baseKey}: encrypted by different peer (${encryptedBy.substring(0, 8)}...), current peer: ${this.mesh.peerId.substring(0, 8)}...`);\n          // For private data encrypted by another peer, deny access\n          if (!metadata.isPublic) {\n            this.debug.warn(`Access denied for key: ${baseKey} - private data encrypted by different peer`);\n            return null;\n          }\n        }\n\n        try {\n          const decryptedValue = await this.unsea.decryptMessageWithMeta(value, this.storageKeypair.epriv);\n          finalValue = JSON.parse(decryptedValue);\n          this.debug.log(`\uD83D\uDD13 Decrypted storage data for key: ${baseKey}`);\n        } catch (error) {\n          this.debug.error(`Failed to decrypt data for key ${baseKey}:`, error);\n          // If this is private data and decryption fails, deny access\n          if (!metadata.isPublic) {\n            return null;\n          }\n          // For public data, if decryption fails, try to use the raw value\n          this.debug.warn(`\uD83D\uDCE6 Using raw value for public key ${baseKey} due to decryption failure`);\n          finalValue = value;\n        }\n      }\n\n      // Update local metadata if we don't have it\n      if (!this.storageMetadata.has(keyId)) {\n        this.storageMetadata.set(keyId, metadata);\n        this.accessControl.set(keyId, {\n          isPublic: metadata.isPublic,\n          owner: metadata.owner,\n          allowedPeers: new Set(metadata.allowedPeers),\n          isImmutable: metadata.isImmutable,\n          space: metadata.space || space\n        });\n\n        // Track space ownership from retrieved metadata using baseKey\n        if (metadata.owner && !this.spaceOwnership.has(baseKey)) {\n          this.spaceOwnership.set(baseKey, metadata.owner);\n        }\n\n        // Update key mapping for future transparent access\n        this.keyToSpaceMapping.set(baseKey, { space, storageKey: baseKey });\n      }\n\n      this.debug.log(`\uD83D\uDCE6 Retrieved ${space} space data for key: ${baseKey}`);\n\n      // Emit retrieval event\n      this.emit('dataRetrieved', {\n        key: baseKey,\n        baseKey,\n        space,\n        keyId,\n        isPublic: metadata.isPublic,\n        owner: metadata.owner\n      });\n\n      return finalValue;\n    } catch (error) {\n      this.debug.error(`Failed to retrieve data for key ${baseKey}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Update existing data (only allowed for owners or if mutable)\n   * @param {string} key - The storage key\n   * @param {any} newValue - The new value\n   * @param {Object} options - Update options\n   * @param {boolean} options.forceCRDTMerge - Force CRDT merge even if not owner\n   * @returns {Promise<boolean>} Success status\n   */\n  async update(key, newValue, options = {}) {\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    // Resolve the key to its actual storage location\n    const resolved = await this.resolveKey(key);\n    const { baseKey, keyId } = resolved;\n    const timestamp = Date.now();\n\n    // Check if we have access to update\n    let accessControl = this.accessControl.get(keyId);\n    let metadata = this.storageMetadata.get(keyId);\n\n    if (!accessControl || !metadata) {\n      // Try to retrieve metadata first\n      const existingData = await this.retrieve(baseKey);\n      if (!existingData) {\n        throw new Error(`Key ${key} does not exist or is not accessible`);\n      }\n\n      // Check if metadata is now available after retrieve\n      const updatedAccessControl = this.accessControl.get(keyId);\n      const updatedMetadata = this.storageMetadata.get(keyId);\n\n      if (!updatedAccessControl || !updatedMetadata) {\n        throw new Error(`Key ${key} metadata could not be loaded - unable to update`);\n      }\n\n      // Update local references and continue with update logic\n      accessControl = updatedAccessControl;\n      metadata = updatedMetadata;\n    }\n\n    const isOwner = accessControl.owner === this.mesh.peerId;\n    const canUpdate = isOwner || (!accessControl.isImmutable) || (metadata.enableCRDT && options.forceCRDTMerge);\n\n    if (!canUpdate) {\n      throw new Error(`Update not allowed for key ${key}: immutable data and not owner`);\n    }\n\n    // Handle CRDT merge if enabled\n    if (metadata.enableCRDT && !isOwner) {\n      return this.applyCRDTUpdate(key, keyId, newValue, options);\n    }\n\n    // Update metadata\n    metadata.updatedAt = timestamp;\n    metadata.version += 1;\n\n    // Prepare storage payload\n    let storagePayload = {\n      value: newValue,\n      metadata,\n      encrypted: false\n    };\n\n    // Encrypt if not public and crypto is available\n    if (!metadata.isPublic && this.config.encryptionEnabled && this.unsea && this.storageKeypair) {\n      try {\n        const serializedValue = JSON.stringify(newValue);\n        const encryptedValue = await this.unsea.encryptMessageWithMeta(serializedValue, this.storageKeypair);\n        storagePayload = {\n          value: encryptedValue,\n          metadata,\n          encrypted: true,\n          encryptedBy: this.mesh.peerId // Track who encrypted it\n        };\n        this.debug.log(`\uD83D\uDCE6 Encrypted updated storage data for key: ${key}`);\n      } catch (error) {\n        this.debug.warn(`Failed to encrypt updated storage data for key ${key}:`, error);\n      }\n    }\n\n    try {\n      // Use WebDHT update to notify all replicas and subscribers - NO PREFIXES\n      await this.webDHT.update(baseKey, storagePayload, {\n        ttl: metadata.ttl\n      });\n\n      // Update local metadata\n      this.storageMetadata.set(keyId, metadata);\n\n      this.debug.log(`\uD83D\uDCE6 Updated ${metadata.isPublic ? 'public' : 'private'} data for key: ${baseKey}`);\n\n      // Emit update event\n      this.emit('dataUpdated', {\n        key: baseKey,\n        keyId,\n        isPublic: metadata.isPublic,\n        version: metadata.version,\n        isOwner\n      });\n\n      return true;\n    } catch (error) {\n      this.debug.error(`Failed to update data for key ${baseKey}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Apply CRDT-based update for collaborative editing\n   * @private\n   */\n  async applyCRDTUpdate(key, keyId, operation, options = {}) {\n    const crdtState = this.crdtStates.get(keyId);\n    const metadata = this.storageMetadata.get(keyId);\n\n    if (!crdtState || !metadata) {\n      throw new Error(`CRDT state not found for key ${key}`);\n    }\n\n    // Increment vector clock for this peer\n    const currentClock = crdtState.vectorClock[this.mesh.peerId] || 0;\n    crdtState.vectorClock[this.mesh.peerId] = currentClock + 1;\n\n    // Add operation to CRDT state\n    const crdtOperation = {\n      peerId: this.mesh.peerId,\n      timestamp: Date.now(),\n      vectorClock: { ...crdtState.vectorClock },\n      operation,\n      type: options.operationType || 'replace'\n    };\n\n    crdtState.operations.push(crdtOperation);\n    crdtState.lastMerged = Date.now();\n\n    // Apply CRDT merge logic (simplified last-write-wins for now)\n    const mergedValue = this.mergeCRDTOperations(crdtState.operations);\n\n    // Update the stored value\n    return this.update(key, mergedValue, { ...options, forceCRDTMerge: false });\n  }\n\n  /**\n   * Simple CRDT merge implementation (can be extended for more sophisticated CRDTs)\n   * @private\n   */\n  mergeCRDTOperations(operations) {\n    // Sort operations by timestamp and apply in order\n    const sortedOps = operations.sort((a, b) => a.timestamp - b.timestamp);\n\n    let result = null;\n    for (const op of sortedOps) {\n      switch (op.type) {\n        case 'replace':\n          result = op.operation;\n          break;\n        case 'merge':\n          if (result && typeof result === 'object' && typeof op.operation === 'object') {\n            result = { ...result, ...op.operation };\n          } else {\n            result = op.operation;\n          }\n          break;\n        default:\n          result = op.operation;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Delete data (only allowed for owners)\n   * @param {string} key - The storage key\n   * @returns {Promise<boolean>} Success status\n   */\n  async delete(key) {\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    // Resolve the key to its actual storage location\n    const resolved = await this.resolveKey(key);\n    const { baseKey, keyId } = resolved;\n\n    const accessControl = this.accessControl.get(keyId);\n\n    if (!accessControl || accessControl.owner !== this.mesh.peerId) {\n      throw new Error(`Delete not allowed for key ${key}: not owner`);\n    }\n\n    try {\n      // Create a tombstone entry to mark as deleted\n      const tombstone = {\n        deleted: true,\n        deletedAt: Date.now(),\n        deletedBy: this.mesh.peerId\n      };\n\n      // Mark as deleted in WebDHT - NO PREFIXES\n      await this.webDHT.update(baseKey, tombstone);\n\n      // Clean up local state\n      this.storageMetadata.delete(keyId);\n      this.ownedKeys.delete(keyId);\n      this.accessControl.delete(keyId);\n      this.crdtStates.delete(keyId);\n\n      // Clean up space ownership tracking and key mapping\n      this.spaceOwnership.delete(baseKey);\n      this.keyToSpaceMapping.delete(baseKey);\n\n      this.debug.log(`\uD83D\uDCE6 Deleted data for key: ${baseKey}`);\n\n      // Emit deletion event\n      this.emit('dataDeleted', { key: baseKey, keyId });\n\n      return true;\n    } catch (error) {\n      this.debug.error(`Failed to delete data for key ${baseKey}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Subscribe to changes for a storage key\n   * @param {string} key - The storage key\n   * @returns {Promise<any>} Current value or null\n   */\n  async subscribe(key) {\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    // Subscribe to the WebDHT key - NO PREFIXES\n    const currentValue = await this.webDHT.subscribe(key);\n\n    this.debug.log(`\uD83D\uDCE6 Subscribed to storage key: ${key}`);\n\n    return currentValue;\n  }\n\n  /**\n   * Unsubscribe from changes for a storage key\n   * @param {string} key - The storage key\n   */\n  async unsubscribe(key) {\n    if (!this.webDHT) {\n      return;\n    }\n\n    // Unsubscribe from the WebDHT key - NO PREFIXES\n    await this.webDHT.unsubscribe(key);\n    this.debug.log(`\uD83D\uDCE6 Unsubscribed from storage key: ${key}`);\n  }\n\n  /**\n   * Check if the current peer has read access to a key\n   * @private\n   */\n  hasReadAccess(keyId, metadata) {\n    const accessControl = this.accessControl.get(keyId);\n\n    if (!accessControl && metadata) {\n      // Create access control from metadata\n      this.accessControl.set(keyId, {\n        isPublic: metadata.isPublic,\n        owner: metadata.owner,\n        allowedPeers: new Set(metadata.allowedPeers || []),\n        isImmutable: metadata.isImmutable\n      });\n      return this.hasReadAccess(keyId, metadata);\n    }\n\n    if (!accessControl) {\n      return false;\n    }\n\n    // Owner always has access\n    if (accessControl.owner === this.mesh.peerId) {\n      return true;\n    }\n\n    // Public data is accessible to everyone\n    if (accessControl.isPublic) {\n      return true;\n    }\n\n    // Check if peer is in allowed list\n    return accessControl.allowedPeers.has(this.mesh.peerId);\n  }\n\n  /**\n   * Grant access to a peer for a private key (only owner can do this)\n   * @param {string} key - The storage key\n   * @param {string} peerId - The peer to grant access to\n   * @returns {Promise<boolean>} Success status\n   */\n  async grantAccess(key, peerId) {\n    // Resolve the key to its actual storage location\n    const resolved = await this.resolveKey(key);\n    const { baseKey, keyId } = resolved;\n\n    const accessControl = this.accessControl.get(keyId);\n    const metadata = this.storageMetadata.get(keyId);\n\n    if (!accessControl || !metadata || accessControl.owner !== this.mesh.peerId) {\n      throw new Error(`Cannot grant access for key ${key}: not owner`);\n    }\n\n    if (accessControl.isPublic) {\n      throw new Error(`Cannot grant access for key ${key}: already public`);\n    }\n\n    // Add peer to allowed list\n    accessControl.allowedPeers.add(peerId);\n    metadata.allowedPeers.push(peerId);\n    metadata.updatedAt = Date.now();\n\n    // Update the stored metadata\n    try {\n      const currentPayload = await this.webDHT.get(baseKey);\n      if (currentPayload) {\n        currentPayload.metadata = metadata;\n        await this.webDHT.update(baseKey, currentPayload);\n      }\n\n      this.debug.log(`\uD83D\uDCE6 Granted access to peer ${peerId.substring(0, 8)}... for key: ${baseKey}`);\n\n      // Emit access granted event\n      this.emit('accessGranted', { key: baseKey, keyId, peerId });\n\n      return true;\n    } catch (error) {\n      // Rollback changes\n      accessControl.allowedPeers.delete(peerId);\n      metadata.allowedPeers = metadata.allowedPeers.filter(p => p !== peerId);\n      throw error;\n    }\n  }\n\n  /**\n   * Revoke access from a peer for a private key (only owner can do this)\n   * @param {string} key - The storage key\n   * @param {string} peerId - The peer to revoke access from\n   * @returns {Promise<boolean>} Success status\n   */\n  async revokeAccess(key, peerId) {\n    // Resolve the key to its actual storage location\n    const resolved = await this.resolveKey(key);\n    const { baseKey, keyId } = resolved;\n\n    const accessControl = this.accessControl.get(keyId);\n    const metadata = this.storageMetadata.get(keyId);\n\n    if (!accessControl || !metadata || accessControl.owner !== this.mesh.peerId) {\n      throw new Error(`Cannot revoke access for key ${key}: not owner`);\n    }\n\n    // Remove peer from allowed list\n    accessControl.allowedPeers.delete(peerId);\n    metadata.allowedPeers = metadata.allowedPeers.filter(p => p !== peerId);\n    metadata.updatedAt = Date.now();\n\n    // Update the stored metadata\n    try {\n      const currentPayload = await this.webDHT.get(baseKey);\n      if (currentPayload) {\n        currentPayload.metadata = metadata;\n        await this.webDHT.update(baseKey, currentPayload);\n      }\n\n      this.debug.log(`\uD83D\uDCE6 Revoked access from peer ${peerId.substring(0, 8)}... for key: ${baseKey}`);\n\n      // Emit access revoked event\n      this.emit('accessRevoked', { key: baseKey, keyId, peerId });\n\n      return true;\n    } catch (error) {\n      // Rollback changes\n      accessControl.allowedPeers.add(peerId);\n      metadata.allowedPeers.push(peerId);\n      throw error;\n    }\n  }\n\n  /**\n   * List all keys owned by this peer\n   * @returns {Array<Object>} Array of owned key metadata\n   */\n  getOwnedKeys() {\n    const ownedKeys = [];\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        ownedKeys.push({\n          key: metadata.key,\n          keyId,\n          isPublic: metadata.isPublic,\n          isImmutable: metadata.isImmutable,\n          enableCRDT: metadata.enableCRDT,\n          createdAt: metadata.createdAt,\n          updatedAt: metadata.updatedAt,\n          version: metadata.version\n        });\n      }\n    }\n    return ownedKeys;\n  }\n\n  /**\n   * Get statistics about the storage manager\n   * @returns {Promise<Object>} Storage statistics\n   */\n  async getStats() {\n    let totalSize = 0;\n    let itemCount = 0;\n\n    // Calculate sizes for owned keys\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        try {\n          const value = await this.retrieve(metadata.key);\n          if (value !== null) {\n            const serializedSize = JSON.stringify(value).length;\n            totalSize += serializedSize;\n            itemCount++;\n          }\n        } catch (error) {\n          // Skip keys that can't be retrieved\n        }\n      }\n    }\n\n    return {\n      enabled: this.enabled,\n      itemCount,\n      totalSize,\n      ownedKeys: this.ownedKeys.size,\n      totalKeys: this.storageMetadata.size,\n      crdtKeys: this.crdtStates.size,\n      encryptionEnabled: this.config.encryptionEnabled && !!this.unsea && !!this.storageKeypair,\n      maxValueSize: this.config.maxValueSize\n    };\n  }\n\n  /**\n   * Clean up expired data and old CRDT operations\n   */\n  cleanup() {\n    const now = Date.now();\n\n    // Clean up expired metadata\n    for (const [keyId, metadata] of this.storageMetadata.entries()) {\n      if (metadata.ttl && (metadata.createdAt + metadata.ttl) < now) {\n        this.storageMetadata.delete(keyId);\n        this.accessControl.delete(keyId);\n        this.ownedKeys.delete(keyId);\n        this.debug.log(`\uD83D\uDCE6 Cleaned up expired metadata for key: ${metadata.key}`);\n      }\n    }\n\n    // Clean up old CRDT operations (keep last 100 operations per key)\n    for (const [keyId, crdtState] of this.crdtStates.entries()) {\n      if (crdtState.operations.length > 100) {\n        crdtState.operations = crdtState.operations.slice(-100);\n        this.debug.log(`\uD83D\uDCE6 Cleaned up old CRDT operations for key: ${keyId.substring(0, 8)}...`);\n      }\n    }\n  }\n\n  /**\n   * Backup all owned data to a serializable format\n   * @returns {Object} Backup data that can be restored later\n   */\n  async backup() {\n    const backupData = {\n      version: '1.0.0',\n      timestamp: Date.now(),\n      peerId: this.mesh.peerId,\n      keys: []\n    };\n\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        try {\n          // Get the current value from storage\n          const value = await this.retrieve(metadata.key);\n          if (value !== null) {\n            backupData.keys.push({\n              key: metadata.key,\n              value,\n              metadata: {\n                isPublic: metadata.isPublic,\n                isImmutable: metadata.isImmutable,\n                enableCRDT: metadata.enableCRDT,\n                allowedPeers: metadata.allowedPeers,\n                ttl: metadata.ttl\n              }\n            });\n          }\n        } catch (error) {\n          this.debug.warn(`Failed to backup key ${metadata.key}:`, error);\n        }\n      }\n    }\n\n    this.debug.log(`\uD83D\uDCE6 Created backup with ${backupData.keys.length} keys`);\n    return backupData;\n  }\n\n  /**\n   * Restore data from a backup\n   * @param {Object} backupData - Backup data created by backup()\n   * @param {Object} options - Restore options\n   * @param {boolean} options.overwrite - Whether to overwrite existing keys (default: false)\n   * @returns {Promise<Object>} Restore results\n   */\n  async restore(backupData, options = {}) {\n    if (!backupData || !backupData.keys || !Array.isArray(backupData.keys)) {\n      throw new Error('Invalid backup data format');\n    }\n\n    const results = {\n      restored: 0,\n      skipped: 0,\n      failed: 0,\n      errors: []\n    };\n\n    for (const keyData of backupData.keys) {\n      try {\n        const { key, value, metadata } = keyData;\n\n        // Check if key already exists\n        const existing = await this.retrieve(key);\n        if (existing !== null && !options.overwrite) {\n          results.skipped++;\n          continue;\n        }\n\n        // Restore the key\n        await this.store(key, value, metadata);\n        results.restored++;\n      } catch (error) {\n        results.failed++;\n        results.errors.push({\n          key: keyData.key,\n          error: error.message\n        });\n        this.debug.warn(`Failed to restore key ${keyData.key}:`, error);\n      }\n    }\n\n    this.debug.log(`\uD83D\uDCE6 Restore complete: ${results.restored} restored, ${results.skipped} skipped, ${results.failed} failed`);\n    return results;\n  }\n\n  /**\n   * List all accessible keys (owned + granted access)\n   * @returns {Array<Object>} Array of accessible key metadata\n   */\n  async listAccessibleKeys() {\n    const accessibleKeys = [];\n\n    // Add owned keys\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        accessibleKeys.push({\n          key: metadata.key,\n          keyId,\n          isPublic: metadata.isPublic,\n          isImmutable: metadata.isImmutable,\n          enableCRDT: metadata.enableCRDT,\n          createdAt: metadata.createdAt,\n          updatedAt: metadata.updatedAt,\n          version: metadata.version,\n          owned: true,\n          accessible: true\n        });\n      }\n    }\n\n    // Add keys we have access to but don't own\n    for (const [keyId] of this.accessControl.entries()) {\n      if (!this.ownedKeys.has(keyId) && this.hasReadAccess(keyId)) {\n        const metadata = this.storageMetadata.get(keyId);\n        if (metadata) {\n          accessibleKeys.push({\n            key: metadata.key,\n            keyId,\n            isPublic: metadata.isPublic,\n            isImmutable: metadata.isImmutable,\n            enableCRDT: metadata.enableCRDT,\n            createdAt: metadata.createdAt,\n            updatedAt: metadata.updatedAt,\n            version: metadata.version,\n            owned: false,\n            accessible: true\n          });\n        }\n      }\n    }\n\n    return accessibleKeys;\n  }\n\n  /**\n   * Bulk store multiple key-value pairs\n   * @param {Array<Object>} items - Array of {key, value, options} objects\n   * @param {Object} globalOptions - Options to apply to all items\n   * @returns {Promise<Object>} Results summary\n   */\n  async bulkStore(items, globalOptions = {}) {\n    const results = {\n      stored: 0,\n      failed: 0,\n      errors: []\n    };\n\n    const storePromises = items.map(async (item) => {\n      try {\n        const options = { ...globalOptions, ...item.options };\n        await this.store(item.key, item.value, options);\n        results.stored++;\n      } catch (error) {\n        results.failed++;\n        results.errors.push({\n          key: item.key,\n          error: error.message\n        });\n      }\n    });\n\n    await Promise.allSettled(storePromises);\n    this.debug.log(`\uD83D\uDCE6 Bulk store complete: ${results.stored} stored, ${results.failed} failed`);\n    return results;\n  }\n\n  /**\n   * Bulk retrieve multiple keys\n   * @param {Array<string>} keys - Array of keys to retrieve\n   * @param {Object} options - Retrieval options\n   * @returns {Promise<Object>} Map of key -> value (null for inaccessible keys)\n   */\n  async bulkRetrieve(keys, options = {}) {\n    const results = {};\n\n    const retrievePromises = keys.map(async (key) => {\n      try {\n        const value = await this.retrieve(key, options);\n        results[key] = value;\n      } catch (error) {\n        this.debug.warn(`Failed to retrieve key ${key}:`, error);\n        results[key] = null;\n      }\n    });\n\n    await Promise.allSettled(retrievePromises);\n    return results;\n  }\n\n  /**\n   * Search for keys by pattern or metadata\n   * @param {Object} criteria - Search criteria\n   * @param {string} criteria.keyPattern - Regex pattern to match keys\n   * @param {boolean} criteria.isPublic - Filter by public/private\n   * @param {boolean} criteria.owned - Filter by ownership\n   * @param {string} criteria.owner - Filter by specific owner\n   * @returns {Array<Object>} Matching keys\n   */\n  searchKeys(criteria = {}) {\n    const matches = [];\n\n    for (const [keyId, metadata] of this.storageMetadata.entries()) {\n      let match = true;\n\n      // Check key pattern\n      if (criteria.keyPattern) {\n        const regex = new RegExp(criteria.keyPattern);\n        if (!regex.test(metadata.key)) {\n          match = false;\n        }\n      }\n\n      // Check public/private\n      if (criteria.isPublic !== undefined && metadata.isPublic !== criteria.isPublic) {\n        match = false;\n      }\n\n      // Check ownership\n      if (criteria.owned !== undefined) {\n        const isOwned = this.ownedKeys.has(keyId);\n        if (isOwned !== criteria.owned) {\n          match = false;\n        }\n      }\n\n      // Check specific owner\n      if (criteria.owner && metadata.owner !== criteria.owner) {\n        match = false;\n      }\n\n      if (match) {\n        matches.push({\n          key: metadata.key,\n          keyId,\n          isPublic: metadata.isPublic,\n          isImmutable: metadata.isImmutable,\n          enableCRDT: metadata.enableCRDT,\n          owner: metadata.owner,\n          createdAt: metadata.createdAt,\n          updatedAt: metadata.updatedAt,\n          version: metadata.version,\n          owned: this.ownedKeys.has(keyId)\n        });\n      }\n    }\n\n    return matches;\n  }\n\n  /**\n   * Watch for changes to multiple keys\n   * @param {Array<string>} keys - Keys to watch\n   * @param {Function} callback - Callback function for changes\n   * @returns {Function} Unwatch function\n   */\n  async watchKeys(keys, callback) {\n    const subscriptions = new Set();\n\n    // Subscribe to each key\n    for (const key of keys) {\n      try {\n        await this.subscribe(key);\n        subscriptions.add(key);\n      } catch (error) {\n        this.debug.warn(`Failed to subscribe to key ${key}:`, error);\n      }\n    }\n\n    // Set up event listener\n    const eventHandler = (event) => {\n      if (keys.includes(event.key)) {\n        callback(event);\n      }\n    };\n\n    this.addEventListener('dataUpdated', eventHandler);\n    this.addEventListener('dataDeleted', eventHandler);\n\n    // Return unwatch function\n    return async () => {\n      // Unsubscribe from keys\n      for (const key of subscriptions) {\n        try {\n          await this.unsubscribe(key);\n        } catch (error) {\n          this.debug.warn(`Failed to unsubscribe from key ${key}:`, error);\n        }\n      }\n\n      // Remove event listeners\n      this.removeEventListener('dataUpdated', eventHandler);\n      this.removeEventListener('dataDeleted', eventHandler);\n    };\n  }\n\n  /**\n   * Get detailed information about a key including access control\n   * @param {string} key - The storage key\n   * @returns {Promise<Object|null>} Key information or null if not found\n   */\n  async getKeyInfo(key) {\n    // Resolve the key to its actual storage location\n    const resolved = await this.resolveKey(key);\n    const { baseKey, keyId } = resolved;\n\n    let metadata = this.storageMetadata.get(keyId);\n\n    // If metadata is not found locally, try to retrieve it from the network\n    if (!metadata) {\n      try {\n        const existingData = await this.retrieve(baseKey);\n        if (existingData !== null) {\n          // Metadata should now be available after retrieve\n          metadata = this.storageMetadata.get(keyId);\n        }\n      } catch (error) {\n        this.debug.warn(`Failed to retrieve metadata for key ${key}:`, error);\n      }\n    }\n\n    if (!metadata) {\n      return null;\n    }\n\n    return {\n      key: metadata.key,\n      keyId,\n      owner: metadata.owner,\n      isPublic: metadata.isPublic,\n      isImmutable: metadata.isImmutable,\n      enableCRDT: metadata.enableCRDT,\n      allowedPeers: metadata.allowedPeers,\n      createdAt: metadata.createdAt,\n      updatedAt: metadata.updatedAt,\n      version: metadata.version,\n      ttl: metadata.ttl,\n      owned: this.ownedKeys.has(keyId),\n      accessible: this.hasReadAccess(keyId, metadata),\n      crdtEnabled: this.crdtStates.has(keyId)\n    };\n  }\n\n  /**\n   * Enable the distributed storage layer\n   * @returns {Promise<void>}\n   */\n  async enable() {\n    if (!this.webDHT) {\n      throw new Error('WebDHT not available - ensure it is enabled in mesh configuration');\n    }\n\n    this.enabled = true;\n    this.debug.log('\uD83D\uDCE6 Distributed storage enabled');\n    this.emit('storageEnabled');\n  }\n\n  /**\n   * Disable the distributed storage layer\n   * @returns {Promise<void>}\n   */\n  async disable() {\n    this.enabled = false;\n    this.debug.log('\uD83D\uDCE6 Distributed storage disabled');\n    this.emit('storageDisabled');\n  }\n\n  /**\n   * Check if the distributed storage layer is enabled\n   * @returns {boolean} Whether storage is enabled\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n\n  /**\n   * Clear all stored data owned by this peer\n   * @returns {Promise<void>}\n   */\n  async clear() {\n    const ownedKeys = Array.from(this.ownedKeys);\n\n    for (const keyId of ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        try {\n          await this.delete(metadata.key);\n        } catch (error) {\n          this.debug.warn(`Failed to delete key ${metadata.key} during clear:`, error);\n        }\n      }\n    }\n\n    // Clear local state\n    this.storageMetadata.clear();\n    this.accessControl.clear();\n    this.crdtStates.clear();\n    this.ownedKeys.clear();\n    this.spaceOwnership.clear();\n    this.keyToSpaceMapping.clear();\n\n    this.debug.log('\uD83D\uDCE6 All stored data cleared');\n    this.emit('storageCleared');\n  }\n\n  /**\n   * List keys with optional prefix filter\n   * @param {string} prefix - Optional prefix to filter keys\n   * @returns {Promise<Array<string>>} Array of matching keys\n   */\n  async listKeys(prefix = '') {\n    const keys = [];\n\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (metadata) {\n        // Check both the stored key and the base key for prefix match\n        const storedKey = metadata.key;\n        const baseKey = metadata.baseKey;\n\n        if (storedKey.startsWith(prefix) || baseKey.startsWith(prefix)) {\n          // Return the base key for user convenience (since they stored with base key)\n          keys.push(baseKey);\n        }\n      }\n    }\n\n    return keys.sort();\n  }\n\n  /**\n   * Bulk delete keys with a given prefix\n   * @param {string} prefix - Prefix of keys to delete\n   * @returns {Promise<number>} Number of keys deleted\n   */\n  async bulkDelete(prefix) {\n    const keysToDelete = await this.listKeys(prefix);\n    let deletedCount = 0;\n\n    for (const key of keysToDelete) {\n      try {\n        await this.delete(key);\n        deletedCount++;\n      } catch (error) {\n        this.debug.warn(`Failed to delete key ${key} during bulk delete:`, error);\n      }\n    }\n\n    return deletedCount;\n  }\n\n  /**\n   * Search for data by key, value, or metadata\n   * @param {string} query - Search query\n   * @param {string} type - Search type: 'key', 'value', or 'metadata'\n   * @returns {Promise<Array<Object>>} Search results\n   */\n  async search(query, type = 'key') {\n    const results = [];\n    const searchRegex = new RegExp(query, 'i'); // Case-insensitive search\n\n    for (const keyId of this.ownedKeys) {\n      const metadata = this.storageMetadata.get(keyId);\n      if (!metadata) continue;\n\n      let match = false;\n\n      if (type === 'key' && searchRegex.test(metadata.key)) {\n        match = true;\n      } else if (type === 'value') {\n        try {\n          const value = await this.retrieve(metadata.key);\n          if (value && searchRegex.test(JSON.stringify(value))) {\n            match = true;\n          }\n        } catch (error) {\n          // Skip values that can't be retrieved\n        }\n      } else if (type === 'metadata') {\n        const metadataStr = JSON.stringify({\n          owner: metadata.owner,\n          isPublic: metadata.isPublic,\n          isImmutable: metadata.isImmutable,\n          enableCRDT: metadata.enableCRDT\n        });\n        if (searchRegex.test(metadataStr)) {\n          match = true;\n        }\n      }\n\n      if (match) {\n        try {\n          const value = await this.retrieve(metadata.key);\n          results.push({\n            key: metadata.key,\n            value,\n            metadata: {\n              owner: metadata.owner,\n              isPublic: metadata.isPublic,\n              isImmutable: metadata.isImmutable,\n              enableCRDT: metadata.enableCRDT,\n              createdAt: metadata.createdAt,\n              updatedAt: metadata.updatedAt\n            }\n          });\n        } catch (error) {\n          // Skip keys that can't be retrieved\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get a lexical interface for GUN-like chaining\n   * @returns {Proxy} Lexical interface\n   */\n  lexical() {\n    return createLexicalInterface(this);\n  }\n\n  /**\n   * Alias for lexical() - more GUN-like naming\n   * @returns {Proxy} Lexical interface\n   */\n  gun() {\n    return this.lexical();\n  }\n}\n", "import { EventEmitter } from './EventEmitter.js';\nimport { SignalingClient } from './SignalingClient.js';\nimport { PeerDiscovery } from './PeerDiscovery.js';\nimport { ConnectionManager } from './ConnectionManager.js';\nimport { SignalingHandler } from './SignalingHandler.js';\nimport { EvictionManager } from './EvictionManager.js';\nimport { MeshOptimizer } from './MeshOptimizer.js';\nimport { CleanupManager } from './CleanupManager.js';\nimport { StorageManager } from './StorageManager.js';\nimport { GossipManager } from './GossipManager.js';\nimport { MediaManager } from './MediaManager.js';\nimport { WebDHT } from './WebDHT.js';\nimport { CryptoManager } from './CryptoManager.js';\nimport { DistributedStorageManager } from './DistributedStorageManager.js';\nimport { environmentDetector } from './EnvironmentDetector.js';\nimport DebugLogger from './DebugLogger.js';\n\nexport class PeerPigeonMesh extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.debug = DebugLogger.create('PeerPigeonMesh');\n\n    // Validate environment capabilities\n    this.environmentReport = this.validateEnvironment(options);\n\n    this.peerId = null;\n    this.providedPeerId = options.peerId || null;\n    this.signalingClient = null;\n    this.peerDiscovery = null;\n\n    // Network namespace configuration\n    this.networkName = options.networkName || 'global';\n    this.allowGlobalFallback = options.allowGlobalFallback !== false; // Default to true\n    this.isInFallbackMode = false;\n    this.originalNetworkName = this.networkName;\n\n    // Configuration - Optional features enabled by default (opt-out)\n    this.maxPeers = options.maxPeers !== undefined ? options.maxPeers : 3;\n    this.minPeers = options.minPeers !== undefined ? options.minPeers : 2;\n    this.autoConnect = options.autoConnect !== false; // Default to true, can be disabled by setting to false\n    this.autoDiscovery = options.autoDiscovery !== false;\n    this.evictionStrategy = options.evictionStrategy !== false;\n    this.xorRouting = options.xorRouting !== false;\n    this.enableWebDHT = options.enableWebDHT !== false; // Default to true, can be disabled by setting to false\n    this.enableCrypto = options.enableCrypto !== false; // Default to true, can be disabled by setting to false\n\n    // State\n    this.connected = false;\n    this.polling = false; // Only WebSocket is supported\n    this.signalingUrl = null;\n    this.discoveredPeers = new Map();\n\n    // Track ongoing key exchange attempts to prevent duplicates across all channels\n    this.ongoingKeyExchanges = new Set();\n    \n    // Track peers for which we've already emitted peerKeyAdded events to prevent UI spam\n    this.emittedPeerKeyEvents = new Set();\n\n    // Initialize managers\n    this.storageManager = new StorageManager(this);\n    this.mediaManager = new MediaManager();\n    this.connectionManager = new ConnectionManager(this);\n    this.evictionManager = new EvictionManager(this, this.connectionManager);\n    this.meshOptimizer = new MeshOptimizer(this, this.connectionManager, this.evictionManager);\n    this.cleanupManager = new CleanupManager(this);\n    this.signalingHandler = new SignalingHandler(this, this.connectionManager);\n    this.gossipManager = new GossipManager(this, this.connectionManager);\n    this.webDHT = null; // Will be initialized after peerId is set\n    this.distributedStorage = null; // Will be initialized after WebDHT is set\n\n    // Initialize crypto manager if enabled\n    this.cryptoManager = null;\n    if (this.enableCrypto) {\n      this.cryptoManager = new CryptoManager();\n    }\n\n    // Set up inter-module event forwarding\n    this.setupManagerEventHandlers();\n\n    // Set up unload handlers\n    this.cleanupManager.setupUnloadHandlers();\n\n    // Load saved signaling URL immediately\n    this.storageManager.loadSignalingUrlFromStorage();\n  }\n\n  setupManagerEventHandlers() {\n    // Forward events from managers to main mesh\n    this.connectionManager.addEventListener('peersUpdated', () => {\n      this.emit('peersUpdated');\n    });\n\n    // Handle peer disconnections\n    this.addEventListener('peerDisconnected', (data) => {\n      this.debug.log(`Peer ${data.peerId.substring(0, 8)}... disconnected: ${data.reason}`);\n      \n      // Clear tracking for this peer to allow fresh key exchange if they reconnect\n      this.emittedPeerKeyEvents.delete(data.peerId);\n      this.ongoingKeyExchanges.delete(data.peerId);\n    });\n\n    // Handle gossip messages and intercept mesh signaling\n    this.gossipManager.addEventListener('messageReceived', (data) => {\n      // Check if this is a mesh signaling message\n      if (data.message && data.message.type === 'mesh_signaling') {\n        this._handleMeshSignalingMessage(data.message, data.from);\n        return; // Don't emit as regular message\n      }\n\n      // Handle crypto key exchange messages\n      if (data.message && (data.message.type === 'key_exchange' || data.message.type === 'key_exchange_response')) {\n        this._handleKeyExchange(data.message, data.from).catch(err => {\n          this.debug.error('Key exchange handling failed:', err);\n        });\n        return; // Don't emit as regular message\n      }\n\n      // Handle DHT messages - route to WebDHT\n      if (data.message && data.message.type === 'dht' && this.webDHT) {\n        this.webDHT.handleMessage(data.message, data.from);\n        return; // Don't emit as regular message\n      }\n\n      // Additional safety filter for message types that should not be emitted to UI\n      // These should already be filtered at the GossipManager level, but this provides defense in depth\n      if (data.content && typeof data.content === 'string') {\n        try {\n          const parsedContent = JSON.parse(data.content);\n          const filteredTypes = ['signaling-relay', 'peer-announce-relay', 'bootstrap-keepalive', 'client-peer-announcement', 'cross-bootstrap-signaling'];\n          if (filteredTypes.includes(parsedContent.type)) {\n            console.debug(`\uD83D\uDD07 MESH FILTER: Blocked filtered message type '${parsedContent.type}' from UI emission`);\n            return; // Don't emit to UI\n          }\n        } catch (e) {\n          // Not JSON, continue normally\n        }\n      }\n\n      this.emit('messageReceived', data);\n    });\n\n    // CRITICAL: Handle remote stream announcements from gossip\n    // When we hear about a stream from an indirectly connected peer,\n    // establish a direct connection to receive the media\n    this.addEventListener('remoteStreamAnnouncement', (data) => {\n      this._handleRemoteStreamAnnouncement(data);\n    });\n\n    // Forward media events\n    this.mediaManager.addEventListener('localStreamStarted', (data) => {\n      this.emit('localStreamStarted', data);\n      // Gossip stream start announcement to all peers in the mesh\n      this.gossipManager.broadcastMessage({\n        event: 'streamStarted',\n        peerId: this.peerId,\n        hasVideo: data.hasVideo,\n        hasAudio: data.hasAudio,\n        timestamp: Date.now()\n      }, 'mediaEvent').catch(err => {\n        this.debug.error('Failed to broadcast stream started event:', err);\n      });\n    });\n\n    this.mediaManager.addEventListener('localStreamStopped', () => {\n      this.emit('localStreamStopped');\n      // Gossip stream stop announcement to all peers in the mesh\n      this.gossipManager.broadcastMessage({\n        event: 'streamStopped',\n        peerId: this.peerId,\n        timestamp: Date.now()\n      }, 'mediaEvent').catch(err => {\n        this.debug.error('Failed to broadcast stream stopped event:', err);\n      });\n    });\n\n    this.mediaManager.addEventListener('error', (data) => {\n      this.emit('mediaError', data);\n    });\n\n    // Forward remote stream events from ConnectionManager\n    this.connectionManager.addEventListener('remoteStream', (data) => {\n      this.emit('remoteStream', data);\n    });\n\n    // Handle crypto events if crypto is enabled\n    if (this.cryptoManager) {\n      this.cryptoManager.addEventListener('cryptoReady', (data) => {\n        this.emit('cryptoReady', data);\n      });\n\n      this.cryptoManager.addEventListener('cryptoError', (data) => {\n        this.emit('cryptoError', data);\n      });\n\n      this.cryptoManager.addEventListener('peerKeyAdded', (data) => {\n        // Only emit peerKeyAdded event once per peer to prevent UI spam from duplicate key exchanges\n        if (!this.emittedPeerKeyEvents.has(data.peerId)) {\n          this.emittedPeerKeyEvents.add(data.peerId);\n          this.emit('peerKeyAdded', data);\n        }\n      });\n\n      this.cryptoManager.addEventListener('userAuthenticated', (data) => {\n        this.emit('userAuthenticated', data);\n      });\n    }\n  }\n\n  validateEnvironment(options = {}) {\n    const report = environmentDetector.getEnvironmentReport();\n    const warnings = [];\n    const errors = [];\n\n    // Log environment info\n    this.debug.log('\uD83D\uDD0D PeerPigeon Environment Detection:', {\n      runtime: `${report.runtime.isBrowser ? 'Browser' : ''}${report.runtime.isNodeJS ? 'Node.js' : ''}${report.runtime.isWorker ? 'Worker' : ''}${report.runtime.isNativeScript ? 'NativeScript' : ''}`,\n      webrtc: report.capabilities.webrtc,\n      websocket: report.capabilities.webSocket,\n      browser: report.browser?.name || 'N/A',\n      nativescript: report.nativescript?.platform || 'N/A'\n    });\n\n    // Check WebRTC support (required for peer connections)\n    if (!report.capabilities.webrtc) {\n      if (report.runtime.isBrowser) {\n        errors.push('WebRTC is not supported in this browser. PeerPigeon requires WebRTC for peer-to-peer connections.');\n      } else if (report.runtime.isNodeJS) {\n        warnings.push('WebRTC support not detected in Node.js environment. PeerPigeon includes @koush/wrtc for automatic WebRTC support - ensure it is properly installed.');\n      } else if (report.runtime.isNativeScript) {\n        warnings.push('WebRTC support not detected in NativeScript environment. Consider using a native WebRTC plugin.');\n      }\n    }\n\n    // Check WebSocket support (required for signaling)\n    if (!report.capabilities.webSocket) {\n      if (report.runtime.isBrowser) {\n        errors.push('WebSocket is not supported in this browser. PeerPigeon requires WebSocket for signaling.');\n      } else if (report.runtime.isNodeJS) {\n        warnings.push('WebSocket support not detected. Install the \"ws\" package for WebSocket support in Node.js.');\n      } else if (report.runtime.isNativeScript) {\n        warnings.push('WebSocket support not detected. Consider using a native WebSocket plugin or polyfill.');\n      }\n    }\n\n    // Check storage capabilities for persistent peer ID\n    if ((report.runtime.isBrowser || report.runtime.isNativeScript) && !report.capabilities.localStorage && !report.capabilities.sessionStorage) {\n      warnings.push('No storage mechanism available. Peer ID will not persist between sessions.');\n    }\n\n    // Check crypto support for secure peer ID generation\n    if (!report.capabilities.randomValues) {\n      warnings.push('Crypto random values not available. Peer ID generation may be less secure.');\n    }\n\n    // Network connectivity checks\n    if (report.runtime.isBrowser && !report.network.online) {\n      warnings.push('Browser reports offline status. Mesh networking may not function properly.');\n    }\n\n    // Environment-specific warnings\n    if (report.runtime.isBrowser) {\n      // Browser-specific checks\n      const browser = report.browser;\n      if (browser && browser.name === 'ie') {\n        errors.push('Internet Explorer is not supported. Please use a modern browser.');\n      }\n\n      // Check for secure context in production\n      if (typeof location !== 'undefined' && location.protocol === 'http:' && location.hostname !== 'localhost') {\n        warnings.push('Running on HTTP in production. Some WebRTC features may be limited. Consider using HTTPS.');\n      }\n    }\n\n    if (report.runtime.isNativeScript) {\n      // NativeScript-specific checks\n      const nativeScript = report.nativescript;\n      if (nativeScript && nativeScript.platform) {\n        this.debug.log(`\uD83D\uDD2E Running on NativeScript ${nativeScript.platform} platform`);\n\n        // Platform-specific considerations\n        if (nativeScript.platform === 'android') {\n          warnings.push('Android WebRTC may require network permissions and appropriate security configurations.');\n        } else if (nativeScript.platform === 'ios' || nativeScript.platform === 'visionos') {\n          warnings.push('iOS/visionOS WebRTC may require camera/microphone permissions for media features.');\n        }\n      }\n    }\n\n    // Handle errors and warnings\n    if (errors.length > 0) {\n      const errorMessage = 'PeerPigeon environment validation failed:\\n' + errors.join('\\n');\n      this.debug.error(errorMessage);\n      if (!options.ignoreEnvironmentErrors) {\n        throw new Error(errorMessage);\n      }\n    }\n\n    if (warnings.length > 0) {\n      this.debug.warn('PeerPigeon environment warnings:\\n' + warnings.join('\\n'));\n    }\n\n    // Store capabilities for runtime checks\n    this.capabilities = report.capabilities;\n    this.runtimeInfo = report.runtime;\n\n    return report;\n  }\n\n  async init() {\n    try {\n      // Initialize WebRTC polyfill for Node.js if needed\n      if (this.runtimeInfo?.isNodeJS) {\n        try {\n          const webrtcInitialized = await environmentDetector.initWebRTCAsync();\n          if (webrtcInitialized) {\n            this.debug.log('\uD83C\uDF10 WebRTC polyfill initialized successfully for Node.js environment');\n          }\n        } catch (error) {\n          this.debug.warn('WebRTC polyfill initialization failed:', error.message);\n        }\n      }\n\n      // Use provided peer ID if valid, otherwise generate one\n      if (this.providedPeerId) {\n        if (PeerPigeonMesh.validatePeerId(this.providedPeerId)) {\n          this.peerId = this.providedPeerId;\n          this.debug.log(`Using provided peer ID: ${this.peerId}`);\n        } else {\n          this.debug.warn(`Invalid peer ID provided: ${this.providedPeerId}. Must be 40-character SHA-1 hex string. Generating new one.`);\n          this.peerId = await PeerPigeonMesh.generatePeerId();\n        }\n      } else {\n        this.peerId = await PeerPigeonMesh.generatePeerId();\n      }\n\n      // Initialize WebDHT now that we have a peerId (if enabled)\n      if (this.enableWebDHT) {\n        // Initialize WebDHT - Low-level distributed hash table for raw key-value storage\n        this.webDHT = new WebDHT(this);\n        this.debug.log('WebDHT (low-level DHT) initialized and enabled');\n\n        // Setup WebDHT event handlers now that it's initialized\n        this.setupWebDHTEventHandlers();\n\n        // Initialize DistributedStorageManager - High-level storage with encryption/access control\n        // Note: This uses WebDHT as its storage backend but provides a separate high-level API\n        this.distributedStorage = new DistributedStorageManager(this);\n        this.debug.log('DistributedStorageManager (high-level encrypted storage) initialized');\n\n        // Setup DistributedStorageManager event handlers\n        this.setupDistributedStorageEventHandlers();\n      } else {\n        this.debug.log('WebDHT disabled by configuration');\n      }\n\n      // Load signaling URL from query params or storage\n      const savedUrl = this.storageManager.loadSignalingUrlFromQuery();\n      if (savedUrl) {\n        this.signalingUrl = savedUrl;\n      }\n\n      this.signalingClient = new SignalingClient(this.peerId, this.maxPeers, this);\n      this.setupSignalingHandlers();\n\n      this.peerDiscovery = new PeerDiscovery(this.peerId, {\n        autoDiscovery: this.autoDiscovery,\n        evictionStrategy: this.evictionStrategy,\n        xorRouting: this.xorRouting,\n        minPeers: this.minPeers,\n        maxPeers: this.maxPeers\n      });\n      this.setupDiscoveryHandlers();\n\n      // Initialize crypto manager if enabled\n      if (this.cryptoManager) {\n        try {\n          this.debug.log('\uD83D\uDD10 Initializing crypto manager with automatic key persistence...');\n          \n          // Add timeout to prevent hanging\n          const cryptoInitPromise = this.cryptoManager.initWithPeerId(this.peerId);\n          const timeoutPromise = new Promise((resolve, reject) => {\n            setTimeout(() => reject(new Error('Crypto initialization timeout')), 10000);\n          });\n          \n          await Promise.race([cryptoInitPromise, timeoutPromise]);\n          this.debug.log('\uD83D\uDD10 Crypto manager initialized successfully with persistent keys');\n        } catch (error) {\n          this.debug.error('Failed to initialize crypto manager:', error);\n          // Continue without crypto - don't fail the entire init\n          this.enableCrypto = false;\n          this.cryptoManager = null;\n        }\n      }\n\n      this.emit('statusChanged', { type: 'initialized', peerId: this.peerId });\n    } catch (error) {\n      this.debug.error('Failed to initialize mesh:', error);\n      this.emit('statusChanged', { type: 'error', message: `Initialization failed: ${error.message}` });\n      throw error;\n    }\n  }\n\n  setupSignalingHandlers() {\n    this.signalingClient.addEventListener('connected', () => {\n      this.connected = true;\n      this.polling = false;\n      this.peerDiscovery.start();\n\n      this.emit('statusChanged', { type: 'connected' });\n    });\n\n    this.signalingClient.addEventListener('disconnected', () => {\n      this.connected = false;\n      this.polling = false;\n      this.peerDiscovery.stop();\n      this.connectionManager.disconnectAllPeers();\n      this.emit('statusChanged', { type: 'disconnected' });\n    });\n\n    this.signalingClient.addEventListener('signalingMessage', (message) => {\n      this.signalingHandler.handleSignalingMessage(message);\n    });\n\n    this.signalingClient.addEventListener('statusChanged', (data) => {\n      this.emit('statusChanged', data);\n    });\n  }\n\n  setupDiscoveryHandlers() {\n    this.peerDiscovery.addEventListener('peerDiscovered', (data) => {\n      this.emit('peerDiscovered', data);\n      \n      // Check if we should return from global fallback to original network\n      if (this.isInFallbackMode && this.originalNetworkName !== 'global') {\n        this._tryReturnToOriginalNetwork();\n      }\n    });\n\n    this.peerDiscovery.addEventListener('connectToPeer', (data) => {\n      this.debug.log(`PeerDiscovery requested connection to: ${data.peerId.substring(0, 8)}...`);\n      this.connectionManager.connectToPeer(data.peerId);\n    });\n\n    this.peerDiscovery.addEventListener('evictPeer', (data) => {\n      this.evictionManager.evictPeer(data.peerId, data.reason);\n    });\n\n    this.peerDiscovery.addEventListener('optimizeMesh', () => {\n      this.peerDiscovery.optimizeMeshConnections(this.connectionManager.peers);\n    });\n\n    this.peerDiscovery.addEventListener('optimizeConnections', (data) => {\n      this.meshOptimizer.handleOptimizeConnections(data.unconnectedPeers);\n    });\n\n    // Monitor network health and activate fallback if needed\n    this.addEventListener('peersUpdated', () => {\n      this._checkNetworkHealth();\n    });\n\n    this.peerDiscovery.addEventListener('peersUpdated', (data) => {\n      this.emit('statusChanged', { type: 'info', message: `Cleaned up ${data.removedCount} stale peer(s)` });\n      this.emit('peersUpdated');\n    });\n\n    // Handle capacity checks\n    this.peerDiscovery.addEventListener('checkCapacity', () => {\n      const canAccept = this.connectionManager.canAcceptMorePeers();\n      const currentConnectionCount = this.connectionManager.getConnectedPeerCount();\n      this.debug.log(`Capacity check: ${canAccept} (${currentConnectionCount}/${this.maxPeers} peers)`);\n      this.peerDiscovery._canAcceptMorePeers = canAccept;\n      this.peerDiscovery._currentConnectionCount = currentConnectionCount;\n    });\n\n    // Handle eviction checks\n    this.peerDiscovery.addEventListener('checkEviction', (data) => {\n      const evictPeerId = this.evictionManager.shouldEvictForPeer(data.newPeerId);\n      this.debug.log(`Eviction check for ${data.newPeerId.substring(0, 8)}...: ${evictPeerId ? evictPeerId.substring(0, 8) + '...' : 'none'}`);\n      this.peerDiscovery._shouldEvictForPeer = evictPeerId;\n    });\n  }\n\n  async connect(signalingUrl) {\n    this.signalingUrl = signalingUrl;\n    this.storageManager.saveSignalingUrlToStorage(signalingUrl);\n    this.polling = false; // Only WebSocket is supported\n    // Don't emit connecting here - SignalingClient will handle it with more detail\n\n    try {\n      await this.signalingClient.connect(signalingUrl);\n    } catch (error) {\n      this.debug.error('Connection failed:', error);\n      this.polling = false;\n      this.emit('statusChanged', { type: 'error', message: `Connection failed: ${error.message}` });\n      throw error;\n    }\n  }\n\n  disconnect() {\n    if (this.connected) {\n      this.cleanupManager.sendGoodbyeMessage();\n    }\n\n    this.connected = false;\n    this.polling = false;\n\n    if (this.signalingClient) {\n      this.signalingClient.disconnect();\n    }\n\n    if (this.peerDiscovery) {\n      this.peerDiscovery.stop();\n    }\n\n    this.connectionManager.disconnectAllPeers();\n    this.connectionManager.cleanup();\n\n    // WebDHT persists in the mesh - no cleanup needed on disconnect\n    this.evictionManager.cleanup();\n    this.cleanupManager.cleanup();\n    this.gossipManager.cleanup();\n\n    this.emit('statusChanged', { type: 'disconnected' });\n  }\n\n  // Configuration methods\n  setMaxPeers(maxPeers) {\n    this.maxPeers = Math.max(1, Math.min(50, maxPeers));\n\n    if (this.connectionManager.peers.size > this.maxPeers) {\n      this.evictionManager.disconnectExcessPeers();\n    }\n\n    return this.maxPeers;\n  }\n\n  setMinPeers(minPeers) {\n    this.minPeers = Math.max(0, Math.min(49, minPeers));\n\n    // If we're below minimum and auto-discovery is enabled, trigger optimization\n    if (this.connectionManager.getConnectedPeerCount() < this.minPeers && this.autoDiscovery && this.connected) {\n      this.peerDiscovery.optimizeMeshConnections(this.connectionManager.peers);\n    }\n\n    return this.minPeers;\n  }\n\n  setXorRouting(enabled) {\n    this.xorRouting = enabled;\n    this.emit('statusChanged', { type: 'setting', setting: 'xorRouting', value: enabled });\n\n    // If XOR routing is disabled, we might need to adjust our connection strategy\n    if (!enabled && this.evictionStrategy) {\n      this.emit('statusChanged', { type: 'warning', message: 'XOR routing disabled - eviction strategy effectiveness reduced' });\n    }\n  }\n\n  setAutoDiscovery(enabled) {\n    this.autoDiscovery = enabled;\n    this.emit('statusChanged', { type: 'setting', setting: 'autoDiscovery', value: enabled });\n  }\n\n  setAutoConnect(enabled) {\n    this.autoConnect = enabled;\n    this.emit('statusChanged', { type: 'setting', setting: 'autoConnect', value: enabled });\n  }\n\n  setEvictionStrategy(enabled) {\n    this.evictionStrategy = enabled;\n    this.emit('statusChanged', { type: 'setting', setting: 'evictionStrategy', value: enabled });\n  }\n\n  // Network namespace management methods\n  setNetworkName(networkName) {\n    if (this.connected) {\n      throw new Error('Cannot change network name while connected. Disconnect first.');\n    }\n    \n    this.networkName = networkName || 'global';\n    this.originalNetworkName = this.networkName;\n    this.isInFallbackMode = false;\n    \n    this.emit('statusChanged', { \n      type: 'setting', \n      setting: 'networkName', \n      value: this.networkName \n    });\n    \n    return this.networkName;\n  }\n\n  getNetworkName() {\n    return this.networkName;\n  }\n\n  getOriginalNetworkName() {\n    return this.originalNetworkName;\n  }\n\n  isUsingGlobalFallback() {\n    return this.isInFallbackMode;\n  }\n\n  setAllowGlobalFallback(allow) {\n    this.allowGlobalFallback = allow;\n    this.emit('statusChanged', { \n      type: 'setting', \n      setting: 'allowGlobalFallback', \n      value: allow \n    });\n    \n    // If we're currently in fallback mode and fallback is disabled, try to return to original network\n    if (!allow && this.isInFallbackMode) {\n      this._tryReturnToOriginalNetwork();\n    }\n    \n    return this.allowGlobalFallback;\n  }\n\n  async _tryReturnToOriginalNetwork() {\n    if (!this.isInFallbackMode || this.originalNetworkName === 'global') {\n      return;\n    }\n\n    // Check if there are now peers in the original network\n    const originalNetworkPeerCount = await this._getNetworkPeerCount(this.originalNetworkName);\n    \n    if (originalNetworkPeerCount > 0) {\n      this.debug.log(`Returning from global fallback to original network: ${this.originalNetworkName}`);\n      this.networkName = this.originalNetworkName;\n      this.isInFallbackMode = false;\n      \n      this.emit('statusChanged', { \n        type: 'network', \n        message: `Returned to network: ${this.networkName}`,\n        networkName: this.networkName,\n        fallbackMode: false\n      });\n      \n      // Trigger reconnection to rebuild mesh in correct network\n      if (this.connected) {\n        this.disconnect();\n        setTimeout(() => {\n          if (this.signalingUrl) {\n            this.connect(this.signalingUrl);\n          }\n        }, 1000);\n      }\n    }\n  }\n\n  async _activateGlobalFallback() {\n    if (this.originalNetworkName === 'global' || this.isInFallbackMode || !this.allowGlobalFallback) {\n      return false;\n    }\n\n    this.debug.log(`Activating global fallback from network: ${this.originalNetworkName}`);\n    this.networkName = 'global';\n    this.isInFallbackMode = true;\n    \n    this.emit('statusChanged', { \n      type: 'network', \n      message: `Fallback to global network from: ${this.originalNetworkName}`,\n      networkName: this.networkName,\n      originalNetwork: this.originalNetworkName,\n      fallbackMode: true\n    });\n    \n    return true;\n  }\n\n  async _getNetworkPeerCount(networkName) {\n    // This would need to be implemented with signaling server support\n    // For now, return 0 to indicate we can't determine peer count\n    return 0;\n  }\n\n  _checkNetworkHealth() {\n    // TEMPORARILY DISABLED - aggressive fallback for debugging\n    return;\n    \n    if (this.originalNetworkName === 'global' || !this.allowGlobalFallback) {\n      return;\n    }\n\n    const connectedCount = this.connectionManager.getConnectedPeerCount();\n    const discoveredCount = this.discoveredPeers.size;\n\n    // If we're in the original network but have insufficient peers, activate fallback\n    if (!this.isInFallbackMode && this.networkName === this.originalNetworkName) {\n      if (connectedCount === 0 && discoveredCount === 0) {\n        this.debug.log(`Network ${this.originalNetworkName} appears empty, activating global fallback`);\n        this._activateGlobalFallback().then(activated => {\n          if (activated && this.connected && this.signalingUrl) {\n            // Reconnect to signaling server with global network\n            this.disconnect();\n            setTimeout(() => {\n              this.connect(this.signalingUrl);\n            }, 1000);\n          }\n        });\n      }\n    }\n  }\n\n  // Status and information methods\n  getStatus() {\n    const connectedCount = this.connectionManager.getConnectedPeerCount();\n    const totalCount = this.connectionManager.peers.size;\n    return {\n      peerId: this.peerId,\n      connected: this.connected,\n      polling: false, // Only WebSocket is supported\n      signalingUrl: this.signalingUrl,\n      networkName: this.networkName,\n      originalNetworkName: this.originalNetworkName,\n      isInFallbackMode: this.isInFallbackMode,\n      allowGlobalFallback: this.allowGlobalFallback,\n      connectedCount,\n      totalPeerCount: totalCount, // Include total count for debugging\n      minPeers: this.minPeers,\n      maxPeers: this.maxPeers,\n      discoveredCount: this.discoveredPeers.size,\n      autoConnect: this.autoConnect,\n      autoDiscovery: this.autoDiscovery,\n      evictionStrategy: this.evictionStrategy,\n      xorRouting: this.xorRouting\n    };\n  }\n\n  getPeers() {\n    return this.connectionManager.getPeers();\n  }\n\n  getPeerStatus(peerConnection) {\n    return peerConnection.getStatus();\n  }\n\n  getDiscoveredPeers() {\n    if (!this.peerDiscovery) {\n      return [];\n    }\n    const discoveredPeers = this.peerDiscovery.getDiscoveredPeers();\n\n    // Enrich with connection state from the actual peer connections\n    return discoveredPeers.map(peer => {\n      const peerConnection = this.connectionManager.getPeer(peer.peerId);\n      let isConnected = false;\n\n      if (peerConnection) {\n        const status = peerConnection.getStatus();\n        // Consider peer connected if WebRTC connection is established\n        isConnected = status === 'connected' || status === 'channel-connecting';\n      }\n\n      return {\n        ...peer,\n        isConnected\n      };\n    });\n  }\n\n  /**\n     * Send a direct message to a specific peer via gossip routing\n     * @param {string} targetPeerId - The destination peer's ID\n     * @param {string|object} content - The message content\n     * @returns {string|null} The message ID if sent, or null on error\n     */\n  async sendDirectMessage(targetPeerId, content) {\n    if (!targetPeerId || typeof targetPeerId !== 'string') {\n      this.debug.error('Invalid targetPeerId for direct message');\n      return null;\n    }\n    return await this.gossipManager.sendDirectMessage(targetPeerId, content);\n  }\n\n  /**\n     * Send a broadcast (gossip) message to all peers\n     * @param {string|object} content - The message content\n     * @returns {string|null} The message ID if sent, or null on error\n     */\n  async sendMessage(content) {\n    // For clarity, this is a broadcast/gossip message\n    return await this.gossipManager.broadcastMessage(content, 'chat');\n  }\n\n  // Helper methods for backward compatibility\n  canAcceptMorePeers() {\n    return this.connectionManager.canAcceptMorePeers();\n  }\n\n  getConnectedPeerCount() {\n    return this.connectionManager.getConnectedPeerCount();\n  }\n\n  // Expose peers Map for backward compatibility\n  get peers() {\n    return this.connectionManager.peers;\n  }\n\n  // Get peer status method for UI compatibility\n  getPeerUIStatus(peer) {\n    if (!peer) return 'unknown';\n    return peer.getStatus ? peer.getStatus() : 'unknown';\n  }\n\n  // Get connected peer IDs as array for UI compatibility\n  getConnectedPeerIds() {\n    return this.connectionManager.getPeers()\n      .filter(peer => peer.status === 'connected')\n      .map(peer => peer.peerId);\n  }\n\n  // Advanced methods\n  async cleanupStaleSignalingData() {\n    return this.cleanupManager.cleanupStaleSignalingData();\n  }\n\n  forceConnectToAllPeers() {\n    return this.meshOptimizer.forceConnectToAllPeers();\n  }\n\n  // Debugging and maintenance methods\n  forceCleanupInvalidPeers() {\n    this.debug.log('Force cleaning up peers not in connected state...');\n    return this.connectionManager.forceCleanupInvalidPeers();\n  }\n\n  cleanupStalePeers() {\n    this.debug.log('Manually cleaning up stale peers...');\n    return this.connectionManager.cleanupStalePeers();\n  }\n\n  getPeerStateSummary() {\n    return this.connectionManager.getPeerStateSummary();\n  }\n\n  debugConnectivity() {\n    return this.meshOptimizer.debugConnectivity();\n  }\n\n  // Media management methods\n  async initializeMedia() {\n    return await this.mediaManager.init();\n  }\n\n  async startMedia(options = {}) {\n    const { video = false, audio = false, deviceIds = {} } = options;\n\n    try {\n      const stream = await this.mediaManager.startLocalStream({ video, audio, deviceIds });\n\n      // Update all existing peer connections with the new stream - but only if crypto allows it\n      const connections = this.connectionManager.getAllConnections();\n      this.debug.log(`\uD83D\uDCE1 MEDIA START: Applying stream to ${connections.length} connections (with crypto verification)`);\n\n      for (const connection of connections) {\n        // SECURITY: Only share media if crypto keys are established or crypto is disabled\n        let shouldShareMedia = true;\n        \n        if (this.enableCrypto && this.cryptoManager) {\n          const hasKeys = this.cryptoManager.peerKeys && this.cryptoManager.peerKeys.has(connection.peerId);\n          if (!hasKeys) {\n            this.debug.log(`\uFFFD MEDIA START: Skipping media share with ${connection.peerId.substring(0, 8)}... - no crypto keys established`);\n            shouldShareMedia = false;\n          } else {\n            this.debug.log(`\uD83D\uDD12 MEDIA START: Crypto keys verified for ${connection.peerId.substring(0, 8)}... - sharing media`);\n          }\n        }\n        \n        if (shouldShareMedia) {\n          this.debug.log(`\uD83D\uDCE1 MEDIA START: Setting stream for peer ${connection.peerId.substring(0, 8)}...`);\n          await connection.setLocalStream(stream);\n          this.debug.log(`\u2705 MEDIA START: Stream applied to ${connection.peerId.substring(0, 8)}...`);\n\n          // REMOVED: No forced immediate renegotiation - let natural renegotiation handle it\n          // This prevents cascade renegotiation conflicts when multiple peers join\n        } // End of shouldShareMedia block\n      } // End of connections loop\n\n      return stream;\n    } catch (error) {\n      this.debug.error('Failed to start media:', error);\n      throw error;\n    }\n  }\n\n  async stopMedia() {\n    this.mediaManager.stopLocalStream();\n\n    // Update all existing peer connections to remove the stream\n    const connections = this.connectionManager.getAllConnections();\n    for (const connection of connections) {\n      await connection.setLocalStream(null);\n    }\n  }\n\n  toggleVideo() {\n    return this.mediaManager.toggleVideo();\n  }\n\n  toggleAudio() {\n    return this.mediaManager.toggleAudio();\n  }\n\n  getMediaState() {\n    return this.mediaManager.getMediaState();\n  }\n\n  getMediaDevices() {\n    return this.mediaManager.devices;\n  }\n\n  async enumerateMediaDevices() {\n    return await this.mediaManager.enumerateDevices();\n  }\n\n  getLocalStream() {\n    return this.mediaManager.localStream;\n  }\n\n  // Get remote streams from all connected peers\n  getRemoteStreams() {\n    const streams = new Map();\n    const connections = this.connectionManager.getAllConnections();\n\n    for (const connection of connections) {\n      const remoteStream = connection.getRemoteStream();\n      if (remoteStream) {\n        streams.set(connection.peerId, remoteStream);\n      }\n    }\n\n    return streams;\n  }\n\n  // === SELECTIVE STREAMING CONTROL METHODS ===\n\n  /**\n   * Enable streaming to specific peers only (1:1 or 1:many patterns)\n   * @param {string|string[]} peerIds - Single peer ID or array of peer IDs to stream to\n   * @param {Object} options - Stream options (video, audio, deviceIds)\n   * @returns {Promise<MediaStream>} The local stream\n   */\n  async startSelectiveStream(peerIds, options = {}) {\n    // Normalize to array\n    const targetPeerIds = Array.isArray(peerIds) ? peerIds : [peerIds];\n    \n    this.debug.log(`\uD83C\uDFAF SELECTIVE STREAM: Starting stream to ${targetPeerIds.length} specific peer(s)`);\n    \n    // Start local media stream\n    const stream = await this.mediaManager.startLocalStream(options);\n    \n    // Get all connections\n    const connections = this.connectionManager.getAllConnections();\n    \n    // Apply stream only to target peers\n    for (const connection of connections) {\n      if (targetPeerIds.includes(connection.peerId)) {\n        this.debug.log(`\uD83D\uDCE1 SELECTIVE STREAM: Enabling stream for target peer ${connection.peerId.substring(0, 8)}...`);\n        \n        // Enable remote stream reception on target peer\n        if (connection.allowRemoteStreamEmission) {\n          connection.allowRemoteStreamEmission();\n        }\n        \n        // Set local stream for this connection\n        await connection.setLocalStream(stream);\n      } else {\n        this.debug.log(`\uD83D\uDEAB SELECTIVE STREAM: Blocking stream for non-target peer ${connection.peerId.substring(0, 8)}...`);\n        \n        // Ensure no stream is set for non-target peers\n        await connection.setLocalStream(null);\n        \n        // Block remote stream reception from non-target peers if desired\n        if (connection.blockRemoteStreamEmission) {\n          connection.blockRemoteStreamEmission();\n        }\n      }\n    }\n    \n    // Emit event for UI updates\n    this.emit('selectiveStreamStarted', {\n      targetPeerIds,\n      stream,\n      streamType: targetPeerIds.length === 1 ? '1:1' : '1:many'\n    });\n    \n    return stream;\n  }\n\n  /**\n   * Stop selective streaming and return to broadcast mode or stop entirely\n   * @param {boolean} returnToBroadcast - If true, switch to broadcast mode; if false, stop streaming entirely\n   */\n  async stopSelectiveStream(returnToBroadcast = false) {\n    this.debug.log(`\uD83D\uDED1 SELECTIVE STREAM: Stopping selective streaming (broadcast mode: ${returnToBroadcast})`);\n    \n    if (returnToBroadcast) {\n      // Switch to broadcast mode - enable streams for all connected peers\n      await this.enableStreamingForAllPeers();\n    } else {\n      // Stop streaming entirely\n      await this.stopMedia();\n    }\n    \n    this.emit('selectiveStreamStopped', { returnToBroadcast });\n  }\n\n  /**\n   * Enable streaming for all connected peers (broadcast mode)\n   */\n  async enableStreamingForAllPeers() {\n    this.debug.log('\uD83D\uDCE1 BROADCAST STREAM: Enabling streaming for ALL connected peers');\n    \n    const connections = this.connectionManager.getAllConnections();\n    const currentStream = this.mediaManager.localStream;\n    \n    for (const connection of connections) {\n      this.debug.log(`\uD83D\uDCE1 BROADCAST STREAM: Enabling stream for peer ${connection.peerId.substring(0, 8)}...`);\n      \n      // Enable remote stream reception\n      if (connection.allowRemoteStreamEmission) {\n        connection.allowRemoteStreamEmission();\n      }\n      \n      // Set local stream if we have one\n      if (currentStream) {\n        await connection.setLocalStream(currentStream);\n      }\n    }\n    \n    this.emit('broadcastStreamEnabled');\n  }\n\n  /**\n   * Block streaming to specific peers while maintaining streams to others\n   * @param {string|string[]} peerIds - Peer ID(s) to block streaming to\n   */\n  async blockStreamingToPeers(peerIds) {\n    const targetPeerIds = Array.isArray(peerIds) ? peerIds : [peerIds];\n    \n    this.debug.log(`\uD83D\uDEAB BLOCK STREAM: Blocking streaming to ${targetPeerIds.length} peer(s)`);\n    \n    for (const peerId of targetPeerIds) {\n      const connection = this.connectionManager.getPeer(peerId);\n      if (connection) {\n        this.debug.log(`\uD83D\uDEAB BLOCK STREAM: Blocking stream to peer ${peerId.substring(0, 8)}...`);\n        \n        // Remove local stream from this connection\n        await connection.setLocalStream(null);\n        \n        // Block remote stream reception\n        if (connection.blockRemoteStreamEmission) {\n          connection.blockRemoteStreamEmission();\n        }\n      }\n    }\n    \n    this.emit('streamingBlockedToPeers', { blockedPeerIds: targetPeerIds });\n  }\n\n  /**\n   * Allow streaming to specific peers (unblock them)\n   * @param {string|string[]} peerIds - Peer ID(s) to allow streaming to\n   */\n  async allowStreamingToPeers(peerIds) {\n    const targetPeerIds = Array.isArray(peerIds) ? peerIds : [peerIds];\n    \n    this.debug.log(`\u2705 ALLOW STREAM: Allowing streaming to ${targetPeerIds.length} peer(s)`);\n    \n    const currentStream = this.mediaManager.localStream;\n    \n    for (const peerId of targetPeerIds) {\n      const connection = this.connectionManager.getPeer(peerId);\n      if (connection) {\n        this.debug.log(`\u2705 ALLOW STREAM: Allowing stream to peer ${peerId.substring(0, 8)}...`);\n        \n        // Enable remote stream reception\n        if (connection.allowRemoteStreamEmission) {\n          connection.allowRemoteStreamEmission();\n        }\n        \n        // Set local stream if we have one\n        if (currentStream) {\n          await connection.setLocalStream(currentStream);\n        }\n      }\n    }\n    \n    this.emit('streamingAllowedToPeers', { allowedPeerIds: targetPeerIds });\n  }\n\n  /**\n   * Get current streaming status for all connected peers\n   * @returns {Map} Map of peer IDs to streaming status\n   */\n  getStreamingStatus() {\n    const status = new Map();\n    const connections = this.connectionManager.getAllConnections();\n    \n    for (const connection of connections) {\n      const hasLocalStream = connection.getLocalStream() !== null;\n      const allowsRemoteStreams = connection.allowRemoteStreams;\n      \n      status.set(connection.peerId, {\n        sendingStream: hasLocalStream,\n        receivingStreams: allowsRemoteStreams,\n        streamType: hasLocalStream ? (this.isStreamingToAll() ? 'broadcast' : 'selective') : 'none'\n      });\n    }\n    \n    return status;\n  }\n\n  /**\n   * Check if currently streaming to all connected peers\n   * @returns {boolean} True if streaming to all peers\n   */\n  isStreamingToAll() {\n    const connections = this.connectionManager.getAllConnections();\n    if (connections.length === 0) return false;\n    \n    return connections.every(connection => connection.getLocalStream() !== null);\n  }\n\n  /**\n   * Get list of peers currently receiving streams\n   * @returns {string[]} Array of peer IDs receiving streams\n   */\n  getStreamingPeers() {\n    const connections = this.connectionManager.getAllConnections();\n    return connections\n      .filter(connection => connection.getLocalStream() !== null)\n      .map(connection => connection.peerId);\n  }\n\n  /**\n   * Get list of peers currently blocked from streaming\n   * @returns {string[]} Array of peer IDs blocked from streaming\n   */\n  getBlockedStreamingPeers() {\n    const connections = this.connectionManager.getAllConnections();\n    return connections\n      .filter(connection => connection.getLocalStream() === null && this.mediaManager.localStream !== null)\n      .map(connection => connection.peerId);\n  }\n\n  // Static utility methods\n  static validatePeerId(peerId) {\n    return typeof peerId === 'string' && /^[a-fA-F0-9]{40}$/.test(peerId);\n  }\n\n  static async generatePeerId() {\n    const array = new Uint8Array(20);\n    \n    // Environment-aware random value generation\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      // Browser environment\n      crypto.getRandomValues(array);\n    } else if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      // Node.js environment\n      try {\n        const crypto = await import('crypto');\n        const randomBytes = crypto.randomBytes(20);\n        array.set(randomBytes);\n      } catch (e) {\n        console.warn('Could not use Node.js crypto, falling back to Math.random');\n        // Fallback to Math.random\n        for (let i = 0; i < array.length; i++) {\n          array[i] = Math.floor(Math.random() * 256);\n        }\n      }\n    } else {\n      // Fallback for unknown environments\n      console.warn('Secure random values not available, using fallback method');\n      for (let i = 0; i < array.length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    \n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  // WebDHT methods - Low-level Distributed Hash Table for raw key-value storage\n  // Note: For encrypted storage with access control, use this.distributedStorage instead\n  /**\n     * Store a key-value pair in the distributed hash table (low-level, no encryption)\n     * @param {string} key - The key to store\n     * @param {any} value - The value to store\n     * @param {object} options - Storage options (ttl, etc.)\n     * @returns {Promise<boolean>} True if stored successfully\n     */\n  async dhtPut(key, value, options = {}) {\n    if (!this.enableWebDHT) {\n      throw new Error('WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.');\n    }\n    if (!this.webDHT) {\n      throw new Error('WebDHT not initialized');\n    }\n    return this.webDHT.put(key, value, options);\n  }\n\n  /**\n     * Retrieve a value from the distributed hash table (low-level, no encryption)\n     * @param {string} key - The key to retrieve\n     * @param {object} options - Retrieval options (subscribe, etc.)\n     * @returns {Promise<any>} The stored value or null if not found\n     */\n  async dhtGet(key, options = {}) {\n    if (!this.enableWebDHT) {\n      throw new Error('WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.');\n    }\n    if (!this.webDHT) {\n      throw new Error('WebDHT not initialized');\n    }\n    return this.webDHT.get(key, options);\n  }\n\n  /**\n     * Subscribe to changes for a key in the DHT\n     * @param {string} key - The key to subscribe to\n     * @returns {Promise<any>} The current value\n     */\n  async dhtSubscribe(key) {\n    if (!this.enableWebDHT) {\n      throw new Error('WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.');\n    }\n    if (!this.webDHT) {\n      throw new Error('WebDHT not initialized');\n    }\n    return this.webDHT.subscribe(key);\n  }\n\n  /**\n     * Unsubscribe from changes for a key in the DHT\n     * @param {string} key - The key to unsubscribe from\n     */\n  async dhtUnsubscribe(key) {\n    if (!this.enableWebDHT) {\n      throw new Error('WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.');\n    }\n    if (!this.webDHT) {\n      throw new Error('WebDHT not initialized');\n    }\n    return this.webDHT.unsubscribe(key);\n  }\n\n  /**\n     * Update a key's value and notify subscribers\n     * @param {string} key - The key to update\n     * @param {any} newValue - The new value\n     * @param {object} options - Update options\n     * @returns {Promise<boolean>} True if updated successfully\n     */\n  async dhtUpdate(key, newValue, options = {}) {\n    if (!this.enableWebDHT) {\n      throw new Error('WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.');\n    }\n    if (!this.webDHT) {\n      throw new Error('WebDHT not initialized');\n    }\n    return this.webDHT.update(key, newValue, options);\n  }\n\n  /**\n     * Get DHT statistics\n     * @returns {object} DHT statistics\n     */\n  getDHTStats() {\n    if (!this.enableWebDHT) {\n      return { error: 'WebDHT is disabled. Enable it by setting enableWebDHT: true in constructor options.' };\n    }\n    if (!this.webDHT) {\n      return { error: 'WebDHT not initialized' };\n    }\n    return this.webDHT.getStats();\n  }\n\n  /**\n     * Check if WebDHT is enabled\n     * @returns {boolean} True if WebDHT is enabled\n     */\n  isDHTEnabled() {\n    return this.enableWebDHT;\n  }\n\n  /**\n     * Setup WebDHT event handlers\n     */\n  setupWebDHTEventHandlers() {\n    // Only set up if webDHT exists\n    if (this.webDHT) {\n      this.webDHT.addEventListener('valueChanged', (data) => {\n        this.emit('dhtValueChanged', data);\n      });\n    }\n  }\n\n  /**\n   * Setup event handlers for DistributedStorageManager\n   */\n  setupDistributedStorageEventHandlers() {\n    // Only set up if distributedStorage exists\n    if (this.distributedStorage) {\n      this.distributedStorage.addEventListener('dataStored', (data) => {\n        this.emit('storageDataStored', data);\n      });\n\n      this.distributedStorage.addEventListener('dataRetrieved', (data) => {\n        this.emit('storageDataRetrieved', data);\n      });\n\n      this.distributedStorage.addEventListener('dataUpdated', (data) => {\n        this.emit('storageDataUpdated', data);\n      });\n\n      this.distributedStorage.addEventListener('dataDeleted', (data) => {\n        this.emit('storageDataDeleted', data);\n      });\n\n      this.distributedStorage.addEventListener('accessGranted', (data) => {\n        this.emit('storageAccessGranted', data);\n      });\n\n      this.distributedStorage.addEventListener('accessRevoked', (data) => {\n        this.emit('storageAccessRevoked', data);\n      });\n    }\n  }\n\n  /**\n     * Connect to a specific peer by ID\n     */\n  connectToPeer(peerId) {\n    if (!peerId || typeof peerId !== 'string') {\n      throw new Error('Valid peer ID is required');\n    }\n\n    if (peerId === this.peerId) {\n      throw new Error('Cannot connect to yourself');\n    }\n\n    return this.connectionManager.connectToPeer(peerId);\n  }\n\n  /**\n     * Get the current environment report\n     * @returns {object} Complete environment detection report\n     */\n  getEnvironmentReport() {\n    return this.environmentReport;\n  }\n\n  /**\n     * Get runtime capabilities\n     * @returns {object} Capabilities detected during initialization\n     */\n  getCapabilities() {\n    return this.capabilities;\n  }\n\n  /**\n     * Get runtime information\n     * @returns {object} Runtime environment information\n     */\n  getRuntimeInfo() {\n    return this.runtimeInfo;\n  }\n\n  /**\n     * Check if a specific feature is supported\n     * @param {string} feature - The feature to check (e.g., 'webrtc', 'websocket', 'localstorage')\n     * @returns {boolean} True if the feature is supported\n     */\n  hasFeature(feature) {\n    return environmentDetector.hasFeature(feature);\n  }\n\n  /**\n     * Get environment-specific recommendations\n     * @returns {object} Recommendations based on current environment\n     */\n  getEnvironmentRecommendations() {\n    const recommendations = [];\n    const report = this.environmentReport;\n\n    if (report.runtime.isBrowser) {\n      if (!report.network.online) {\n        recommendations.push({\n          type: 'warning',\n          message: 'Browser is offline. Enable network connectivity for mesh functionality.'\n        });\n      }\n\n      if (typeof location !== 'undefined' && location.protocol === 'http:' && location.hostname !== 'localhost') {\n        recommendations.push({\n          type: 'security',\n          message: 'Consider using HTTPS for better WebRTC compatibility and security.'\n        });\n      }\n\n      if (report.browser && report.browser.name === 'safari') {\n        recommendations.push({\n          type: 'compatibility',\n          message: 'Safari has some WebRTC limitations. Test thoroughly for production use.'\n        });\n      }\n    }\n\n    if (report.runtime.isNodeJS) {\n      if (!report.capabilities.webSocket) {\n        recommendations.push({\n          type: 'dependency',\n          message: 'Install the \"ws\" package for WebSocket support: npm install ws'\n        });\n      }\n\n      if (!report.capabilities.webrtc) {\n        recommendations.push({\n          type: 'dependency',\n          message: 'Install \"node-webrtc\" or similar for WebRTC support in Node.js: npm install node-webrtc'\n        });\n      }\n    }\n\n    if (!report.capabilities.localStorage && !report.capabilities.sessionStorage) {\n      recommendations.push({\n        type: 'feature',\n        message: 'No persistent storage available. Peer ID will change on restart.'\n      });\n    }\n\n    return {\n      environment: report.runtime,\n      recommendations\n    };\n  }\n\n  // ============================================\n  // Cryptographic Methods (unsea integration)\n  // ============================================\n\n  /**\n     * Initialize crypto with user credentials\n     * @param {Object} options - Crypto initialization options\n     * @param {string} options.alias - User alias for persistent identity\n     * @param {string} options.password - User password\n     * @returns {Promise<boolean>} True if crypto was initialized successfully\n     */\n  async initCrypto(options = {}) {\n    if (!this.enableCrypto) {\n      this.enableCrypto = true;\n      this.cryptoManager = new CryptoManager();\n    }\n\n    if (!this.cryptoManager) {\n      throw new Error('Crypto manager not available');\n    }\n\n    try {\n      await this.cryptoManager.init(options);\n      return true;\n    } catch (error) {\n      this.debug.error('Failed to initialize crypto:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Get crypto status and information\n     * @returns {Object} Crypto status information\n     */\n  getCryptoStatus() {\n    if (!this.cryptoManager) {\n      return {\n        enabled: false,\n        initialized: false,\n        error: 'Crypto not enabled. Enable with enableCrypto: true in constructor'\n      };\n    }\n\n    return this.cryptoManager.getStatus();\n  }\n\n  /**\n     * Enable/disable crypto functionality\n     * @param {boolean} enabled - Whether to enable crypto\n     */\n  setCrypto(enabled) {\n    if (enabled && !this.cryptoManager) {\n      this.cryptoManager = new CryptoManager();\n    }\n    this.enableCrypto = enabled;\n  }\n\n  /**\n     * Encrypt a message without sending it\n     * @param {any} content - Message content to encrypt\n     * @param {string} peerId - Optional target peer ID for peer-to-peer encryption\n     * @param {string} groupId - Optional group ID for group encryption\n     * @returns {Promise<Object>} Encrypted message object\n     */\n  async encryptMessage(content, peerId = null, groupId = null) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    try {\n      if (groupId) {\n        return await this.cryptoManager.encryptForGroup(content, groupId);\n      } else if (peerId) {\n        return await this.cryptoManager.encryptForPeer(content, peerId);\n      } else {\n        // For benchmark/testing purposes, encrypt with our own public key\n        const ourPeerId = this.peerId;\n        const ourKeypair = this.cryptoManager.keypair;\n        if (ourKeypair && ourKeypair.pub && ourKeypair.epub) {\n          // Add our own key temporarily for testing (include both pub and epub)\n          this.cryptoManager.addPeerKey(ourPeerId, {\n            pub: ourKeypair.pub,\n            epub: ourKeypair.epub\n          });\n          return await this.cryptoManager.encryptForPeer(content, ourPeerId);\n        } else {\n          throw new Error('No complete keypair available for encryption (need both pub and epub)');\n        }\n      }\n    } catch (error) {\n      this.debug.error('Failed to encrypt message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a signaling message over the mesh (peer-to-peer) instead of the signaling server\n   * This allows peers to coordinate without the signaling server after initial connection\n   * @param {Object} message - The signaling message\n   * @param {string} targetPeerId - Target peer ID (optional, for direct signaling)\n   * @returns {Promise<boolean>} Success status\n   */\n  async sendMeshSignalingMessage(message, targetPeerId = null) {\n    if (!this.connected) {\n      this.debug.warn('Cannot send mesh signaling message - mesh not connected');\n      return false;\n    }\n\n    const signalingMessage = {\n      type: 'mesh_signaling',\n      meshSignalingType: message.type,\n      data: message.data,\n      fromPeerId: this.peerId,\n      targetPeerId,\n      timestamp: Date.now(),\n      messageId: this.generateMessageId()\n    };\n\n    this.debug.log(`\uD83D\uDCE1 Sending mesh signaling message: ${message.type} ${targetPeerId ? `to ${targetPeerId.substring(0, 8)}...` : '(broadcast)'}`);\n\n    try {\n      if (targetPeerId) {\n        // Send directly to target peer\n        return await this.sendDirectMessage(targetPeerId, signalingMessage);\n      } else {\n        // Broadcast to all connected peers\n        return this.broadcast(signalingMessage);\n      }\n    } catch (error) {\n      this.debug.error('Failed to send mesh signaling message:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Handle incoming mesh signaling messages\n   * @param {Object} message - The mesh signaling message\n   * @param {string} from - Sender peer ID\n   * @private\n   */\n  _handleMeshSignalingMessage(message, from) {\n    if (!message.meshSignalingType || !message.data) {\n      this.debug.warn('Invalid mesh signaling message format');\n      return;\n    }\n\n    // Only process messages intended for us or broadcasts\n    if (message.targetPeerId && message.targetPeerId !== this.peerId) {\n      this.debug.log(`Ignoring mesh signaling message not intended for us (target: ${message.targetPeerId?.substring(0, 8)}...)`);\n      return;\n    }\n\n    this.debug.log(`\uD83D\uDCE1 Received mesh signaling message: ${message.meshSignalingType} from ${from.substring(0, 8)}...`);\n\n    // Create a signaling message format that our existing handler can process\n    const reconstitutedMessage = {\n      type: message.meshSignalingType,\n      data: message.data,\n      fromPeerId: from,\n      targetPeerId: message.targetPeerId,\n      timestamp: message.timestamp,\n      messageId: message.messageId,\n      viaWebSocket: false, // Mark as coming from mesh, not WebSocket\n      viaMesh: true\n    };\n\n    // Forward to our existing signaling handler\n    this.signalingHandler.handleSignalingMessage(reconstitutedMessage);\n  }\n\n  /**\n   * Send a signaling message, using mesh connections for renegotiation\n   * @param {Object} message - The signaling message\n   * @param {string} targetPeerId - Target peer ID (optional)\n   * @returns {Promise<boolean>} Success status\n   */\n  async sendSignalingMessage(message, targetPeerId = null) {\n    // CRITICAL FIX: Use mesh for renegotiation, WebSocket only for initial handshake\n    const isRenegotiation = message.type === 'renegotiation-offer' || message.type === 'renegotiation-answer';\n\n    if (isRenegotiation && targetPeerId) {\n      // Use existing mesh connection for renegotiation\n      this.debug.log(`\uD83D\uDD04 MESH RENEGOTIATION: Sending ${message.type} via mesh to ${targetPeerId.substring(0, 8)}...`);\n\n      const peerConnection = this.connectionManager.getPeer(targetPeerId);\n      if (peerConnection && peerConnection.sendMessage) {\n        const success = peerConnection.sendMessage({\n          type: 'signaling',\n          data: message,\n          fromPeerId: this.peerId,\n          timestamp: Date.now()\n        });\n\n        if (success) {\n          this.debug.log(`\u2705 MESH RENEGOTIATION: ${message.type} sent via mesh to ${targetPeerId.substring(0, 8)}...`);\n          return true;\n        } else {\n          this.debug.error(`\u274C MESH RENEGOTIATION: Failed to send ${message.type} via mesh to ${targetPeerId.substring(0, 8)}...`);\n        }\n      } else {\n        this.debug.error(`\u274C MESH RENEGOTIATION: No mesh connection to ${targetPeerId.substring(0, 8)}... for ${message.type}`);\n      }\n\n      // Fall back to WebSocket if mesh fails\n      this.debug.log(`\uD83D\uDD04 FALLBACK: Using WebSocket for ${message.type} to ${targetPeerId.substring(0, 8)}...`);\n    }\n\n    // Use WebSocket for initial offers/answers and fallback\n    if (this.signalingClient && this.signalingClient.isConnected()) {\n      this.debug.log(`\uD83D\uDCE1 Using WebSocket signaling for ${message.type} to ${targetPeerId?.substring(0, 8) || 'broadcast'}`);\n\n      // Include targetPeerId in the message if provided\n      const messageWithTarget = { ...message };\n      if (targetPeerId) {\n        messageWithTarget.targetPeerId = targetPeerId;\n      }\n\n      return await this.signalingClient.sendSignalingMessage(messageWithTarget);\n    }\n\n    this.debug.warn(`\uD83D\uDCE1 Cannot send signaling message ${message.type} - WebSocket not connected and mesh failed`);\n    return false;\n  }\n\n  /**\n     * Send an encrypted message to a specific peer\n     * @param {string} peerId - Target peer ID\n     * @param {any} content - Message content\n     * @param {Object} options - Message options\n     * @returns {Promise<string|null>} Message ID if sent successfully\n     */\n  async sendEncryptedMessage(peerId, content, _options = {}) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    try {\n      const encryptedContent = await this.cryptoManager.encryptForPeer(content, peerId);\n      return await this.sendDirectMessage(peerId, encryptedContent);\n    } catch (error) {\n      this.debug.error('Failed to send encrypted message:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Send an encrypted broadcast message\n     * @param {any} content - Message content\n     * @param {string} groupId - Optional group ID for group encryption\n     * @returns {Promise<string|null>} Message ID if sent successfully\n     */\n  async sendEncryptedBroadcast(content, groupId = null) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    try {\n      let encryptedContent;\n      if (groupId) {\n        encryptedContent = await this.cryptoManager.encryptForGroup(content, groupId);\n      } else {\n        // For broadcast without group, we'll need to encrypt for each peer individually\n        // This is a simplified approach - in practice, you'd use group keys\n        encryptedContent = {\n          encrypted: true,\n          broadcast: true,\n          data: content,\n          from: this.cryptoManager.getPublicKey(),\n          timestamp: Date.now()\n        };\n      }\n      // Use 'encrypted' message type instead of 'chat' for encrypted broadcasts\n      return await this.gossipManager.broadcastMessage(encryptedContent, 'encrypted');\n    } catch (error) {\n      this.debug.error('Failed to send encrypted broadcast:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Decrypt a received message\n     * @param {Object} encryptedData - Encrypted message data\n     * @returns {Promise<any>} Decrypted content\n     */\n  async decryptMessage(encryptedData) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      return encryptedData; // Return as-is if crypto not enabled\n    }\n\n    try {\n      if (encryptedData.group) {\n        return await this.cryptoManager.decryptFromGroup(encryptedData);\n      } else {\n        return await this.cryptoManager.decryptFromPeer(encryptedData);\n      }\n    } catch (error) {\n      this.debug.error('Failed to decrypt message:', error);\n      throw error;\n    }\n  }\n\n  /**\n     * Exchange public keys with a peer\n     * @param {string} peerId - Peer ID to exchange keys with\n     */\n  async exchangeKeysWithPeer(peerId) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    // Check if we're already in the process of exchanging keys with this peer\n    if (this.ongoingKeyExchanges.has(peerId)) {\n      this.debug.log(`\uD83D\uDD10 Skipping key exchange with ${peerId.substring(0, 8)}... - exchange already in progress`);\n      return;\n    }\n\n    // Check if we already have this peer's key to avoid duplicate exchanges\n    const hasExistingKey = this.cryptoManager.peerKeys.has(peerId);\n    if (hasExistingKey) {\n      this.debug.log(`\uD83D\uDD10 Skipping key exchange with ${peerId.substring(0, 8)}... - key already exists`);\n      return;\n    }\n\n    const keypair = this.cryptoManager.keypair;\n    if (!keypair || !keypair.pub || !keypair.epub) {\n      throw new Error('No complete keypair available (need both pub and epub)');\n    }\n\n    this.debug.log(`\uD83D\uDD10 Initiating key exchange with ${peerId.substring(0, 8)}...`);\n\n    // Mark this peer as having an ongoing key exchange\n    this.ongoingKeyExchanges.add(peerId);\n\n    try {\n      // Send both our public key (pub) and encryption public key (epub) to the peer\n      const result = await this.gossipManager.sendDirectMessage(peerId, {\n        type: 'key_exchange',\n        publicKey: {\n          pub: keypair.pub,\n          epub: keypair.epub\n        },\n        timestamp: Date.now()\n      }, 'key_exchange');\n\n      // Clear the ongoing exchange after a short delay (allow time for response)\n      setTimeout(() => {\n        this.ongoingKeyExchanges.delete(peerId);\n      }, 5000); // 5 second timeout\n\n      return result;\n    } catch (error) {\n      // Clear the ongoing exchange on error\n      this.ongoingKeyExchanges.delete(peerId);\n      throw error;\n    }\n  }\n\n  /**\n     * Add a peer's public key\n     * @param {string} peerId - Peer ID\n     * @param {string} publicKey - Peer's public key\n     * @returns {boolean} True if key was added successfully\n     */\n  addPeerPublicKey(peerId, publicKey) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      return false;\n    }\n\n    return this.cryptoManager.addPeerKey(peerId, publicKey);\n  }\n\n  /**\n     * Generate a group key for encrypted group communications\n     * @param {string} groupId - Group identifier\n     * @returns {Promise<Object>} Generated group key\n     */\n  async generateGroupKey(groupId) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    return await this.cryptoManager.generateGroupKey(groupId);\n  }\n\n  /**\n     * Add a group key for encrypted group communications\n     * @param {string} groupId - Group identifier\n     * @param {Object} groupKey - Group key object\n     */\n  addGroupKey(groupId, groupKey) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    this.cryptoManager.addGroupKey(groupId, groupKey);\n  }\n\n  /**\n     * Sign data with our private key\n     * @param {any} data - Data to sign\n     * @returns {Promise<string>} Digital signature\n     */\n  async signData(data) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    return await this.cryptoManager.sign(data);\n  }\n\n  /**\n     * Verify a signature\n     * @param {string} signature - Signature to verify\n     * @param {any} data - Original data\n     * @param {string} publicKey - Signer's public key\n     * @returns {Promise<boolean>} True if signature is valid\n     */\n  async verifySignature(signature, data, publicKey) {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      return true; // If crypto disabled, assume valid\n    }\n\n    return await this.cryptoManager.verify(signature, data, publicKey);\n  }\n\n  /**\n     * Export our public key for sharing\n     * @returns {Object|null} Public key export data\n     */\n  exportPublicKey() {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      return null;\n    }\n\n    return this.cryptoManager.exportPublicKey();\n  }\n\n  /**\n     * Run crypto self-tests\n     * @returns {Promise<Object>} Test results\n     */\n  async runCryptoTests() {\n    if (!this.enableCrypto || !this.cryptoManager) {\n      throw new Error('Crypto not enabled or initialized');\n    }\n\n    return await this.cryptoManager.runSelfTest();\n  }\n\n  /**\n     * Reset crypto state and clear all keys\n     */\n  resetCrypto() {\n    if (this.cryptoManager) {\n      this.cryptoManager.reset();\n    }\n    // Clear ongoing key exchange tracking\n    this.ongoingKeyExchanges.clear();\n    // Clear emitted key event tracking\n    this.emittedPeerKeyEvents.clear();\n  }\n\n  /**\n     * Handle incoming key exchange messages\n     * @param {Object} data - Key exchange message data\n     * @param {string} from - Sender's peer ID\n     * @private\n     */\n  async _handleKeyExchange(data, from) {\n    if ((data.type === 'key_exchange' || data.type === 'key_exchange_response') && data.publicKey && this.cryptoManager) {\n      // Try to add the peer key - will return false if it's a duplicate\n      const keyAdded = this.cryptoManager.addPeerKey(from, data.publicKey);\n      \n      if (keyAdded) {\n        this.debug.log(`\uD83D\uDD10 Stored public key for peer ${from.substring(0, 8)}...`);\n        // Clear any ongoing key exchange tracking for this peer since we now have their key\n        this.ongoingKeyExchanges.delete(from);\n      } else {\n        this.debug.log(`\uD83D\uDD10 Key exchange ignored for peer ${from.substring(0, 8)}... - duplicate key`);\n      }\n\n      // Send our public key back if this was an initial exchange (not a response) and the key was actually new\n      if (data.type === 'key_exchange' && keyAdded) {\n        const keypair = this.cryptoManager.keypair;\n        if (keypair && keypair.pub && keypair.epub) {\n          await this.gossipManager.sendDirectMessage(from, {\n            type: 'key_exchange_response',\n            publicKey: {\n              pub: keypair.pub,\n              epub: keypair.epub\n            },\n            timestamp: Date.now()\n          }, 'key_exchange_response');\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle remote stream announcements from gossip protocol\n   * The actual stream forwarding is handled by ConnectionManager\n   * @param {Object} data - Stream announcement data\n   * @private\n   */\n  async _handleRemoteStreamAnnouncement(data) {\n    const { peerId, event } = data;\n\n    // Don't process our own announcements\n    if (peerId === this.peerId) {\n      return;\n    }\n\n    this.debug.log(`\uD83C\uDFB5 GOSSIP STREAM: Received stream announcement - ${event} from ${peerId.substring(0, 8)}...`);\n\n    // Stream forwarding is now handled automatically by ConnectionManager\n    // when remoteStream events are received, so we just emit for UI handling\n    this.emit('remoteStreamAnnouncementReceived', data);\n  }\n}\n"],
  "mappings": "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",
  "names": ["crypto", "require_browser", "isBrowser", "crypto", "isBrowser", "WebSocket", "allPeers", "capablePeers", "crypto", "randomBytes", "isBrowser", "unsea", "initializeUnsea", "crypto", "randomBytes"]
}
